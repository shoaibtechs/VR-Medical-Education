<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MAGES.Hub.Runtime</name>
    </assembly>
    <members>
        <member name="T:MAGES.ActionState">
            <summary>
            The current state of an action.
            </summary>
        </member>
        <member name="F:MAGES.ActionState.Uninitialized">
            <summary>
            The action has not been initialized yet.
            </summary>
        </member>
        <member name="F:MAGES.ActionState.Running">
            <summary>
            The action is initialized and ready to be performed.
            </summary>
        </member>
        <member name="F:MAGES.ActionState.Performed">
            <summary>
            The action has been performed.
            </summary>
        </member>
        <member name="T:MAGES.AnalyticsModule">
            <summary>
            The analytics module base class.
            </summary>
        </member>
        <member name="P:MAGES.AnalyticsModule.ExportPath">
            <summary>
            Gets or sets the export path of analytics data.
            </summary>
        </member>
        <member name="M:MAGES.AnalyticsModule.InitializeTimer">
            <summary>
            Intializes the analytics timer.
            </summary>
        </member>
        <member name="M:MAGES.AnalyticsModule.InvalidateTimer">
            <summary>
            Invalidates the analytics timer and resets it.
            </summary>
        </member>
        <member name="M:MAGES.AnalyticsModule.GetTimeSinceStartUp">
            <summary>
            Gets the time since the last valid start up of the analytics timer in seconds.
            </summary>
            <returns> The time since the last valid start up of the analytics timer in seconds. </returns>
        </member>
        <member name="M:MAGES.AnalyticsModule.AddQuery``1(System.String)">
            <summary>
            Creates a new query and stores it under the given name.
            </summary>
            <typeparam name="TQuery"> The type of the new query. </typeparam>
            <param name="name"> The name of the query. </param>
            <returns> The newly created query. </returns>
        </member>
        <member name="M:MAGES.AnalyticsModule.GetQuery``1(System.String)">
            <summary>
            Retrieves a stored query under the given name.
            </summary>
            <typeparam name="TQuery"> The type of the requested query. </typeparam>
            <param name="name"> The name of the requested query. </param>
            <returns> The requested query. </returns>
        </member>
        <member name="M:MAGES.AnalyticsModule.RemoveQuery``1(System.String)">
            <summary>
            Removes a stored query under the given name.
            </summary>
            <typeparam name="TQuery"> The type of the requested query. </typeparam>
            <param name="name"> The name of the query. </param>
        </member>
        <member name="M:MAGES.AnalyticsModule.AddEvent``1(System.String)">
            <summary>
            Creates a new event and stores it under the given name.
            </summary>
            <typeparam name="TEvent"> The type of the requested event. </typeparam>
            <param name="name"> The name of the event. </param>
            <returns> The newly created event. </returns>
        </member>
        <member name="M:MAGES.AnalyticsModule.GetEvent``1(System.String)">
            <summary>
            Retrieves a stored event under the given name.
            </summary>
            <typeparam name="TEvent"> The type of the requested event. </typeparam>
            <param name="name"> The name of the requested event. </param>
            <returns> The requested event. </returns>
        </member>
        <member name="M:MAGES.AnalyticsModule.RemoveEvent``1(System.String)">
            <summary>
            Removes a stored event under the given name.
            </summary>
            <typeparam name="TEvent"> The type of the requested query. </typeparam>
            <param name="name"> The name of the query. </param>
        </member>
        <member name="M:MAGES.AnalyticsModule.ExportAll">
            <summary>
            Exports all analytics data.
            </summary>
        </member>
        <member name="M:MAGES.AnalyticsModule.ExportQueries(System.String)">
            <summary>
            Export all queries.
            </summary>
            <param name="tag"> The queries with this tag will be exported. Everything is exported if empty. </param>
        </member>
        <member name="M:MAGES.AnalyticsModule.ExportEvents(System.String)">
            <summary>
            Exports all events.
            </summary>
            <param name="tag"> The events with this tag will be exported. Everything is exported if empty. </param>
        </member>
        <member name="T:MAGES.AnimationUtilities">
            <summary>
            Utilities for animating objects and modifying animation clips.
            </summary>
        </member>
        <member name="M:MAGES.AnimationUtilities.EaseInSine(System.Single)">
            <summary>
            Converts a t value [0, 1] to a value [0, 1] using the ease in sine function.
            </summary>
            <param name="t">The input time.</param>
            <returns>The modified t value.</returns>
        </member>
        <member name="M:MAGES.AnimationUtilities.EaseOutSine(System.Single)">
            <summary>
            Converts a t value [0, 1] to a value [0, 1] using the ease out sine function.
            </summary>
            <param name="t">The input time.</param>
            <returns>The modified t value.</returns>
        </member>
        <member name="M:MAGES.AnimationUtilities.EaseInCubic(System.Single)">
            <summary>
            Converts a t value [0, 1] to a value [0, 1] using the ease in cubic function.
            </summary>
            <param name="t">The input time.</param>
            <returns>The modified t value.</returns>
        </member>
        <member name="M:MAGES.AnimationUtilities.EaseOutCubic(System.Single)">
            <summary>
            Converts a t value [0, 1] to a value [0, 1] using the ease out cubic function.
            </summary>
            <param name="t">The input time.</param>
            <returns>The modified t value.</returns>
        </member>
        <member name="M:MAGES.AnimationUtilities.EaseOutQuint(System.Single)">
            <summary>
            Converts a t value [0, 1] to a value [0, 1] using the ease out quint function.
            </summary>
            <param name="t">The input time.</param>
            <returns>The modified t value.</returns>
        </member>
        <member name="M:MAGES.AnimationUtilities.Map(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Maps a value from one range to another.
            </summary>
            <param name="a1">Input range minimum.</param>
            <param name="a2">Input range maximum.</param>
            <param name="b1">Output range minimum.</param>
            <param name="b2">Output range maximum.</param>
            <param name="x">T value.</param>
            <returns>The mapped T value.</returns>
        </member>
        <member name="T:MAGES.ComponentLibrary.ApplicationQuitterManager">
            <summary>
            Manager for getting and setting the correct application quitter.
            </summary>
        </member>
        <member name="P:MAGES.ComponentLibrary.ApplicationQuitterManager.Quitter">
            <summary>
            Gets or sets the current application quitter.
            </summary>
        </member>
        <member name="T:MAGES.ComponentLibrary.ApplicationQuitterManager.RuntimeApplicationQuitter">
            <summary>
            The application quitter used during build.
            </summary>
        </member>
        <member name="M:MAGES.ComponentLibrary.ApplicationQuitterManager.RuntimeApplicationQuitter.ApplicationQuit">
            <summary>
            Locates the current camera.
            </summary>
        </member>
        <member name="T:MAGES.ComponentLibrary.ArrowGuide">
            <summary>
            Creates an arrow object, and points it at the target. If the user is not looking at the target, the arrow will point in the direction of the target.
            </summary>
            @todo(mdodis): Supply a curve data object instead of manually animating the arrow's position and fade values.
        </member>
        <member name="T:MAGES.ComponentLibrary.ArrowGuide.State">
            <summary>
            The state of the arrow.
            </summary>
        </member>
        <member name="F:MAGES.ComponentLibrary.ArrowGuide.State.Hidden">
            <summary>
            The arrow is hidden.
            </summary>
        </member>
        <member name="F:MAGES.ComponentLibrary.ArrowGuide.State.OnCamera">
            <summary>
            The arrow is in the camera viewport.
            </summary>
        </member>
        <member name="F:MAGES.ComponentLibrary.ArrowGuide.State.Animating">
            <summary>
            The arrow is animating.
            </summary>
        </member>
        <member name="P:MAGES.ComponentLibrary.ArrowGuide.OnStateChanged">
            <summary>
            Gets the event that's called when the state of the arrow changes.
            </summary>
        </member>
        <member name="P:MAGES.ComponentLibrary.ArrowGuide.CurrentState">
            <summary>
            Gets the current state of the arrow.
            </summary>
        </member>
        <member name="M:MAGES.ComponentLibrary.ArrowGuide.Theme(MAGES.ComponentLibrary.ArrowGuide.Data)">
            <summary>
            Gets or sets the data for the arrow guide.
            </summary>
            <param name="data">The data.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:MAGES.ComponentLibrary.ArrowGuide.Refresh">
            <summary>
            Refreshes the arrow.
            </summary>
        </member>
        <member name="T:MAGES.ComponentLibrary.ArrowGuide.Data">
            <summary>
            The theming data for the arrow guide.
            </summary>
        </member>
        <member name="T:MAGES.ComponentLibrary.CameraLocatorManager">
            <summary>
            An interface for locating the current camera.
            </summary>
        </member>
        <member name="P:MAGES.ComponentLibrary.CameraLocatorManager.Locator">
            <summary>
            Gets or sets the current camera locator.
            </summary>
        </member>
        <member name="T:MAGES.ComponentLibrary.CameraLocatorManager.DefaultCameraLocator">
            <summary>
            The default camera locator.
            </summary>
        </member>
        <member name="M:MAGES.ComponentLibrary.CameraLocatorManager.DefaultCameraLocator.LocateCurrentCamera">
            <summary>
            Locates the current camera.
            </summary>
            <returns>The camera.</returns>
        </member>
        <member name="T:MAGES.ComponentLibrary.IApplicationQuitter">
            <summary>
            An interface for quitting the application correctly.
            </summary>
        </member>
        <member name="M:MAGES.ComponentLibrary.IApplicationQuitter.ApplicationQuit">
            <summary>
            Quits the application.
            </summary>
        </member>
        <member name="T:MAGES.ComponentLibrary.ICameraLocator">
            <summary>
            An interface for locating the current camera.
            </summary>
        </member>
        <member name="M:MAGES.ComponentLibrary.ICameraLocator.LocateCurrentCamera">
            <summary>
            Locates the current camera.
            </summary>
            <returns>The first current camera.</returns>
        </member>
        <member name="T:MAGES.ComponentLibrary.Label">
            <summary>
            A simple label in 3D space.
            </summary>
        </member>
        <member name="M:MAGES.ComponentLibrary.Label.Text(System.String)">
            <summary>
            Sets the text of the label.
            </summary>
            <param name="text">The text.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:MAGES.ComponentLibrary.Label.Pivot(UnityEngine.Vector2)">
            <summary>
            Sets the pivot of the underlying canvas of the label.
            </summary>
            <param name="pivot">The new pivot.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:MAGES.ComponentLibrary.Label.Pivot(System.Single,System.Single)">
            <summary>
            Sets the pivot of the underlying canvas of the label.
            </summary>
            <param name="x">Pivot.x.</param>
            <param name="y">Pivot.y.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:MAGES.ComponentLibrary.Label.Font(MAGES.Theme.FontData)">
            <summary>
            Sets the font of the label.
            </summary>
            <param name="fontData">The new font data.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:MAGES.ComponentLibrary.Label.Padding(UnityEngine.Vector4)">
            <summary>
            Sets the padding of the label.
            </summary>
            <param name="padding">The new padding.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:MAGES.ComponentLibrary.Label.SetData(MAGES.ComponentLibrary.Label.Data)">
            <summary>
            Sets the data for the label.
            </summary>
            <param name="data">The new data.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:MAGES.ComponentLibrary.Label.GetData">
            <summary>
            Gets the data for the label.
            </summary>
            <returns>The data.</returns>
        </member>
        <member name="M:MAGES.ComponentLibrary.Label.Refresh">
            <summary>
            Refresh the layout of the label.
            </summary>
        </member>
        <member name="T:MAGES.ComponentLibrary.Label.Data">
            <summary>
            The data for the label.
            </summary>
        </member>
        <member name="P:MAGES.ComponentLibrary.Label.Data.Font">
            <summary>
            Gets the font.
            </summary>
        </member>
        <member name="P:MAGES.ComponentLibrary.Label.Data.Padding">
            <summary>
            Gets the padding.
            </summary>
        </member>
        <member name="P:MAGES.ComponentLibrary.Label.Data.ResolvedFont">
            <summary>
            Gets the resolved font.
            </summary>
        </member>
        <member name="P:MAGES.ComponentLibrary.Label.Data.ResolvedPadding">
            <summary>
            Gets the resolved padding.
            </summary>
        </member>
        <member name="P:MAGES.ComponentLibrary.Label.Data.Pivot">
            <summary>
            Gets or sets the pivot of the label.
            </summary>
        </member>
        <member name="T:MAGES.ComponentLibrary.RotatingLabel">
            <summary>
            A label that is placed on top of an object and rotates around the object to look at the camera.
            </summary>
        </member>
        <member name="M:MAGES.ComponentLibrary.RotatingLabel.Refresh">
            <summary>
            Refreshes the layout of the label.
            </summary>
        </member>
        <member name="M:MAGES.ComponentLibrary.RotatingLabel.Text(System.String)">
            <summary>
            Sets the text of the label.
            </summary>
            <param name="text">The new text.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:MAGES.ComponentLibrary.RotatingLabel.Font(MAGES.Theme.FontData)">
            <summary>
            Sets the font of the label.
            </summary>
            <param name="font">The font.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:MAGES.ComponentLibrary.RotatingLabel.Offset(System.Single,System.Single)">
            <summary>
            Sets the offset of the label from the object.
            </summary>
            <param name="xz">The horizontal offset.</param>
            <param name="h">The height adjustment.</param>
            <returns>Self.</returns>
        </member>
        <member name="T:MAGES.BaseActionData">
            <summary>
            Base class for action data.
            </summary>
        </member>
        <member name="F:MAGES.BaseActionData.actionName">
            <summary>
            The name of the action. Also corresponds to the filename of the Action asset.
            </summary>
        </member>
        <member name="F:MAGES.BaseActionData.id">
            <summary>
            The id of the action.
            </summary>
        </member>
        <member name="F:MAGES.BaseActionData.nodePosition">
            <summary>
            The position of the node in the graph.
            </summary>
        </member>
        <member name="F:MAGES.BaseActionData.nextActions">
            <summary>
            The next actions.
            </summary>
        </member>
        <member name="F:MAGES.BaseActionData.prevActions">
            <summary>
            The previous actions.
            </summary>
        </member>
        <member name="F:MAGES.BaseActionData.attachedScripts">
            <summary>
            The attached scripts that get messages when this action is initialized, performed or undone/reverted.
            </summary>
        </member>
        <member name="F:MAGES.BaseActionData.steps">
            <summary>
            The steps to invoke when this action is initialized, performed or undone/reverted.
            </summary>
        </member>
        <member name="F:MAGES.BaseActionData.state">
            <summary>
            The state of the action.
            </summary>
        </member>
        <member name="T:MAGES.BaseActionData.ObjectParentType">
            <summary>
            Enum with the types of parent for the Use Object.
            </summary>
        </member>
        <member name="F:MAGES.BaseActionData.ObjectParentType.None">
            <summary>
            No parent.
            </summary>
        </member>
        <member name="F:MAGES.BaseActionData.ObjectParentType.Path">
            <summary>
            Reference an object from the scene using its absolute path.
            </summary>
        </member>
        <member name="F:MAGES.BaseActionData.ObjectParentType.Reference">
            <summary>
            Reference an object from the scene using the Unique Identifier.
            </summary>
        </member>
        <member name="P:MAGES.BaseActionData.NextActions">
            <summary>
            Gets or sets the next actions.
            </summary>
        </member>
        <member name="P:MAGES.BaseActionData.PrevActions">
            <summary>
            Gets or sets the previous actions.
            </summary>
        </member>
        <member name="P:MAGES.BaseActionData.AttachedScripts">
            <summary>
            Gets or sets the attached scripts.
            </summary>
        </member>
        <member name="P:MAGES.BaseActionData.PathEnd">
            <summary>
            Gets or sets the event that is called when an action without next action is performed.
            </summary>
        </member>
        <member name="P:MAGES.BaseActionData.ID">
            <summary>
            Gets or sets the id.
            </summary>
            This is a unique identifier for the action, both in the graph and in the scene.
        </member>
        <member name="P:MAGES.BaseActionData.ActionName">
            <summary>
            Gets or sets the action name.
            </summary>
        </member>
        <member name="P:MAGES.BaseActionData.AdvancedMode">
            <summary>
            Gets or sets a value indicating whether the advanced mode where more options are available on the action node.
            </summary>
        </member>
        <member name="P:MAGES.BaseActionData.NodePosition">
            <summary>
            Gets or sets the node position.
            </summary>
        </member>
        <member name="P:MAGES.BaseActionData.State">
            <summary>
            Gets or sets the current state of this action.
            </summary>
        </member>
        <member name="P:MAGES.BaseActionData.Steps">
            <summary>
            Gets or sets the steps container.
            </summary>
        </member>
        <member name="P:MAGES.BaseActionData.Effects">
            <summary>
            Gets or sets the effects data.
            </summary>
        </member>
        <member name="P:MAGES.BaseActionData.ActionGameObjects">
            <summary>
            Gets the actions game objects.
            </summary>
        </member>
        <member name="P:MAGES.BaseActionData.IsStartAction">
            <summary>
            Gets a value indicating whether this action is a start action.
            </summary>
        </member>
        <member name="M:MAGES.BaseActionData.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:MAGES.BaseActionData.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:MAGES.BaseActionData.GetLinkedActions">
            <summary>
            Gets the linked actions.
            </summary>
            <returns>The linked action list.</returns>
        </member>
        <member name="M:MAGES.BaseActionData.GetIncomingActions">
            <summary>
            Gets the incoming actions.
            </summary>
            <returns>The incoming linked action list.</returns>
        </member>
        <member name="T:MAGES.Bundle">
            <summary>
            A bundle of hub modules.
            </summary>
        </member>
        <member name="F:MAGES.Bundle.sceneGraphData">
            <summary>
            The scene graph data.
            </summary>
        </member>
        <member name="F:MAGES.Bundle.dataContainerModule">
            <summary>
            The data container module.
            </summary>
        </member>
        <member name="F:MAGES.Bundle.interactionSystemModule">
            <summary>
            The interaction system module.
            </summary>
        </member>
        <member name="P:MAGES.Bundle.GraphData">
            <summary>
            Gets or sets a value indicating the current scene graph data.
            </summary>
        </member>
        <member name="P:MAGES.Bundle.DataContainer">
            <summary>
            Gets or sets a value indicating the current data container module.
            </summary>
        </member>
        <member name="P:MAGES.Bundle.InteractionSystem">
            <summary>
            Gets or sets a value indicating the current interaction system module.
            </summary>
        </member>
        <member name="P:MAGES.Bundle.Networking">
            <summary>
            Gets or sets a value indicating the current networking module.
            </summary>
        </member>
        <member name="P:MAGES.Bundle.Analytics">
            <summary>
            Gets or sets a value indicating the current analytics module.
            </summary>
        </member>
        <member name="P:MAGES.Bundle.DeviceManager">
            <summary>
            Gets or sets a value indicating the current device manager module.
            </summary>
        </member>
        <member name="P:MAGES.Bundle.SceneGraph">
            <summary>
            Gets or sets a value indicating the current scene graph module.
            </summary>
        </member>
        <member name="P:MAGES.Bundle.ExtraModules">
            <summary>
            Gets or sets a value indicating the current extra modules.
            </summary>
        </member>
        <member name="P:MAGES.Bundle.CurrentTheme">
            <summary>
            Gets or sets a value indicating the current theme.
            </summary>
        </member>
        <member name="P:MAGES.Bundle.AllModules">
            <summary>
            Gets all modules.
            </summary>
        </member>
        <member name="T:MAGES.CountSchema">
            <summary>
            Count schema for the data.
            </summary>
        </member>
        <member name="P:MAGES.CountSchema.Instance">
            <summary>
            Gets singleton instance of the schema.
            </summary>
        </member>
        <member name="M:MAGES.CountSchema.GetInstance">
            <summary>
            Gets the instance of the singleton.
            </summary>
            <returns>The singleton instance.</returns>
        </member>
        <member name="M:MAGES.CountSchema.Store(System.String,System.Object)">
            <summary>
            Stores data in the schema under the given key.
            </summary>
            <param name="key">Given key.</param>
            <param name="data">Given data.</param>
        </member>
        <member name="M:MAGES.CountSchema.ClearAllData">
            <summary>
            Clears all data.
            </summary>
        </member>
        <member name="M:MAGES.CountSchema.GetSpecificData(System.String)">
            <summary>
            Get specific sub-convention/pattern data under the given key pattern.
            </summary>
            <param name="keyPattern">Given key pattern.</param>
            <returns>List key value pair of data.</returns>
        </member>
        <member name="M:MAGES.CountSchema.DeleteSpecificData(System.String)">
            <summary>
            Delete specific sub-convention/pattern data under the given key pattern.
            </summary>
            <param name="keyPattern">Given key pattern.</param>
        </member>
        <member name="M:MAGES.CountSchema.Get(System.String)">
            <summary>
            Retrieves data from the schema under the given key.
            </summary>
            <param name="key">Given key.</param>
            <returns>Returns the data under the given key.</returns>
            <exception cref="T:System.ArgumentException">Exception if key wasn't found.</exception>
        </member>
        <member name="M:MAGES.CountSchema.GetAllData(System.String)">
            <summary>
            Gets all data from the schema.
            </summary>
            <param name="keyPattern">Given schema key.</param>
            <returns>The schema data.</returns>
        </member>
        <member name="M:MAGES.CountSchema.DeleteData(System.String)">
            <summary>
            Deletes data from the schema under the given key.
            </summary>
            <param name="key">Given key.</param>
            <exception cref="T:System.ArgumentException">Exception if key wasn't found.</exception>
        </member>
        <member name="M:MAGES.CountSchema.DeleteAllData(System.String)">
            <summary>
            Deletes data from given schema.
            </summary>
            <param name="keyPattern">Given schema key.</param>
        </member>
        <member name="T:MAGES.DataContainerModule">
            <summary>
            The data container module base class.
            </summary>
        </member>
        <member name="M:MAGES.DataContainerModule.SetSchema(System.String,System.Type)">
            <summary>
            Sets the schema for the data container.
            </summary>
            <param name="keyPattern">The convention/pattern the Schema is created under, i.e mages.actions.* .</param>
            <param name="schemaType">The type of the Schema.</param>
        </member>
        <member name="M:MAGES.DataContainerModule.StoreData(System.String,System.Object)">
            <summary>
            Stores value in the data container under the given key.
            </summary>
            <param name="key">The key of the data container.</param>
            <param name="value">The value to be stored.</param>
        </member>
        <member name="M:MAGES.DataContainerModule.GetData(System.String)">
            <summary>
            Get the data from the data container under the given key.
            </summary>
            <param name="key">The given key.</param>
            <returns>The value under the given key.</returns>
        </member>
        <member name="M:MAGES.DataContainerModule.GetSchemaData(System.String)">
            <summary>
            Returns the schema data for the given key pattern.
            </summary>
            <param name="keyPattern">The convention/pattern.</param>
            <returns>A dictionary with the data of the whole Schema under the given convention/pattern.</returns>
        </member>
        <member name="M:MAGES.DataContainerModule.DeleteData(System.String)">
            <summary>
            Deletes the data under the given key.
            </summary>
            <param name="key">The key to be deleted.</param>
        </member>
        <member name="M:MAGES.DataContainerModule.DeleteSchema(System.String)">
            <summary>
            Deletes the schema under the given key pattern.
            </summary>
            <param name="keyPattern">The convention/pattern of the schema to be deleted.</param>
        </member>
        <member name="M:MAGES.DataContainerModule.GetSpecificSchemaData(System.String)">
            <summary>
            Returns the data of the schema under the given key pattern.
            </summary>
            <param name="keyPattern">The key pattern of the data under the Schema.</param>
            <returns>Returns a dictionary of the data that are stored under the given keyPattern.</returns>
        </member>
        <member name="M:MAGES.DataContainerModule.DeleteSpecificSchemaData(System.String)">
            <summary>
             Deletes the data of the schema under the given key pattern.
            </summary>
            <param name="keyPattern">The key pattern of the data under the Schema.</param>
        </member>
        <member name="M:MAGES.DataContainerModule.ClearAllData">
            <summary>
            Clears all data and all schemas.
            </summary>
        </member>
        <member name="T:MAGES.DefaultValueLocatorAttribute">
            <summary>
            A supporting class for <see cref="T:MAGES.OverridableProperty`1"/> that allows the default value to be located dynamically.
            </summary>
        </member>
        <member name="M:MAGES.DefaultValueLocatorAttribute.#ctor(System.Type,System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MAGES.DefaultValueLocatorAttribute"/> class.
            </summary>
            <param name="type">The expected type.</param>
            <param name="locatorType">The type of the locator.</param>
            <param name="key">The key to locate.</param>
        </member>
        <member name="P:MAGES.DefaultValueLocatorAttribute.Data">
            <summary>
            Gets the data for the locator.
            </summary>
        </member>
        <member name="P:MAGES.DefaultValueLocatorAttribute.DefaultValueType">
            <summary>
            Gets the type of the default value.
            </summary>
        </member>
        <member name="M:MAGES.DefaultValueLocatorAttribute.GetValue``1">
            <summary>
            Gets the instance of the default value.
            </summary>
            <typeparam name="T">The type of the default value.</typeparam>
            <returns>The casted value.</returns>
        </member>
        <member name="T:MAGES.DefaultValueLocatorAttribute.LocatorData">
            <summary>
            A class that holds the data for the locator.
            </summary>
        </member>
        <member name="M:MAGES.DefaultValueLocatorAttribute.LocatorData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MAGES.DefaultValueLocatorAttribute.LocatorData"/> class.
            </summary>
        </member>
        <member name="M:MAGES.DefaultValueLocatorAttribute.LocatorData.#ctor(System.Type,System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MAGES.DefaultValueLocatorAttribute.LocatorData"/> class.
            </summary>
            <param name="locatorType">The type that will be created to locate a default value.</param>
            <param name="type">The type of the default value.</param>
            <param name="key">The key to pass to the locator class.</param>
        </member>
        <member name="P:MAGES.DefaultValueLocatorAttribute.LocatorData.LocatorType">
            <summary>
            Gets or sets the type of the locator.
            </summary>
        </member>
        <member name="P:MAGES.DefaultValueLocatorAttribute.LocatorData.Type">
            <summary>
            Gets or sets the type of the default value.
            </summary>
        </member>
        <member name="P:MAGES.DefaultValueLocatorAttribute.LocatorData.Key">
            <summary>
            Gets or sets the key to pass to the locator.
            </summary>
        </member>
        <member name="M:MAGES.DefaultValueLocatorAttribute.LocatorData.Resolve``1">
            <summary>
            Resolves the default value.
            </summary>
            <typeparam name="T">The type to cast it to.</typeparam>
            <returns>The resolved value; either default or overriden.</returns>
        </member>
        <member name="T:MAGES.DeviceManagerModule">
            <summary>
            The device manager module base class.
            </summary>
        </member>
        <member name="F:MAGES.DeviceManagerModule.currentMode">
            <summary>
            The xr mode of the application.
            Depending on this option the user's inputs, the camera and the controller is updated at runtime.
            </summary>
        </member>
        <member name="T:MAGES.DeviceManagerModule.CameraMode">
            <summary>
            The camera mode of the application.
            </summary>
        </member>
        <member name="F:MAGES.DeviceManagerModule.CameraMode.UniversalXR">
            <summary>
            Uses Unity universal XR plugin.
            </summary>
        </member>
        <member name="F:MAGES.DeviceManagerModule.CameraMode.XREmulator">
            <summary>
            Simulates XR with mouse and keyboard.
            </summary>
        </member>
        <member name="F:MAGES.DeviceManagerModule.CameraMode.Mobile3D">
            <summary>
            Used for tablet/phone deployment.
            </summary>
        </member>
        <member name="P:MAGES.DeviceManagerModule.CurrentMode">
            <summary>
            Gets or sets the selected camera mode.
            </summary>
        </member>
        <member name="P:MAGES.DeviceManagerModule.CameraHeight">
            <summary>
            Gets or sets the camera height.
            </summary>
        </member>
        <member name="P:MAGES.DeviceManagerModule.InteractionActions">
            <summary>
            Gets or sets reference to the implementation of Input actions.
            </summary>
        </member>
        <member name="P:MAGES.DeviceManagerModule.LocomotionActions">
            <summary>
            Gets or sets reference to the implementation of InputValues actions.
            </summary>
        </member>
        <member name="P:MAGES.DeviceManagerModule.GenericActions">
            <summary>
            Gets or sets reference to the implementation of InputValues actions.
            </summary>
        </member>
        <member name="P:MAGES.DeviceManagerModule.CameraGameObject">
            <summary>
            Gets or sets reference to the Camera GameObject.
            </summary>
        </member>
        <member name="P:MAGES.DeviceManagerModule.CameraRig">
            <summary>
            Gets or sets reference to the Camera Rig.
            </summary>
        </member>
        <member name="P:MAGES.DeviceManagerModule.LeftController">
            <summary>
            Gets or sets reference to the Left Controller.
            </summary>
        </member>
        <member name="P:MAGES.DeviceManagerModule.RightController">
            <summary>
            Gets or sets reference to the Right Controller.
            </summary>
        </member>
        <member name="P:MAGES.DeviceManagerModule.CameraRef">
            <summary>
            Gets or sets reference to the main camera.
            </summary>
        </member>
        <member name="T:MAGES.DirectionType">
            <summary>
            An enum for providing a relative reference to a gameObject's direction vectors.
            </summary>
        </member>
        <member name="F:MAGES.DirectionType.Up">
            <summary>
            The up direction (i.e <see cref="P:UnityEngine.Transform.up"/>).
            </summary>
        </member>
        <member name="F:MAGES.DirectionType.Down">
            <summary>
            The down direction (i.e <see cref="!:Transform.down"/>).
            </summary>
        </member>
        <member name="F:MAGES.DirectionType.Left">
            <summary>
            The left direction (i.e <see cref="!:Transform.left"/>).
            </summary>
        </member>
        <member name="F:MAGES.DirectionType.Right">
            <summary>
            The right direction (i.e <see cref="P:UnityEngine.Transform.right"/>).
            </summary>
        </member>
        <member name="F:MAGES.DirectionType.Forward">
            <summary>
            The forward direction (i.e <see cref="P:UnityEngine.Transform.forward"/>).
            </summary>
        </member>
        <member name="F:MAGES.DirectionType.Backward">
            <summary>
            The backward direction (i.e <see cref="!:Transform.backward"/>).
            </summary>
        </member>
        <member name="T:MAGES.DualQuaternions.DualQuaternion">
            <summary>
            DualQuaternion Definition and Operations.
            </summary>
        </member>
        <member name="F:MAGES.DualQuaternions.DualQuaternion.Real">
            <summary>
            DualQuaternion Real Part.
            </summary>
        </member>
        <member name="F:MAGES.DualQuaternions.DualQuaternion.Dual">
            <summary>
            DualQuaternion Dual Part.
            </summary>
        </member>
        <member name="M:MAGES.DualQuaternions.DualQuaternion.#ctor(UnityEngine.Quaternion,UnityEngine.Quaternion)">
            <summary>
            Initializes a new instance of the <see cref="T:MAGES.DualQuaternions.DualQuaternion"/> struct.
            </summary>
            <param name="areal"> Real part.</param>
            <param name="adual"> Dual part.</param>
        </member>
        <member name="M:MAGES.DualQuaternions.DualQuaternion.#ctor(UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Initializes a new instance of the <see cref="T:MAGES.DualQuaternions.DualQuaternion"/> struct.
            </summary>
            <param name="position"> Position.</param>
            <param name="rotation"> Rotation.</param>
        </member>
        <member name="P:MAGES.DualQuaternions.DualQuaternion.Zero">
            <summary>
            Gets a new DualQuaternion Identity.
            </summary>
        </member>
        <member name="P:MAGES.DualQuaternions.DualQuaternion.Normalized">
            <summary>
            Gets DualQuaternion Normalized.
            </summary>
        </member>
        <member name="P:MAGES.DualQuaternions.DualQuaternion.Translation">
            <summary>
            Gets DualQuaternion Translation.
            </summary>
        </member>
        <member name="P:MAGES.DualQuaternions.DualQuaternion.Rotation">
            <summary>
            Gets DualQuaternion Rotation.
            </summary>
        </member>
        <member name="P:MAGES.DualQuaternions.DualQuaternion.Conjugate">
            <summary>
            Gets DualQuaternion Conjugate.
            </summary>
        </member>
        <member name="P:MAGES.DualQuaternions.DualQuaternion.Log">
            <summary>
            Gets DualQuaternion Inverse.
            </summary>
        </member>
        <member name="P:MAGES.DualQuaternions.DualQuaternion.Exp">
            <summary>
            Gets DualQuaternion Exponential.
            </summary>
        </member>
        <member name="M:MAGES.DualQuaternions.DualQuaternion.op_Addition(MAGES.DualQuaternions.DualQuaternion,MAGES.DualQuaternions.DualQuaternion)">
            <summary>
            Operator to add two DualQuaternions.
            </summary>
            <param name="a"> First object to add.</param>
            <param name="b"> Second object to add.</param>
            <returns> Returns a+b.</returns>
        </member>
        <member name="M:MAGES.DualQuaternions.DualQuaternion.op_Multiply(MAGES.DualQuaternions.DualQuaternion,MAGES.DualQuaternions.DualQuaternion)">
            <summary>
            Operator to multiply two DualQuaternions.
            </summary>
            <param name="a"> First object to multiply.</param>
            <param name="b"> Second object to multiply.</param>
            <returns> Returns a*b.</returns>
        </member>
        <member name="M:MAGES.DualQuaternions.DualQuaternion.op_Multiply(System.Single,MAGES.DualQuaternions.DualQuaternion)">
            <summary>
            Operator to multiply a DualQuaternion by a scalar.
            </summary>
            <param name="a">Float to multiply.</param>
            <param name="b">Second object to multiply.</param>
            <returns> Returns (float a) * b.</returns>
        </member>
        <member name="M:MAGES.DualQuaternions.DualQuaternion.Sinc(System.Single)">
            <summary>
            DualQuaternion Sinc.
            </summary>
            <param name="x"> Float.</param>
            <returns> Float result.</returns>
        </member>
        <member name="M:MAGES.DualQuaternions.DualQuaternion.Norm(UnityEngine.Quaternion)">
            <summary>
            Norm of a Quaternion.
            </summary>
            <param name="q"> Quaternion. </param>
            <returns> Quaternion norm.</returns>
        </member>
        <member name="M:MAGES.DualQuaternions.DualQuaternion.QConjugate(UnityEngine.Quaternion)">
            <summary>
            Computes the conjugate of a quaternion.
            </summary>
            <param name="q">The input quaternion.</param>
            <returns>The conjugate of the input quaternion.</returns>
        </member>
        <member name="M:MAGES.DualQuaternions.DualQuaternion.QExp(UnityEngine.Quaternion)">
            <summary>
            Computes the exponential of a quaternion.
            </summary>
            <param name="q">The input quaternion.</param>
            <returns>The exponential of the input quaternion.</returns>
        </member>
        <member name="M:MAGES.DualQuaternions.DualQuaternion.QLog(UnityEngine.Quaternion)">
            <summary>
            Computes the logarithm of a quaternion.
            </summary>
            <param name="q">The input quaternion.</param>
            <returns>The logarithm of the input quaternion.</returns>
        </member>
        <member name="M:MAGES.DualQuaternions.DualQuaternion.Add(UnityEngine.Quaternion,UnityEngine.Quaternion)">
            <summary>
            Adds two quaternions together.
            </summary>
            <param name="a">The first quaternion.</param>
            <param name="b">The second quaternion.</param>
            <returns>The sum of the two input quaternions.</returns>
        </member>
        <member name="M:MAGES.DualQuaternions.DualQuaternion.Sub(UnityEngine.Quaternion,UnityEngine.Quaternion)">
            <summary>
            Subtracts one quaternion from another.
            </summary>
            <param name="a">The first quaternion (minuend).</param>
            <param name="b">The second quaternion (subtrahend).</param>
            <returns>The difference between the two input quaternions.</returns>
        </member>
        <member name="M:MAGES.DualQuaternions.DualQuaternion.Scale(UnityEngine.Quaternion,System.Single)">
            <summary>
            Scales a quaternion by a scalar value.
            </summary>
            <param name="b">The quaternion to scale.</param>
            <param name="a">The scalar value.</param>
            <returns>The scaled quaternion.</returns>
        </member>
        <member name="M:MAGES.DualQuaternions.DualQuaternion.Dot(UnityEngine.Quaternion,UnityEngine.Quaternion)">
            <summary>
            Computes the dot product of two quaternions.
            </summary>
            <param name="a">The first quaternion.</param>
            <param name="b">The second quaternion.</param>
            <returns>The dot product of the two input quaternions.</returns>
        </member>
        <member name="M:MAGES.DualQuaternions.DualQuaternion.Pow(System.Single)">
            <summary>
            Pow function for DualQuaternion.
            </summary>
            <param name="t"> Power (float).</param>
            <returns> DualQuaternion ^t.</returns>
        </member>
        <member name="M:MAGES.DualQuaternions.DualQuaternion.TransformPosition(UnityEngine.Vector3)">
            <summary>
            Gets DualQuaternion TransformPosition.
            </summary>
            <param name="position"> Position. </param>
            <returns> The new translated position. </returns>
        </member>
        <member name="M:MAGES.DualQuaternions.DualQuaternion.TransformVector(UnityEngine.Vector3)">
            <summary>
            Gets DualQuaternion TransformVector.
            </summary>
            <param name="vector"> Vector3 to transform vector.</param>
            <returns> Vector3. </returns>
        </member>
        <member name="M:MAGES.DualQuaternions.DualQuaternion.Sclerp(MAGES.DualQuaternions.DualQuaternion,System.Single)">
            <summary>
            Gets DualQuaternion Sclerp.
            </summary>
            <param name="other"> Sclerp dquat.</param>
            <param name="t">Power.</param>
            <returns> DualQuaternion.</returns>
        </member>
        <member name="M:MAGES.DualQuaternions.DualQuaternion.Lerp(MAGES.DualQuaternions.DualQuaternion,System.Single)">
            <summary>
            Gets DualQuaternion Lerp.
            </summary>
            <param name="other"> From.</param>
            <param name="t"> Lerpt factor.</param>
            <returns> DualQuaternion lerp.</returns>
        </member>
        <member name="T:MAGES.DynamicLabel">
             <summary>
             A simple and customizable label that can follow (or not) the facing direction of the camera.
             </summary>
            
             The label builds a new gameObject that tracks the position of this object and renders a text.
             Since many different transformations may be applied to this gameObject, the label modifies a different
             GameObject that is created at runtime.
            
             @todo(mdodis): Add a theme option for a maximum preffered width of a given label, and wrap if it exceeds.
        </member>
        <member name="M:MAGES.DynamicLabel.Refresh">
            <summary>
            Refresh the layout of the label.
            </summary>
        </member>
        <member name="M:MAGES.DynamicLabel.Text(System.String)">
            <summary>
            Sets the text of the label.
            </summary>
            <param name="text">The text.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:MAGES.DynamicLabel.Pivot(UnityEngine.Vector2)">
            <summary>
            Sets the pivot of the underlying canvas of the label.
            </summary>
            <param name="pivot">The new pivot.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:MAGES.DynamicLabel.Pivot(System.Single,System.Single)">
            <summary>
            Sets the pivot of the underlying canvas of the label.
            </summary>
            <param name="x">Pivot.x.</param>
            <param name="y">Pivot.y.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:MAGES.DynamicLabel.SetData(MAGES.DynamicLabel.Data)">
            <summary>
            Sets the data for the label.
            </summary>
            <param name="data">The new data.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:MAGES.DynamicLabel.GetData">
            <summary>
            Gets the data for the label.
            </summary>
            <returns>The data.</returns>
        </member>
        <member name="M:MAGES.DynamicLabel.Proxy">
            <summary>
            Gets the proxy game object.
            </summary>
            <returns>The gameobject.</returns>
        </member>
        <member name="T:MAGES.DynamicLabel.Data">
            <summary>
            The data for the label.
            </summary>
        </member>
        <member name="P:MAGES.DynamicLabel.Data.Font">
            <summary>
            Gets the font.
            </summary>
        </member>
        <member name="P:MAGES.DynamicLabel.Data.Padding">
            <summary>
            Gets the padding.
            </summary>
        </member>
        <member name="P:MAGES.DynamicLabel.Data.ResolvedFont">
            <summary>
            Gets the resolved font.
            </summary>
        </member>
        <member name="P:MAGES.DynamicLabel.Data.ResolvedPadding">
            <summary>
            Gets the resolved padding.
            </summary>
        </member>
        <member name="M:MAGES.DynamicLabel.Data.Clone">
            <summary>
            Clones the data.
            </summary>
            <returns>The copy.</returns>
        </member>
        <member name="T:MAGES.EffectData">
            <summary>
            Base class for classes that implement effect data for a specifc action.
            </summary>
        </member>
        <member name="M:MAGES.EffectData.Clone">
            <summary>
            Clones the effect data.
            </summary>
            <returns>The cloned data.</returns>
        </member>
        <member name="T:MAGES.EffectDataCollection">
            <summary>
            Contains all of the effects for a given action.
            </summary>
        </member>
        <member name="P:MAGES.EffectDataCollection.Effects">
            <summary>
            Gets or sets the effect data.
            </summary>
        </member>
        <member name="P:MAGES.EffectDataCollection.Implementors">
            <summary>
            Gets or sets the instanced effect implementors.
            </summary>
        </member>
        <member name="M:MAGES.EffectDataCollection.Initialized(MAGES.BaseActionData)">
            <summary>
            Called when the action is initialized.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:MAGES.EffectDataCollection.Performed(MAGES.BaseActionData,System.Boolean)">
            <summary>
            Called when the action is performed.
            </summary>
            <param name="data">The data.</param>
            <param name="skipped">Whether the action was skipped.</param>
        </member>
        <member name="M:MAGES.EffectDataCollection.Undone(MAGES.BaseActionData)">
            <summary>
            Called when the action is undone.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="T:MAGES.EffectImplementor">
            <summary>
            Base class for classes that implement effect data for a specifc action.
            </summary>
        </member>
        <member name="P:MAGES.EffectImplementor.Data">
            <summary>
            Gets or sets the effect data.
            </summary>
        </member>
        <member name="M:MAGES.EffectImplementor.CallInitialized(MAGES.BaseActionData)">
            <summary>
            Initializes the effect (Internal).
            </summary>
            <param name="action">The data.</param>
        </member>
        <member name="M:MAGES.EffectImplementor.CallPerformed(MAGES.BaseActionData,System.Boolean)">
            <summary>
            Performs the effect (Internal).
            </summary>
            <param name="action">The data.</param>
            <param name="skipped">Whether the action was skipped.</param>
        </member>
        <member name="M:MAGES.EffectImplementor.CallUndone(MAGES.BaseActionData)">
            <summary>
            Undoes the effect (Internal).
            </summary>
            <param name="action">The data.</param>
        </member>
        <member name="M:MAGES.EffectImplementor.Initialized(MAGES.BaseActionData)">
            <summary>
            Initializes the effect.
            </summary>
            <param name="action">The data.</param>
        </member>
        <member name="M:MAGES.EffectImplementor.Performed(MAGES.BaseActionData,System.Boolean)">
            <summary>
            Performs the effect.
            </summary>
            <param name="action">The data.</param>
            <param name="skipped">Whether the action was skipped.</param>
        </member>
        <member name="M:MAGES.EffectImplementor.Undone(MAGES.BaseActionData)">
            <summary>
            Undoes the effect.
            </summary>
            <param name="action">The data.</param>
        </member>
        <member name="M:MAGES.EffectImplementor.DestroyOnPerform``1(``0)">
            <summary>
            Destroy the following object when the action is performed.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="target">The object itself. Can only be <see cref="T:UnityEngine.GameObject"/> or <see cref="T:UnityEngine.Component"/>.</param>
        </member>
        <member name="T:MAGES.EventSchema">
            <summary>
            Schema for the Event data.
            </summary>
        </member>
        <member name="P:MAGES.EventSchema.Instance">
            <summary>
            Gets singleton instance of the schema.
            </summary>
        </member>
        <member name="M:MAGES.EventSchema.GetInstance">
            <summary>
            Gets the instance of the singleton.
            </summary>
            <returns>The singleton instance.</returns>
        </member>
        <member name="M:MAGES.EventSchema.Store(System.String,System.Object)">
            <summary>
            Stores the data under the given key.
            </summary>
            <param name="key">The given key.</param>
            <param name="data">The data to be stored.</param>
        </member>
        <member name="M:MAGES.EventSchema.Get(System.String)">
            <summary>
            Retrieves the data under the given key.
            </summary>
            <param name="key">The given key.</param>
            <returns>The data found under the given key.</returns>
            <exception cref="T:System.ArgumentException">Exception if key wasn't found.</exception>
        </member>
        <member name="M:MAGES.EventSchema.DeleteData(System.String)">
            <summary>
            Deletes the data under the given key.
            </summary>
            <param name="key">The given key.</param>
            <exception cref="T:System.ArgumentException">Exceptio if key wasn't found.</exception>
        </member>
        <member name="M:MAGES.EventSchema.ClearAllData">
            <summary>
            Clears all data.
            </summary>
        </member>
        <member name="M:MAGES.EventSchema.DeleteAllData(System.String)">
            <summary>
            Deletes all schema data under the given key pattern.
            </summary>
            <param name="keyPattern">Given key.</param>
        </member>
        <member name="M:MAGES.EventSchema.GetSpecificData(System.String)">
            <summary>
            Get specific sub-convention/pattern data under the given key pattern.
            </summary>
            <param name="keyPattern">Given key pattern.</param>
            <returns>Dictionary of data.</returns>
        </member>
        <member name="M:MAGES.EventSchema.DeleteSpecificData(System.String)">
            <summary>
            Delete specific sub-convention/pattern data under the given key pattern.
            </summary>
            <param name="keyPattern">Given key pattern.</param>
        </member>
        <member name="M:MAGES.EventSchema.GetAllData(System.String)">
            <summary>
            Gets all schema data under the given key pattern.
            </summary>
            <param name="keyPattern">Given key.</param>
            <returns>The dictionary of data.</returns>
        </member>
        <member name="T:MAGES.FloatingLabel">
            <summary>
            The floating label is meant to tag certain objects in the scene with textual information.
            </summary>
        </member>
        <member name="T:MAGES.FollowObject">
            <summary>
            Follows a GameObject, at a specified offset.
            </summary>
        </member>
        <member name="M:MAGES.FollowObject.Follow(UnityEngine.GameObject,UnityEngine.Vector3,System.Single,System.Boolean)">
            <summary>
            Follows a given game object.
            </summary>
            <param name="target">The target game object.</param>
            <param name="direction">The direction to follow relative to the target object.</param>
            <param name="offset">The offset towards the direction.</param>
            <param name="relative">Whether or not the direction is relative to the target object.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:MAGES.FollowObject.Elasticity(System.Single)">
            <summary>
            Sets the elasticity of the follow behavior.
            </summary>
            <param name="elasticity">The new elasticity.</param>
            <returns>Self.</returns>
        </member>
        <member name="T:MAGES.Utilities.GameObjectExtensions">
            <summary>
            Extensions for GameObject class.
            </summary>
        </member>
        <member name="M:MAGES.Utilities.GameObjectExtensions.GetOrAddComponent``1(UnityEngine.GameObject)">
            <summary>
            Gets a component, or adds it if not found.
            </summary>
            <typeparam name="T">The component.</typeparam>
            <returns>The component that was either found or added.</returns>
            <param name="gameObject">The gameobject in which to search.</param>
        </member>
        <member name="M:MAGES.Utilities.GameObjectExtensions.GetOrAddComponent(UnityEngine.GameObject,System.Type)">
            <summary>
            Gets a component, or adds it if not found.
            </summary>
            <param name="gameObject">The gameobject in which to search.</param>
            <param name="type">The component type.</param>
            <returns>The component that was either found or added.</returns>
        </member>
        <member name="M:MAGES.Utilities.GameObjectExtensions.EnsureEditTimeComponent``1(UnityEngine.GameObject,System.Action{``0})">
            <summary>
            Gets a component, or adds it if not found in edit time only.
            </summary>
            <typeparam name="T">The component type.</typeparam>
            <param name="gameObject">The gameobject.</param>
            <param name="onAdd">Callback when added.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:MAGES.Utilities.GameObjectExtensions.EnsurePlayTimeComponent``1(UnityEngine.GameObject,System.Action{``0})">
            <summary>
            Gets a component, or adds it if not found in play time only.
            </summary>
            <typeparam name="T">The component type.</typeparam>
            <param name="gameObject">The gameobject.</param>
            <param name="onAdd">Callback when added.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:MAGES.Utilities.GameObjectExtensions.EnsureAnytimeComponent``1(UnityEngine.GameObject,System.Action{``0})">
            <summary>
            Gets a component, or adds it if not found.
            </summary>
            <typeparam name="T">The component type.</typeparam>
            <param name="gameObject">The gameobject.</param>
            <param name="onAdd">Callback when added.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:MAGES.Utilities.GameObjectExtensions.EnsureComponent``1(UnityEngine.GameObject,System.Nullable{System.Boolean},System.Action{``0})">
            <summary>
            Adds a component if the application is in the specified state.
            </summary>
            <typeparam name="T">The component type.</typeparam>
            <param name="gameObject">The gameobject to add it to.</param>
            <param name="isPlaying">Application isPlaying.</param>
            <param name="onAdd">Callback when added.</param>
            <returns>The gameobject.</returns>
        </member>
        <member name="M:MAGES.Utilities.GameObjectExtensions.SafeDestroy(UnityEngine.GameObject)">
            <summary>
            Safely destroy a game object. Works in edit mode and play mode.
            </summary>
            <param name="gameObject">The gameobject.</param>
        </member>
        <member name="M:MAGES.Utilities.GameObjectExtensions.SafeDestroyAny(System.Object[])">
            <summary>
            Safely destroy any object in the list. Works in edit mode and play mode.
            </summary>
            <param name="items">The objects to destroy.</param>
        </member>
        <member name="M:MAGES.Utilities.GameObjectExtensions.SafeDestroy(UnityEngine.Component,System.Boolean)">
            <summary>
            Safely destroy a component. Works in edit mode and play mode.
            </summary>
            <param name="component">The component.</param>
            <param name="localOnly">Destroy the object only locally.</param>
        </member>
        <member name="M:MAGES.Utilities.GameObjectExtensions.ResolveDirection(UnityEngine.GameObject,MAGES.DirectionType)">
            <summary>
            Resolves a vector from a direction.
            </summary>
            <param name="gameObject">The gameobject.</param>
            <param name="direction">The direction.</param>
            <returns>The direction vector relative to that gameobject.</returns>
        </member>
        <member name="M:MAGES.Utilities.GameObjectExtensions.GetBoundsInHierarchy(UnityEngine.GameObject,System.Boolean,System.Boolean)">
            <summary>
            Computes the bounds of all renderers in the gameobject's hierarchy.
            </summary>
            <param name="gameObject">The game object.</param>
            <param name="includeInactive">Set to include/ignore inactive <see cref="T:UnityEngine.Renderer"/>s.</param>
            <param name="local">Set to compute bounds in local space.</param>
            <returns>The computed bounds.</returns>
        </member>
        <member name="M:MAGES.Utilities.GameObjectExtensions.GetCollisionBounds(UnityEngine.GameObject,System.Boolean,System.Boolean)">
            <summary>
            Computes the bounds of all colliders in the gameobject's hierarchy.
            </summary>
            <param name="gameObject">The gameobject.</param>
            <param name="includeTriggers">True to include triggers.</param>
            <param name="local">Return local space coordinates.</param>
            <returns>The computed bounds of the colliders in the object's hierarchy.</returns>
        </member>
        <member name="M:MAGES.Utilities.GameObjectExtensions.GetApplicableMaterials(UnityEngine.Renderer)">
            <summary>
            Gets either the shared or instanced materials, depending on whether the application is playing or not.
            </summary>
            <param name="renderer">The renderer.</param>
            <returns>A copy of the renderer's materials.</returns>
        </member>
        <member name="M:MAGES.Utilities.GameObjectExtensions.SetApplicableMaterials(UnityEngine.Renderer,UnityEngine.Material[])">
            <summary>
            Sets seither the shared or instanced materials, depending on whether the application is playing or not.
            </summary>
            <param name="renderer">The renderer.</param>
            <param name="materials">The materials.</param>
        </member>
        <member name="M:MAGES.Utilities.GameObjectExtensions.SafeStopCoroutine(UnityEngine.MonoBehaviour,UnityEngine.Coroutine@)">
            <summary>
            Safely stops a coroutine.
            </summary>
            <param name="mono">The monobehavior.</param>
            <param name="coro">The coroutine variable reference.</param>
        </member>
        <member name="T:MAGES.Utilities.GameObjectSpawner">
            <summary>
            The GameObjectSpawner class provides a singleton implementation to spawn and manage GameObjects in a Unity scene.
            </summary>
        </member>
        <member name="P:MAGES.Utilities.GameObjectSpawner.Instance">
            <summary>
            Gets instance of the GameObjectSpawner.
            </summary>
        </member>
        <member name="P:MAGES.Utilities.GameObjectSpawner.ObjectDestroyEvent">
            <summary>
            Gets or sets UnityEvent called on object destroyed.
            </summary>
        </member>
        <member name="P:MAGES.Utilities.GameObjectSpawner.ObjectSpawnEvent">
            <summary>
            Gets or sets UnityEvent called on object spawn.
            </summary>
        </member>
        <member name="M:MAGES.Utilities.GameObjectSpawner.SpawnObject(UnityEngine.GameObject,UnityEngine.Transform,System.Boolean)">
            <summary>
            Spawn an object based on the provided prefab.
            </summary>
            <param name="prefab">Object reference to spawn. If it's a scene object will be ignored.</param>
            <param name="parent">The parent for the spawned object.</param>
            <param name="isUnique">If <see langword="true"/> and the object is already spawned the instance of it will be retrieved from the scene, otherwise a new instance will be created.</param>
            <returns> Spawned GameObject.</returns>
        </member>
        <member name="M:MAGES.Utilities.GameObjectSpawner.SpawnObject(System.String,UnityEngine.Transform,System.Boolean)">
            <summary>
            Spawn an object based on the provided path.
            </summary>
            <param name="path"> Object path. Note: Prefab must be in resources folder. </param>
            <param name="parent">The parent for the spawned object.</param>
            <param name="isUnique">If <see langword="true"/> and the object is already spawned the instance of it will be retrieved from the scene, otherwise a new instance will be created.</param>
            <returns> Spawned GameObject.</returns>
        </member>
        <member name="M:MAGES.Utilities.GameObjectSpawner.DestroyObject(UnityEngine.GameObject)">
            <summary>
            Destroy an object.
            </summary>
            <param name="instantiatedObject">The gameobject to be destroyed.</param>
        </member>
        <member name="M:MAGES.Utilities.GameObjectSpawner.GetDummyGameObject(System.Int32)">
            <summary>
            Get client temporary spawned gameobject.
            </summary>
            <param name="prefabID">The local prefab id of the prefab.</param>
            <returns>Returns referenced to the spawned object.</returns>
        </member>
        <member name="M:MAGES.Utilities.GameObjectSpawner.TryGetInstantiatedGameObject(System.Int32,UnityEngine.GameObject@)">
            <summary>
            Tries to get the instantiated gameobject of a prefab.
            </summary>
            <param name="prefabID">Prefab instance ID to look for the instantiated game object.</param>
            <param name="instantiatedGameObject">The instantiated gameobject, null in case prefab ID does not exist.</param>
            <returns>True if instance of this prefab was found.</returns>
        </member>
        <member name="M:MAGES.Utilities.GameObjectSpawner.AddInstantiatedObject(System.Int32,UnityEngine.GameObject)">
            <summary>
            Attempts to add a new instantiated object to the list of instantiated objects.
            </summary>
            <param name="prefabID">The instance id of the prefab.</param>
            <param name="prefab">The instance of the prefab that has been spawned.</param>
            <returns>The instantiated prefab if it was correctly added. Null if another instance exists with this ID.</returns>
        </member>
        <member name="T:MAGES.Utilities.GenericUtilities">
            <summary>
            Generic utilities.
            </summary>
        </member>
        <member name="M:MAGES.Utilities.GenericUtilities.GetExportPath">
            <summary>
            Returns the file export path.
            </summary>
            <returns> The file export path. </returns>
        </member>
        <member name="M:MAGES.Utilities.GenericUtilities.Hex(System.String)">
            <summary>
            Creates a color from a hex string.
            </summary>
            <param name="hex">The hex string.</param>
            <returns>The created color.</returns>
        </member>
        <member name="M:MAGES.Utilities.GenericUtilities.SanitizeFileName(System.String)">
            <summary>
            Sanitizes a file name and removes invalid characters.
            </summary>
            <param name="fileName">The file name.</param>
            <returns>The file name safe string.</returns>
        </member>
        <member name="T:MAGES.Utilities.MAGESAudioController">
            <summary>
            Controls the sounds used for each action in the application.
            </summary>
        </member>
        <member name="P:MAGES.Utilities.MAGESAudioController.Instance">
            <summary>
            Gets instance of the ScenegraphAudioController.
            </summary>
        </member>
        <member name="M:MAGES.Utilities.MAGESAudioController.PlayClip(UnityEngine.AudioClip)">
            <summary>
            Plays the clip passed in.
            </summary>
            <param name="clip">The clip to be played.</param>
        </member>
        <member name="T:MAGES.Utilities.MAGESObject">
            <summary>
            MAGES object.
            </summary>
        </member>
        <member name="P:MAGES.Utilities.MAGESObject.OnDestroyEvent">
            <summary>
            Gets or sets event called on destroy.
            </summary>
        </member>
        <member name="T:MAGES.Utilities.ReflectionUtilities">
            <summary>
            Reflection utilities.
            </summary>
        </member>
        <member name="M:MAGES.Utilities.ReflectionUtilities.GetAllDerivedTypes(System.AppDomain,System.Type)">
            <summary>
            Get all derived types.
            </summary>
            <param name="domain">Domain.</param>
            <param name="baseType">The types they should be a subclass of.</param>
            <returns>Array of System.Type.</returns>
        </member>
        <member name="M:MAGES.Utilities.ReflectionUtilities.FindNestedTypeByName(System.Type,System.String,System.Type)">
            <summary>
            Find a nested type by name and optional inheritance.
            </summary>
            <param name="type">The type.</param>
            <param name="matchName">The name to match (exact).</param>
            <param name="optionalInherit">The type that the return value should inherit from. Leave null to ignore.</param>
            <returns>The nested type of <paramref name="matchName"/>.</returns>
        </member>
        <member name="M:MAGES.Utilities.ReflectionUtilities.GetFieldByPath(System.Type,System.String)">
            <summary>
            A rewrite of <see cref="M:System.Type.GetField(System.String)"/>, that takes a path like "data.color".
            </summary>
            <param name="type">The type.</param>
            <param name="path">The property path, with dots for each sub-member access.</param>
            <returns>The field info, if found.</returns>
        </member>
        <member name="M:MAGES.Utilities.ReflectionUtilities.IsSubclassOrClassOf(System.Type,System.Type)">
            <summary>
            Returns true if the type is a subclass of the base class, or the base class itself.
            </summary>
            <param name="t">The type.</param>
            <param name="baseClass">The base class to check against.</param>
            <returns>True if <paramref name="t"/> is either a derived class or the same as the base class.</returns>
        </member>
        <member name="M:MAGES.Utilities.ReflectionUtilities.GetAllTypesImplementingInterface``1(System.AppDomain)">
            <summary>
            Get all types implementing an interface.
            </summary>
            <typeparam name="T">The interface type.</typeparam>
            <param name="domain">The app domain.</param>
            <returns>List of instantiable classes that implement <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:MAGES.Utilities.ReflectionUtilities.GetAllTypesImplementingInterface(System.AppDomain,System.Type)">
            <summary>
            Get all types implementing an interface.
            </summary>
            <param name="domain">The app domain.</param>
            <param name="interfaceType">The type of the interface.</param>
            <returns>List of instantiable classes that implement <paramref name="interfaceType"/>.</returns>
        </member>
        <member name="M:MAGES.Utilities.ReflectionUtilities.GetAllStaticClassesWithAttribute(System.AppDomain,System.Type)">
            <summary>
            Get all classes that have a specific attribute attached..
            </summary>
            <param name="domain">App domain.</param>
            <param name="attributeType">The type of the attribute.</param>
            <returns>An enumerable of items that match the query.</returns>
        </member>
        <member name="M:MAGES.Utilities.ReflectionUtilities.GetAllStaticClassesWithAttribute``1(System.AppDomain)">
            <summary>
            Get all classes that have a specific attribute attached..
            </summary>
            <typeparam name="T">The type of the attribute.</typeparam>
            <param name="domain">App domain.</param>
            <returns>An enumerable of items that match the query.</returns>
        </member>
        <member name="T:MAGES.Utilities.Collections.RegistrationList`1">
            <summary>
            A list for registering objects.
            </summary>
            <typeparam name="T">The type of the list objects.</typeparam>
            <remarks>
            Maintains multiple lists to enable support for removing objects while iterating over a snapshot.
            Updates to the snapshot will only be made when <see cref="M:MAGES.Utilities.Collections.RegistrationList`1.Flush"/> is called.
            </remarks>
        </member>
        <member name="P:MAGES.Utilities.Collections.RegistrationList`1.Snapshot">
            <summary>
            Gets a snapshot of the items that were registered at the previous Flush.
            </summary>
        </member>
        <member name="M:MAGES.Utilities.Collections.RegistrationList`1.IsRegistered(`0)">
            <summary>
            Gets if an item is registered.
            </summary>
            <param name="item">The item to check if it is registered</param>
            <returns>Returns <see langword="true"/> if item is registered, <see langword="false"/> otherwise</returns>
        </member>
        <member name="M:MAGES.Utilities.Collections.RegistrationList`1.IsPendingRemove(`0)">
            <summary>
            Gets if the item is to be removed in the next flush.
            </summary>
            <param name="item">The item to check for.</param>
            <returns><see langword="true"/> if the item is going to be removed in the next flush, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MAGES.Utilities.Collections.RegistrationList`1.IsPendingAdd(`0)">
            <summary>
            Gets if the item is to be added in the next flush.
            </summary>
            <param name="item">The item to check for.</param>
            <returns><see langword="true"/> if the item is going to be added in the next flush, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MAGES.Utilities.Collections.RegistrationList`1.Register(`0)">
            <summary>
            Registers the <paramref name="item"/> to the list.
            </summary>
            <param name="item">The item to register.</param>
            <returns> Returns <see langword="true"/> if a change in the registration was made, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MAGES.Utilities.Collections.RegistrationList`1.Deregister(`0)">
            <summary>
            Deregisters <paramref name="item"/> from the list.
            </summary>
            <param name="item">The item to deregister.</param>
        </member>
        <member name="M:MAGES.Utilities.Collections.RegistrationList`1.Flush">
            <summary>
            Flush pending registrations/additions and deregistrations/removals into the snapshot.
            </summary>
        </member>
        <member name="M:MAGES.Utilities.Collections.RegistrationList`1.GetRegisteredItems(System.Collections.Generic.List{`0})">
            <summary>
            Gets all the items that will be registered (be in the snapshot) after the next flush.
            </summary>
            <param name="result">The list to store the registered items.</param>
            <remarks>
            <paramref name="result"/> is cleared before adding the registered items.
            </remarks>
        </member>
        <member name="T:MAGES.Utilities.Collections.SerializableDictionary`2">
            <summary>
            A serialable dictionary.
            </summary>
            <typeparam name="TKey">Key type.</typeparam>
            <typeparam name="TValue">Value type.</typeparam>
            <seealso cref="T:System.Collections.Generic.Dictionary`2"/>
            <remarks>
            Uses lists to store the keys and values for serialization.
            </remarks>
        </member>
        <member name="M:MAGES.Utilities.Collections.SerializableDictionary`2.OnAfterDeserialize">
            <summary>
            Called before Deserialization to restore values.
            </summary>
        </member>
        <member name="M:MAGES.Utilities.Collections.SerializableDictionary`2.OnBeforeSerialize">
            <summary>
            Called before serialization to store values into serialized lists.
            </summary>
        </member>
        <member name="T:MAGES.Utilities.Collections.SerializableDictionary`2.SerializedKeyValuePair">
            <summary>
            A serializable key value pair.
            </summary>
        </member>
        <member name="F:MAGES.Utilities.Collections.SerializableDictionary`2.SerializedKeyValuePair.Key">
            <summary>
            The serialized key.
            </summary>
        </member>
        <member name="F:MAGES.Utilities.Collections.SerializableDictionary`2.SerializedKeyValuePair.Value">
            <summary>
            The serialized value.
            </summary>
        </member>
        <member name="T:MAGES.Utilities.TransformExtensions">
            <summary>
            Extensions for Transform class.
            </summary>
        </member>
        <member name="M:MAGES.Utilities.TransformExtensions.GetPose(UnityEngine.Transform)">
            <summary>
            Gets the transform position and rotation as pose.
            </summary>
            <param name="t">The transform to get the pose for.</param>
            <returns>The position and rotation of the transform in a pose.</returns>
        </member>
        <member name="M:MAGES.Utilities.TransformExtensions.GetLocalPose(UnityEngine.Transform)">
            <summary>
            Gets the transform local position and rotation as pose.
            </summary>
            <param name="t">The transform to get the pose for.</param>
            <returns>The local position and rotation of the transform in a pose.</returns>
        </member>
        <member name="M:MAGES.Utilities.TransformExtensions.SetPose(UnityEngine.Transform,UnityEngine.Pose@)">
            <summary>
            Sets the transform from a pose.
            </summary>
            <param name="t">The transform to set the pose of.</param>
            <param name="p">The pose to set the transform to.</param>
        </member>
        <member name="T:MAGES.GameObjectPathReferences">
            <summary>
            Cache holding all prefab objects in the project along their paths and prefab IDs.
            </summary>
        </member>
        <member name="P:MAGES.GameObjectPathReferences.Instance">
            <summary>
            Gets static global instance of the GameObjectReferences class.
            </summary>
        </member>
        <member name="M:MAGES.GameObjectPathReferences.SetGameObjectsPaths(MAGES.Utilities.Collections.SerializableDictionary{UnityEngine.GameObject,System.String})">
            <summary>
            Sets the dictionary with Gameobjects and their prefab paths.
            </summary>
            <param name="gameObjectToPath">The dictionary holding gameobjects and paths.</param>
        </member>
        <member name="M:MAGES.GameObjectPathReferences.GetGameObjectsPaths">
            <summary>
            Gets the dictionary with Gameobjects and their prefab paths.
            </summary>
            <returns>Returns the dictionary.</returns>
        </member>
        <member name="M:MAGES.GameObjectPathReferences.SetPathToPrefabID(MAGES.Utilities.Collections.SerializableDictionary{System.String,System.Int32})">
            <summary>
            Sets the dictionary holding paths and their unique prefab IDs.
            </summary>
            <param name="pathToPrefabID">The dictionary holding paths and their unique prefab IDs.</param>
        </member>
        <member name="M:MAGES.GameObjectPathReferences.GetPathToGameObjects">
            <summary>
            Gets the dictionary with prefab paths and their gameObjects.
            </summary>
            <returns>Returns the dictionary.</returns>
        </member>
        <member name="M:MAGES.GameObjectPathReferences.GetPathToPrefabID">
            <summary>
            Gets the dictionary holding paths and their unique prefab IDs.
            </summary>
            <returns>Returns the dictionary.</returns>
        </member>
        <member name="T:MAGES.GameObjectReference">
            <summary>
            A superset of <see cref="T:MAGES.UniqueReference"/> and <see cref="T:UnityEngine.GameObject"/>.
            </summary>
            This class allows for either a prefab or a scene object to be referenced.
        </member>
        <member name="P:MAGES.GameObjectReference.IsPrefab">
            <summary>
            Gets a value indicating whether this instance is a scene object.
            </summary>
        </member>
        <member name="P:MAGES.GameObjectReference.Resolved">
            <summary>
            Gets the resolved object.
            </summary>
        </member>
        <member name="T:MAGES.Ghost">
             <summary>
             A ghost is a 3D object that is used to display spatial information,
             like where an object is, or where it should go.
             </summary>
            
             This class will do the following:
            
             When On:
             1. Replace the materials on the object's hierarchy with ghost material instances.
             2. Add/Modify currently existing animators to use the ghost animator controller;
            
             When Off:
             1. Restore the materials on the object's hierarchy to their original values.
             2. Restore the animators to their original values.
            
             When <see cref="F:MAGES.Ghost.overlay"/> mode is on, the materials will be replaced with
             instances of the ghost material, and the main texture will be set to the original
             material's main texture.
        </member>
        <member name="P:MAGES.Ghost.Theme">
            <summary>
            Gets or sets the data for the hologram.
            </summary>
        </member>
        <member name="P:MAGES.Ghost.IsOn">
            <summary>
            Gets a value indicating whether the hologram is in overlay mode.
            </summary>
        </member>
        <member name="M:MAGES.Ghost.Spawn(UnityEngine.GameObject,MAGES.Ghost.Data,System.Boolean,System.Boolean)">
            <summary>
            Spawns a hologram on the given game object.
            </summary>
            <param name="gameObject">The gameobject to turn into a hologram.</param>
            <param name="data">The instance data of the hologram.</param>
            <param name="overlay">Whether the hologram is in overlay mode.</param>
            <param name="on">Whether the hologram is on.</param>
            <returns>The instance of the hologram.</returns>
        </member>
        <member name="M:MAGES.Ghost.Overlay(System.Boolean)">
            <summary>
            Sets the hologram overlay mode.
            </summary>
            <param name="overlay">Whether or not overlay mode should be on.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:MAGES.Ghost.EnableInStart(System.Boolean)">
            <summary>
            Sets whether the hologram should be enabled when Start() is called.
            </summary>
            <param name="enableInStart">Set to true to enable automatic setup at Start.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:MAGES.Ghost.Color(UnityEngine.Color)">
            <summary>
            Overrides the hologram's color.
            </summary>
            <param name="color">The new color.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:MAGES.Ghost.Animation(UnityEngine.RuntimeAnimatorController)">
            <summary>
            Overrides the hologram's animator controller.
            </summary>
            <param name="controller">The new controller.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:MAGES.Ghost.SetOn(System.Boolean)">
            <summary>
            Sets the hologram on or off.
            </summary>
            <param name="on">True for on, False for off.</param>
        </member>
        <member name="T:MAGES.Ghost.Data">
            <summary>
            The data for the hologram.
            </summary>
        </member>
        <member name="P:MAGES.Ghost.Data.ResolvedColor">
            <summary>
            Gets the resolved color.
            </summary>
        </member>
        <member name="P:MAGES.Ghost.Data.ResolvedMaterial">
            <summary>
            Gets the resolved material.
            </summary>
        </member>
        <member name="P:MAGES.Ghost.Data.Animation">
            <summary>
            Gets the resolved animation clip.
            </summary>
        </member>
        <member name="T:MAGES.Hub">
            <summary>
            The primary Component of MAGES NXT. Manages all core MAGES interfaces.
            </summary>
        </member>
        <member name="F:MAGES.Hub.StubBundlePath">
            <summary>
            The path to the stub bundle asset.
            </summary>
        </member>
        <member name="F:MAGES.Hub.baseBundle">
            <summary>
            The bundle to use as the base. Only used at startup.
            </summary>
        </member>
        <member name="F:MAGES.Hub.autoStart">
            <summary>
            Automatically initialize subsystems on Start.
            </summary>
        </member>
        <member name="P:MAGES.Hub.Instance">
            <summary>
            Gets the instanced Hub (Runtime Only).
            </summary>
        </member>
        <member name="P:MAGES.Hub.BaseBundle">
            <summary>
            Gets or sets the base bundle from which the runtime bundle is constructed.
            </summary>
        </member>
        <member name="P:MAGES.Hub.RuntimeBundle">
            <summary>
            Gets the runtime bundle.
            </summary>
        </member>
        <member name="P:MAGES.Hub.AutoStart">
            <summary>
            Gets or sets a value indicating whether the Hub should automatically start (useful when spawned manually).
            </summary>
        </member>
        <member name="M:MAGES.Hub.CreateStubBundle">
            <summary>
            Create a stub bundle.
            </summary>
            <returns>Bundle.</returns>
        </member>
        <member name="M:MAGES.Hub.FindCurrentBundle">
            <summary>
            Find the current bundle. Can be called both in edit-mode and play-mode.
            </summary>
            <returns>The current bundle, if available.</returns>
        </member>
        <member name="M:MAGES.Hub.GetLicenseLimits">
            <summary>
            Gets the license limits.
            </summary>
            <remarks>Use wisely (slow), performs file access.</remarks>
            <returns>The license limits.</returns>
        </member>
        <member name="M:MAGES.Hub.Get``1">
            <summary>
            Get a module.
            </summary>
            <typeparam name="T">The module type to get.</typeparam>
            <returns>The module instance.</returns>
            <exception cref="T:System.ArgumentException">Raised when an invalid type is provided.</exception>
        </member>
        <member name="M:MAGES.Hub.StartSystems">
            <summary>
            Start all systems.
            </summary>
        </member>
        <member name="T:MAGES.HubModule">
            <summary>
            A module that is managed by the hub.
            </summary>
        </member>
        <member name="M:MAGES.HubModule.Startup">
            <summary>
            Called when the module is started (usually on application start).
            </summary>
        </member>
        <member name="M:MAGES.HubModule.Shutdown">
            <summary>
            Called when the module is destroyed or replaced.
            </summary>
        </member>
        <member name="T:MAGES.IControllerInteractor">
            <summary>
            Interface for Controller based Interactors.
            </summary>
            <remarks>
            Such interactors are the ones controlled using a physical devices.
            For example a Hand Interactor that is controlled by a handheld controller.<br/>
            These interactors can play sound, have haptics and get analog Selection/Activation intensity values.
            </remarks>
        </member>
        <member name="P:MAGES.IControllerInteractor.SoundSource">
            <summary>
            Gets or sets the sound source to play sounds from.
            </summary>
        </member>
        <member name="P:MAGES.IControllerInteractor.HoverEnterSound">
            <summary>
            Gets or sets the sound to be played when the interactor starts hovering.
            </summary>
        </member>
        <member name="P:MAGES.IControllerInteractor.HoverExitSound">
            <summary>
            Gets or sets the sound to be played when the interactor stops hovering.
            </summary>
        </member>
        <member name="P:MAGES.IControllerInteractor.SelectEnterSound">
            <summary>
            Gets or sets the sound to be played when the interactor starts selecting.
            </summary>
        </member>
        <member name="P:MAGES.IControllerInteractor.SelectExitSound">
            <summary>
            Gets or sets the sound to be played when the interactor stops selecting.
            </summary>
        </member>
        <member name="P:MAGES.IControllerInteractor.ActivateEnterSound">
            <summary>
            Gets or sets the sound to be played when the interactor starts activating.
            </summary>
        </member>
        <member name="P:MAGES.IControllerInteractor.ActivateExitSound">
            <summary>
            Gets or sets the sound to be played when the interactor stops activating.
            </summary>
        </member>
        <member name="P:MAGES.IControllerInteractor.HoverEnterHapticIntensity">
            <summary>
            Gets or sets the haptic feedback strength when the interactor starts hovering.
            </summary>
        </member>
        <member name="P:MAGES.IControllerInteractor.HoverExitHapticIntensity">
            <summary>
            Gets or sets the haptic feedback strength when the interactor stops hovering.
            </summary>
        </member>
        <member name="P:MAGES.IControllerInteractor.SelectEnterHapticIntensity">
            <summary>
            Gets or sets the haptic feedback strength when the interactor starts selecting.
            </summary>
        </member>
        <member name="P:MAGES.IControllerInteractor.SelectExitHapticIntensity">
            <summary>
            Gets or sets the haptic feedback strength when the interactor stops selecting.
            </summary>
        </member>
        <member name="P:MAGES.IControllerInteractor.ActivateEnterHapticIntensity">
            <summary>
            Gets or sets the haptic feedback strength when the interactor starts activating.
            </summary>
        </member>
        <member name="P:MAGES.IControllerInteractor.ActivateExitHapticIntensity">
            <summary>
            Gets or sets the haptic feedback strength when the interactor stops activating.
            </summary>
        </member>
        <member name="P:MAGES.IControllerInteractor.IsSelectInputEnabled">
            <summary>
            Gets a value indicating whether the controller select button is pressed.
            </summary>
        </member>
        <member name="P:MAGES.IControllerInteractor.WasSelectInputEnabledThisFrame">
            <summary>
            Gets a value indicating whether the controller select button was pressed this frame.
            </summary>
        </member>
        <member name="P:MAGES.IControllerInteractor.WasSelectInputDisabledThisFrame">
            <summary>
            Gets a value indicating whether the controller select button was released this frame.
            </summary>
        </member>
        <member name="P:MAGES.IControllerInteractor.IsActivateInputEnabled">
            <summary>
            Gets a value indicating whether the controller activate button is pressed.
            </summary>
        </member>
        <member name="P:MAGES.IControllerInteractor.WasActivateInputEnabledThisFrame">
            <summary>
            Gets a value indicating whether the controller activate button was pressed this frame.
            </summary>
        </member>
        <member name="P:MAGES.IControllerInteractor.WasActivateInputDisabledThisFrame">
            <summary>
            Gets a value indicating whether the controller activate button was released this frame.
            </summary>
        </member>
        <member name="P:MAGES.IControllerInteractor.IsUISelectInputEnabled">
            <summary>
            Gets a value indicating whether the controller button that performs a UI selection is pressed.
            </summary>
        </member>
        <member name="P:MAGES.IControllerInteractor.WasUISelectInputEnabledThisFrame">
            <summary>
            Gets a value indicating whether the controller button that performs a UI selection was pressed this frame.
            </summary>
        </member>
        <member name="P:MAGES.IControllerInteractor.WasUISelectInputDisabledThisFrame">
            <summary>
            Gets a value indicating whether the controller button that performs a UI selection was released this frame.
            </summary>
        </member>
        <member name="M:MAGES.IControllerInteractor.PlayHaptics(System.Single,System.Single)">
            <summary>
            Plays haptics on the controller, if it is supported.
            </summary>
            <param name="intensity">The intensity of the haptics.</param>
            <param name="duration">The duration of the haptics.</param>
            <returns><see langword="true"/> if haptics are supported and the operation was successful.</returns>
        </member>
        <member name="T:MAGES.IGenericInputActions">
            <summary>
            Interface for the generic actions that can be performed on the device.
            </summary>
        </member>
        <member name="M:MAGES.IGenericInputActions.AddActionOnPerform(System.Action)">
            <summary>
            Adds an action to be called when one of the perform buttons are pressed.
            </summary>
            <param name="action">The action that will be called.</param>
        </member>
        <member name="M:MAGES.IGenericInputActions.AddActionOnUndo(System.Action)">
            <summary>
            Adds an action to be called when one of the undo buttons are pressed.
            </summary>
            <param name="action">The action that will be called.</param>
        </member>
        <member name="M:MAGES.IGenericInputActions.AddActionOnEnableMovement(System.Action)">
            <summary>
            Adds an action to be called when the enable movement button is pressed.
            </summary>
            <param name="action">The action that will be called.</param>
        </member>
        <member name="M:MAGES.IGenericInputActions.AddActionOnEnableOptions(System.Action)">
            <summary>
            Adds an action to be called when the enable options button is pressed.
            </summary>
            <param name="action">The action that will be called.</param>
        </member>
        <member name="M:MAGES.IGenericInputActions.AddActionOnToggleRaycastActivation(System.Action)">
            <summary>
            Adds an action to be called when the toggle raycast button is pressed.
            </summary>
            <param name="action">The action that will be called.</param>
        </member>
        <member name="T:MAGES.IInteractable">
            <summary>
            Interface that should be implemented by all interactable objects.
            </summary>
        </member>
        <member name="P:MAGES.IInteractable.InteractionManager">
            <summary>
            Gets or sets the interaction manager this interactable is registered with. Null if not registered.
            </summary>
        </member>
        <member name="P:MAGES.IInteractable.Transform">
            <summary>
            Gets or sets the transform of this interactable.
            </summary>
        </member>
        <member name="P:MAGES.IInteractable.Rigidbody">
            <summary>
            Gets or sets the rigidbody of this interactable.
            </summary>
        </member>
        <member name="P:MAGES.IInteractable.AttachTransform">
            <summary>
            Gets the transform this interactable may be attached from when selected.  Usually the same as <see cref="P:MAGES.IInteractable.Transform"/>.
            </summary>
        </member>
        <member name="P:MAGES.IInteractable.Colliders">
            <summary>
            Gets The colliders of this interactable.
            </summary>
        </member>
        <member name="P:MAGES.IInteractable.InteractionMode">
            <summary>
            Gets or sets the interaction mode of this interactable.
            </summary>
        </member>
        <member name="P:MAGES.IInteractable.DisableKinematicOnSelectEnter">
            <summary>
            Gets or sets a value indicating whether to disable kinematic before selecting.
            </summary>
            <remarks>The kinematic option will return to the previous value on deselect.</remarks>
        </member>
        <member name="P:MAGES.IInteractable.EnableKinematicOnSelectExit">
            <summary>
            Gets or sets a value indicating whether to enable kinematic on detach.
            </summary>
            <remarks>Will force the object to kinematic on detach even if it wasn't kinematic before grabbing it.</remarks>
        </member>
        <member name="P:MAGES.IInteractable.RegisterEntered">
            <summary>
            Gets or sets the UnityEvent invoked when the interactable is registered to an <see cref="T:MAGES.IInteractionManager"/>.
            </summary>
        </member>
        <member name="P:MAGES.IInteractable.DeregisterEntered">
            <summary>
            Gets or sets the UnityEvent invoked when the interactable is deregistered from an <see cref="T:MAGES.IInteractionManager"/>.
            </summary>
        </member>
        <member name="P:MAGES.IInteractable.HoverEntered">
            <summary>
            Gets or sets the UnityEvent invoked when an interactor begins hovering this interactable.
            </summary>
        </member>
        <member name="P:MAGES.IInteractable.HoverExited">
            <summary>
            Gets or sets the UnityEvent invoked when an interactor ends hovering this interactable.
            </summary>
        </member>
        <member name="P:MAGES.IInteractable.FirstHoverEntered">
            <summary>
            Gets or sets the UnityEvent invoked when the first interactor begins hovering this interactable.
            </summary>
            <remarks>
            This event will not be invoked when there is an interactor hovering this interactable and another interactor begins hovering it.
            </remarks>
        </member>
        <member name="P:MAGES.IInteractable.LastHoverExited">
            <summary>
            Gets or sets the UnityEvent invoked when the first interactor begins hovering this interactable.
            </summary>
            <remarks>
            This event will not be invoked when an interactor stops hovering this interactable but another interactor is still hovering it.
            </remarks>
        </member>
        <member name="P:MAGES.IInteractable.SelectEntered">
            <summary>
            Gets or sets the UnityEvent invoked when an interactor begins selecting this interactable.
            </summary>
        </member>
        <member name="P:MAGES.IInteractable.SelectExited">
            <summary>
            Gets or sets the UnityEvent invoked when an interactor has finished selecting this interactable.
            </summary>
        </member>
        <member name="P:MAGES.IInteractable.FirstSelectEntered">
            <summary>
            Gets or sets the UnityEvent invoked when the first interactor begins hovring this interactable.
            </summary>
            <remarks>
            This event will not be invoked when there is an interactor hovering this interactable and another interactor begins selecting it.
            </remarks>
        </member>
        <member name="P:MAGES.IInteractable.LastSelectExited">
            <summary>
            Gets or sets the UnityEvent invoked when the first interactor begins hovring this interactable.
            </summary>
            <remarks>
            This event will not be invoked when an interactor stops selecting this interactable but another interactor is still selecting it.
            </remarks>
        </member>
        <member name="P:MAGES.IInteractable.ActivateEntered">
            <summary>
            Gets or sets the UnityEvent invoked when an interactor has began activation of this interactable.
            </summary>
        </member>
        <member name="P:MAGES.IInteractable.ActivateExited">
            <summary>
            Gets or sets the UnityEvent invoked when an interactor has ended activation of this interactable.
            </summary>
        </member>
        <member name="P:MAGES.IInteractable.FirstActivateEntered">
            <summary>
            Gets or sets the UnityEvent invoked when the first interactor has began activation of this interactable.
            </summary>
            <remarks>
            This event will not be invoked when an interactor stops activating this interactable but another interactor is still activating it.
            </remarks>
        </member>
        <member name="P:MAGES.IInteractable.LastActivateExited">
            <summary>
            Gets or sets the UnityEvent invoked when the first interactor begins hovring this interactable.
            </summary>
            <remarks>
            This event will not be invoked when an interactor stops activating this interactable but another interactor is still activating it.
            </remarks>
        </member>
        <member name="P:MAGES.IInteractable.IsHovered">
            <summary>
            Gets a value indicating whether this interactable is currently being hovered by an interactor.
            </summary>
        </member>
        <member name="P:MAGES.IInteractable.IsSelected">
            <summary>
            Gets a value indicating whether this interactable is currently being selected by an interactor.
            </summary>
        </member>
        <member name="P:MAGES.IInteractable.IsActivated">
            <summary>
            Gets a value indicating whether this interactable is currently being activated by an interactor.
            </summary>
        </member>
        <member name="P:MAGES.IInteractable.HoveringInteractors">
            <summary>
            Gets all the interactors hovering this interactable, in the order they sent the hover enter events.
            </summary>
        </member>
        <member name="P:MAGES.IInteractable.SelectingInteractors">
            <summary>
            Gets all the interactors selecting this interactable, in the order they sent the select enter events.
            </summary>
        </member>
        <member name="P:MAGES.IInteractable.ActivatingInteractors">
            <summary>
            Gets all the interactors activating this interactable, in the order they sent the activate enter events.
            </summary>
        </member>
        <member name="P:MAGES.IInteractable.FirstHoverInteractor">
            <summary>
            Gets the interactor which first hovered this interactable.
            </summary>
        </member>
        <member name="P:MAGES.IInteractable.LastHoverInteractor">
            <summary>
            Gets the interactor which last hovered this interactable.
            </summary>
        </member>
        <member name="P:MAGES.IInteractable.FirstSelectInteractor">
            <summary>
            Gets the interactor which first selected this interactable.
            </summary>
        </member>
        <member name="P:MAGES.IInteractable.LastSelectInteractor">
            <summary>
            Gets the interactor which last selected this interactable.
            </summary>
        </member>
        <member name="P:MAGES.IInteractable.FirstActivateInteractor">
            <summary>
            Gets the interactor which first activated this interactable.
            </summary>
        </member>
        <member name="P:MAGES.IInteractable.LastActivateInteractor">
            <summary>
            Gets the interactor which last activated this interactable.
            </summary>
        </member>
        <member name="M:MAGES.IInteractable.IsHoveredBy(MAGES.IInteractor)">
            <summary>
            Gets if this interactable is currently being hovered by the specified interactor.
            </summary>
            <param name="interactor">The interactor to check for hovering.</param>
            <returns><see langword="true"/> if the interactable is currently hovered by the <paramref name="interactor"/>.</returns>
        </member>
        <member name="M:MAGES.IInteractable.IsSelectedBy(MAGES.IInteractor)">
            <summary>
            Gets if this interactable is currently being selected by the specified interactor.
            </summary>
            <param name="interactor">The interactor to check for selection.</param>
            <returns><see langword="true"/> if the interactable is currently selected by the <paramref name="interactor"/>.</returns>
        </member>
        <member name="M:MAGES.IInteractable.IsActivatedBy(MAGES.IInteractor)">
            <summary>
            Gets if this interactable is currently being activated by the specified interactor.
            </summary>
            <param name="interactor">The interactor to check for activation.</param>
            <returns><see langword="true"/> if the interactable is currently activated by the <paramref name="interactor"/>.</returns>
        </member>
        <member name="M:MAGES.IInteractable.CanBeHovered(MAGES.IInteractor)">
            <summary>
            Gets if this interactable can be hovered by the specified interactor.
            </summary>
            <param name="interactor">The interactor to check if this interactable can receive hover events from.</param>
            <returns><see langword="true"/> if this interactable can be hovered by the specified interactor.</returns>
        </member>
        <member name="M:MAGES.IInteractable.CanBeSelected(MAGES.IInteractor)">
            <summary>
            Gets if this interactable can be selected by the specified interactor.
            </summary>
            <param name="interactor">The interactor to check if this interactable can receive select events from.</param>
            <returns><see langword="true"/> if this interactable can be selected by the specified interactor.</returns>
        </member>
        <member name="M:MAGES.IInteractable.CanBeActivated(MAGES.IInteractor)">
            <summary>
            Gets if this interactable can be activated by the specified interactor.
            </summary>
            <param name="interactor">The interactor to check if this interactable can receive activate events from.</param>
            <returns><see langword="true"/> if this interactable can be activated by the specified interactor.</returns>
        </member>
        <member name="M:MAGES.IInteractable.GetSelectionIntensity">
            <summary>
            Gets the selection intensity from the first interactor that begun selection.
            </summary>
            <returns>
            A value between 0 and 1 representing the intensity of the selection.
            </returns>
        </member>
        <member name="M:MAGES.IInteractable.GetSelectionIntensity(MAGES.IInteractor)">
            <summary>
            Gets the selection intensity from the <paramref name="interactor"/>.
            </summary>
            <param name="interactor">The interactor to get the selection intensity from.</param>
            <returns>
            An analog value between 0 and 1 representing the intensity of the selection. If the <paramref name="interactor"/> is not selecting this interactable, will return 0.
            </returns>
        </member>
        <member name="M:MAGES.IInteractable.GetActivationIntensity">
            <summary>
            Gets the activation intensity from the first interactor that begun activation.
            </summary>
            <returns>
            A value between 0 and 1 representing the intensity of the activation.
            </returns>
        </member>
        <member name="M:MAGES.IInteractable.GetActivationIntensity(MAGES.IInteractor)">
            <summary>
            Gets the activation intensity from the <paramref name="interactor"/>.
            </summary>
            <param name="interactor">The interactor to get the activation intensity from.</param>
            <returns>
            An analog value between 0 and 1 representing the intensity of the activation. If the <paramref name="interactor"/> is not activating this interactable, will return 0.
            </returns>
        </member>
        <member name="M:MAGES.IInteractable.OnHoverEnter(MAGES.HoverEnterInteractionEventArgs)">
            <summary>
            Called before an interactor begins hovering this interactable.
            </summary>
            <param name="args">Hover Event arguments.</param>
        </member>
        <member name="M:MAGES.IInteractable.OnHoverEntered(MAGES.HoverEnterInteractionEventArgs)">
            <summary>
            Called after an interactor begins hovering this interactable.
            </summary>
            <param name="args">Hover Event arguments.</param>
        </member>
        <member name="M:MAGES.IInteractable.OnHoverExit(MAGES.HoverExitInteractionEventArgs)">
            <summary>
            Called before an interactor ends hovering this interactable.
            </summary>
            <param name="args">Hover Event arguments.</param>
        </member>
        <member name="M:MAGES.IInteractable.OnHoverExited(MAGES.HoverExitInteractionEventArgs)">
            <summary>
            Called after an interactor ends hovering this interactable.
            </summary>
            <param name="args">Hover Event arguments.</param>
        </member>
        <member name="M:MAGES.IInteractable.OnSelectEnter(MAGES.SelectEnterInteractionEventArgs)">
            <summary>
            Called before an interactor begins selecting this interactable.
            </summary>
            <param name="args">Select Event arguments.</param>
        </member>
        <member name="M:MAGES.IInteractable.OnSelectEntered(MAGES.SelectEnterInteractionEventArgs)">
            <summary>
            Called after an interactor begins selecting this interactable.
            </summary>
            <param name="args">Select Event arguments.</param>
        </member>
        <member name="M:MAGES.IInteractable.OnSelectExit(MAGES.SelectExitInteractionEventArgs)">
            <summary>
            Called before an interactor stops selecting this interactable.
            </summary>
            <param name="args">Select Event arguments.</param>
        </member>
        <member name="M:MAGES.IInteractable.OnSelectExited(MAGES.SelectExitInteractionEventArgs)">
            <summary>
            Called after an interactor stops selecting this interactable.
            </summary>
            <param name="args">Select Event arguments.</param>
        </member>
        <member name="M:MAGES.IInteractable.OnActivateEnter(MAGES.ActivateEnterInteractionEventArgs)">
            <summary>
            Called before an interactor begins activating this interactable.
            </summary>
            <param name="args">Activate Event arguments.</param>
        </member>
        <member name="M:MAGES.IInteractable.OnActivateEntered(MAGES.ActivateEnterInteractionEventArgs)">
            <summary>
            Called after an interactor begins activating this interactable.
            </summary>
            <param name="args">Activate Event arguments.</param>
        </member>
        <member name="M:MAGES.IInteractable.OnActivateExit(MAGES.ActivateExitInteractionEventArgs)">
            <summary>
            Called before an interactor stops activating this interactable.
            </summary>
            <param name="args">Activate Event arguments.</param>
        </member>
        <member name="M:MAGES.IInteractable.OnActivateExited(MAGES.ActivateExitInteractionEventArgs)">
            <summary>
            Called after an interactor stops activating this interactable.
            </summary>
            <param name="args">Activate Event arguments.</param>
        </member>
        <member name="M:MAGES.IInteractable.OnRegisterEnter(MAGES.InteractableRegisterEventArgs)">
            <summary>
            Called before the interactor is registered to an <see cref="T:MAGES.IInteractionManager"/>.
            </summary>
            <param name="args">The register event arguments.</param>
        </member>
        <member name="M:MAGES.IInteractable.OnRegisterEntered(MAGES.InteractableRegisterEventArgs)">
            <summary>
            Called after the interactor is registered to an <see cref="T:MAGES.IInteractionManager"/>.
            </summary>
            <param name="args">The register event arguments.</param>
        </member>
        <member name="M:MAGES.IInteractable.OnDeregisterEnter(MAGES.InteractableDeregisterEventArgs)">
            <summary>
            Called before the interactor is deregistered from an <see cref="T:MAGES.IInteractionManager"/>.
            </summary>
            <param name="args">The deregister event arguments.</param>
        </member>
        <member name="M:MAGES.IInteractable.OnDeregisterEntered(MAGES.InteractableDeregisterEventArgs)">
            <summary>
            Called after the interactor is deregistered from an <see cref="T:MAGES.IInteractionManager"/>.
            </summary>
            <param name="args">The deregister event arguments.</param>
        </member>
        <member name="M:MAGES.IInteractable.ExitHover">
            <summary>
            Force stop the hover of this interactable by all interactors.
            </summary>
        </member>
        <member name="M:MAGES.IInteractable.ExitHover(MAGES.IInteractor)">
            <summary>
            Force stop the hover of this interactable by the <paramref name="interactor"/>.
            </summary>
            <param name="interactor">The interactor to force stop the hover with.</param>
        </member>
        <member name="M:MAGES.IInteractable.ExitSelection">
            <summary>
            Force stop the selection of this interactable by all interactors.
            </summary>
        </member>
        <member name="M:MAGES.IInteractable.ExitSelection(MAGES.IInteractor)">
            <summary>
            Force stop the selection of this interactable by the <paramref name="interactor"/>.
            </summary>
            <param name="interactor">The interactor to force stop the selection with.</param>
        </member>
        <member name="M:MAGES.IInteractable.ExitActivation">
            <summary>
            Force stop the activation of this interactable by all interactors.
            </summary>
        </member>
        <member name="M:MAGES.IInteractable.ExitActivation(MAGES.IInteractor)">
            <summary>
            Force stop the activation of this interactable by the <paramref name="interactor"/>.
            </summary>
            <param name="interactor">The interactor to force stop the activation with.</param>
        </member>
        <member name="M:MAGES.IInteractable.PreprocessInteractable(MAGES.UpdatePhase)">
            <summary>
            Called by the <see cref="T:MAGES.IInteractionManager"/> before the Interactable is processed by the interaction manager, in the given update phase.
            </summary>
            <param name="updatePhase">The update phase this method is called.</param>
        </member>
        <member name="M:MAGES.IInteractable.ProcessInteractorInput(MAGES.UpdatePhase)">
            <summary>
            Called by the <see cref="T:MAGES.IInteractionManager"/> before the Interactable is processed by the interaction manager, in the given update phase. <br/>
            Use this method to process input from interactors, such as grip or trigger strength.
            </summary>
            <param name="updatePhase">The update phase this method is called.</param>
        </member>
        <member name="M:MAGES.IInteractable.ProcessInteractable(MAGES.UpdatePhase)">
            <summary>
            Called by the <see cref="P:MAGES.IInteractable.InteractionManager"/> after the Interactable is processed by the interaction manager, in the given update phase.
            </summary>
            <param name="updatePhase">The update phase this method is called.</param>
        </member>
        <member name="M:MAGES.IInteractable.TryGetAttachPose(MAGES.IInteractor,UnityEngine.Transform@)">
            <summary>
            Gets the attach pose transform of the given interactor, for this interactable.
            </summary>
            <param name="interactor">The interactor to get the pose for.</param>
            <param name="attachPose">The local attach pose of the given interactor, for this interactable.</param>
            <returns><see langword="true"/> if the attach pose was successfully obtained.</returns>
        </member>
        <member name="T:MAGES.IInteractionActions">
            <summary>
            Interface for generic actions that are triggered from user input.
            </summary>
        </member>
        <member name="M:MAGES.IInteractionActions.AddActionOnSelectLeft(System.Action)">
            <summary>
            Adds an action to be called when one of the select buttons are pressed on the left controller.
            </summary>
            <param name="select"> The event that will be called on select.</param>
        </member>
        <member name="M:MAGES.IInteractionActions.AddActionOnDeselectLeft(System.Action)">
            <summary>
            Adds an action to be called when one of the select buttons are released.
            </summary>
            <param name="deselect"> The event that will be called on deSelect.</param>
        </member>
        <member name="M:MAGES.IInteractionActions.AddActionOnActivateLeft(System.Action)">
            <summary>
            Adds an action to be called when one of the activation buttons are pressed.
            </summary>
            <param name="activate">The event that will be called on activation.</param>
        </member>
        <member name="M:MAGES.IInteractionActions.AddActionOnDeactivateLeft(System.Action)">
            <summary>
            Adds an action to be called when one of the activation buttons are released.
            </summary>
            <param name="deactivate">The event that will be called on deActivation.</param>
        </member>
        <member name="M:MAGES.IInteractionActions.AddActionOnUISelectLeft(System.Action)">
            <summary>
            Adds an action to be called when the UI select button is pressed on the left controller.
            </summary>
            <param name="uiSelectLeft">The event that will be called.</param>
        </member>
        <member name="M:MAGES.IInteractionActions.AddActionOnUISelectCancelLeft(System.Action)">
            <summary>
            Adds an action to be called when the UI select button is released on the left controller.
            </summary>
            <param name="uiDeselectLeft">The event that will be called.</param>
        </member>
        <member name="M:MAGES.IInteractionActions.AddActionOnSelectRight(System.Action)">
            <summary>
            Adds an action to be called when one of the select buttons are pressed on the right controller.
            </summary>
            <param name="select"> The event that will be called on select.</param>
        </member>
        <member name="M:MAGES.IInteractionActions.AddActionOnDeselectRight(System.Action)">
            <summary>
            Adds an action to be called when one of the select buttons are released on the right controller.
            </summary>
            <param name="deselect"> The event that will be called on deSelect.</param>
        </member>
        <member name="M:MAGES.IInteractionActions.AddActionOnActivateRight(System.Action)">
            <summary>
            Adds an action to be called when one of the activation buttons are pressed on the right controller.
            </summary>
            <param name="activate">The event that will be called on activation.</param>
        </member>
        <member name="M:MAGES.IInteractionActions.AddActionOnDeactivateRight(System.Action)">
            <summary>
            Adds an action to be called when one of the activation buttons are released on the right controller.
            </summary>
            <param name="deactivate">The event that will be called on deActivation.</param>
        </member>
        <member name="M:MAGES.IInteractionActions.AddActionOnUISelectRight(System.Action)">
            <summary>
            Adds an action to be called when the UI select button is pressed on the right controller.
            </summary>
            <param name="uiSelectLeft">The event that will be called.</param>
        </member>
        <member name="M:MAGES.IInteractionActions.AddActionOnUISelectCancelRight(System.Action)">
            <summary>
            Adds an action to be called when the UI select button is released on the right controller.
            </summary>
            <param name="uiDeselectLeft">The event that will be called.</param>
        </member>
        <member name="M:MAGES.IInteractionActions.GetSelectionIntensityLeft">
            <summary>
            Gets the grip value of the left controller.
            </summary>
            <returns>The current grip value of the left controller.</returns>
        </member>
        <member name="M:MAGES.IInteractionActions.GetSelectionIntensityRight">
            <summary>
            Gets the grip value of the right controller.
            </summary>
            <returns>The current grip value of the right controller.</returns>
        </member>
        <member name="M:MAGES.IInteractionActions.GetActivationIntensityLeft">
            <summary>
            Gets the trigger value of the left controller.
            </summary>
            <returns>The current trigger value of the left controller.</returns>
        </member>
        <member name="M:MAGES.IInteractionActions.GetActivationIntensityRight">
            <summary>
            Gets the trigger value of the right controller.
            </summary>
            <returns>The current trigger value of the right controller.</returns>
        </member>
        <member name="M:MAGES.IInteractionActions.Startup">
            <summary>
            Initialize all input actions.
            </summary>
        </member>
        <member name="T:MAGES.IInteractionManager">
            <summary>
            Interface for the Interaction Manager.
            </summary>
            <remarks>
            The interaction manager is a mediator between <see cref="T:MAGES.IInteractable"/> and <see cref="T:MAGES.IInteractor"/>.
            It is responsible for keeping track of all the registered interactors and interactables, and for notifying them for events, such as Hover, Select and Activate.
            </remarks>
        </member>
        <member name="P:MAGES.IInteractionManager.RegisterManagerEnter">
            <summary>
            Gets the event called when a manager is registered.
            </summary>
        </member>
        <member name="P:MAGES.IInteractionManager.DeregisterManagerEnter">
            <summary>
            Gets the event called when a manager is deregistered.
            </summary>
        </member>
        <member name="P:MAGES.IInteractionManager.RegisterInteractorEnter">
            <summary>
            Gets the event called when an <see cref="T:MAGES.IInteractor"/> is registered.
            </summary>
        </member>
        <member name="P:MAGES.IInteractionManager.DeregisterInteractorEnter">
            <summary>
            Gets the event called when an <see cref="T:MAGES.IInteractor"/> is deregistered.
            </summary>
        </member>
        <member name="P:MAGES.IInteractionManager.RegisterInteractableEnter">
            <summary>
            Gets the event called when an <see cref="T:MAGES.IInteractable"/> is registered.
            </summary>
        </member>
        <member name="P:MAGES.IInteractionManager.DeregisterInteractableEnter">
            <summary>
            Gets the event called when an <see cref="T:MAGES.IInteractable"/> is deregistered.
            </summary>
        </member>
        <member name="P:MAGES.IInteractionManager.HoverEntered">
            <summary>
            Gets the event called when an <see cref="T:MAGES.IInteractor"/> starts hovering an <see cref="T:MAGES.IInteractable"/>.
            </summary>
        </member>
        <member name="P:MAGES.IInteractionManager.HoverExited">
            <summary>
            Gets the event called when an <see cref="T:MAGES.IInteractor"/> stops hovering an <see cref="T:MAGES.IInteractable"/>.
            </summary>
        </member>
        <member name="P:MAGES.IInteractionManager.SelectEntered">
            <summary>
            Gets the event called when an <see cref="T:MAGES.IInteractor"/> starts selecting an <see cref="T:MAGES.IInteractable"/>.
            </summary>
        </member>
        <member name="P:MAGES.IInteractionManager.SelectExited">
            <summary>
            Gets the event called when an <see cref="T:MAGES.IInteractor"/> stops selecting an <see cref="T:MAGES.IInteractable"/>.
            </summary>
        </member>
        <member name="P:MAGES.IInteractionManager.ActivateEntered">
            <summary>
            Gets the event called when an <see cref="T:MAGES.IInteractor"/> starts activating an <see cref="T:MAGES.IInteractable"/>.
            </summary>
        </member>
        <member name="P:MAGES.IInteractionManager.ActivateExited">
            <summary>
            Gets the event called when an <see cref="T:MAGES.IInteractor"/> stops activating an <see cref="T:MAGES.IInteractable"/>.
            </summary>
        </member>
        <member name="M:MAGES.IInteractionManager.RegisterInteractor(MAGES.IInteractor)">
            <summary>
            Registers the <paramref name="interactor"/> with the manager.
            </summary>
            <param name="interactor">The interactor to register.</param>
            <returns><see langword="true"/> if the internal registration list changes (i.e. the interactor is not already registered).</returns>
        </member>
        <member name="M:MAGES.IInteractionManager.RegisterInteractable(MAGES.IInteractable)">
            <summary>
            Registers the <paramref name="interactable"/> with the manager.
            </summary>
            <param name="interactable">The interactable to register.</param>
            <returns><see langword="true"/> if the internal registration list changes (i.e. the <paramref name="interactable"/> is not already registered).</returns>
        </member>
        <member name="M:MAGES.IInteractionManager.DeregisterInteractor(MAGES.IInteractor)">
            <summary>
            Deregisters the <paramref name="interactor"/> from the manager.
            </summary>
            <param name="interactor">The interactor to deregister.</param>
        </member>
        <member name="M:MAGES.IInteractionManager.DeregisterInteractable(MAGES.IInteractable)">
            <summary>
            Deregisters the <paramref name="interactable"/> from the manager.
            </summary>
            <param name="interactable">The interactable to deregister.</param>
        </member>
        <member name="M:MAGES.IInteractionManager.RegisterManager(MAGES.IInteractionManager)">
            <summary>
            Registers a manager.
            </summary>
            <param name="manager">The manager.</param>
            <remarks>
            Usually all the IInteractionManagers are kept in a static collection, to be easily accessible. This method should be called when the manager is enabled in order to add it to this list.
            </remarks>
        </member>
        <member name="M:MAGES.IInteractionManager.DeregisterManager(MAGES.IInteractionManager)">
            <summary>
            Deregisters a manager.
            </summary>
            <param name="manager">The manager to deregister.</param>
            <seealso cref="M:MAGES.IInteractionManager.RegisterManager(MAGES.IInteractionManager)"/>
        </member>
        <member name="M:MAGES.IInteractionManager.GetRegisteredInteractors(System.Collections.Generic.List{MAGES.IInteractor})">
            <summary>
            Gets all the registered interactors with this manager.
            </summary>
            <param name="result">The list to put the result. It will be cleared before adding to it.</param>
        </member>
        <member name="M:MAGES.IInteractionManager.GetRegisteredInteractables(System.Collections.Generic.List{MAGES.IInteractable})">
            <summary>
            Gets all the registered interactables with this manager.
            </summary>
            <param name="result">The list to put the result. It will be cleared before adding to it.</param>
        </member>
        <member name="M:MAGES.IInteractionManager.IsInteractorRegistered(MAGES.IInteractor)">
            <summary>
            Gets if the <paramref name="interactor"/> is registered with this manager.
            </summary>
            <param name="interactor">The interactor to check if registered.</param>
            <returns><see langword="true"/> if the <paramref name="interactor"/> is registered with this manager.</returns>
        </member>
        <member name="M:MAGES.IInteractionManager.IsInteractableRegistered(MAGES.IInteractable)">
            <summary>
            Gets if the <paramref name="interactable"/> is registered with this manager.
            </summary>
            <param name="interactable">The interactable to check if registered.</param>
            <returns><see langword="true"/> if the <paramref name="interactable"/> is registered with this manager.</returns>
        </member>
        <member name="M:MAGES.IInteractionManager.TryGetInteractableFromCollider(UnityEngine.Collider,MAGES.IInteractable@)">
            <summary>
            Tries to get the <see cref="T:MAGES.IInteractable"/> that has the given <paramref name="collider"/>.
            </summary>
            <param name="collider">The interactable's collider.</param>
            <param name="interactable">The interactable, if found.</param>
            <returns><see langword="true"/> if an interactable with the given <paramref name="collider"/> was found.</returns>
        </member>
        <member name="M:MAGES.IInteractionManager.TryGetInteractorFromCollider(UnityEngine.Collider,MAGES.IInteractor@)">
            <summary>
            Tries to get the <see cref="T:MAGES.IInteractor"/> that has the given <paramref name="collider"/>.
            </summary>
            <param name="collider">The interactor's collider.</param>
            <param name="interactable">The interactor, if found.</param>
            <returns><see langword="true"/> if an interactor with the given <paramref name="collider"/> was found.</returns>
        </member>
        <member name="M:MAGES.IInteractionManager.HoverEnter(MAGES.IInteractor,MAGES.IInteractable)">
            <summary>
            Sends the hover enter event to the given <paramref name="interactable"/> and <paramref name="interactor"/>.
            </summary>
            <param name="interactor">The interactor.</param>
            <param name="interactable">The interactable.</param>
            <returns><see langword="true"/> on success.</returns>
        </member>
        <member name="M:MAGES.IInteractionManager.HoverExit(MAGES.IInteractor,MAGES.IInteractable)">
            <summary>
            Sends the hover exit event to the given <paramref name="interactable"/> and <paramref name="interactor"/>.
            </summary>
            <param name="interactor">The interactor.</param>
            <param name="interactable">The interactable.</param>
            <returns><see langword="true"/> on success.</returns>
        </member>
        <member name="M:MAGES.IInteractionManager.SelectEnter(MAGES.IInteractor,MAGES.IInteractable)">
            <summary>
            Sends the select enter event to the given <paramref name="interactable"/> and <paramref name="interactor"/>.
            </summary>
            <param name="interactor">The interactor.</param>
            <param name="interactable">The interactable.</param>
            <returns><see langword="true"/> on success.</returns>
        </member>
        <member name="M:MAGES.IInteractionManager.SelectExit(MAGES.IInteractor,MAGES.IInteractable)">
            <summary>
            Sends the seelct exit event to the given <paramref name="interactable"/> and <paramref name="interactor"/>.
            </summary>
            <param name="interactor">The interactor.</param>
            <param name="interactable">The interactable.</param>
            <returns><see langword="true"/> on success.</returns>
        </member>
        <member name="M:MAGES.IInteractionManager.ActivateEnter(MAGES.IInteractor,MAGES.IInteractable)">
            <summary>
            Sends the activate enter event to the given <paramref name="interactable"/> and <paramref name="interactor"/>.
            </summary>
            <param name="interactor">The interactor.</param>
            <param name="interactable">The interactable.</param>
            <returns><see langword="true"/> on success.</returns>
        </member>
        <member name="M:MAGES.IInteractionManager.ActivateExit(MAGES.IInteractor,MAGES.IInteractable)">
            <summary>
            Sends the activate exit event to the given <paramref name="interactable"/> and <paramref name="interactor"/>.
            </summary>
            <param name="interactor">The interactor.</param>
            <param name="interactable">The interactable.</param>
            <returns><see langword="true"/> on success.</returns>
        </member>
        <member name="T:MAGES.IInteractor">
            <summary>
            Interface that should be implemented by all interactor objects.
            </summary>
        </member>
        <member name="P:MAGES.IInteractor.InteractionManager">
            <summary>
            Gets the interaction manager this interactable is registered with. Null if not registered.
            </summary>
        </member>
        <member name="P:MAGES.IInteractor.Transform">
            <summary>
            Gets or sets the transform of the Interactor.
            </summary>
        </member>
        <member name="P:MAGES.IInteractor.Rigidbody">
            <summary>
            Gets or sets the rigidbody of the Interactor.
            </summary>
        </member>
        <member name="P:MAGES.IInteractor.Colliders">
            <summary>
            Gets a list of all the colliders of the Interactor.
            </summary>
        </member>
        <member name="P:MAGES.IInteractor.RegisterEntered">
            <summary>
            Gets or sets the UnityEvent invoked when the interactor is registered to an <see cref="T:MAGES.IInteractionManager"/>.
            </summary>
        </member>
        <member name="P:MAGES.IInteractor.DeregisterEntered">
            <summary>
            Gets or sets the UnityEvent invoked when the interactor is deregistered from an <see cref="T:MAGES.IInteractionManager"/>.
            </summary>
        </member>
        <member name="P:MAGES.IInteractor.HoverEntered">
            <summary>
            Gets or sets the UnityEvent invoked after the interactor begins hovering an <see cref="T:MAGES.IInteractable"/>.
            </summary>
        </member>
        <member name="P:MAGES.IInteractor.HoverExited">
            <summary>
            Gets or sets the UnityEvent invoked after the interactor ends hovering an <see cref="T:MAGES.IInteractable"/>.
            </summary>
        </member>
        <member name="P:MAGES.IInteractor.SelectEntered">
            <summary>
            Gets or sets the UnityEvent invoked after the interactor begins selecting an <see cref="T:MAGES.IInteractable"/>.
            </summary>
        </member>
        <member name="P:MAGES.IInteractor.SelectExited">
            <summary>
            Gets or sets the UnityEvent invoked after the interactor ends selecting an <see cref="T:MAGES.IInteractable"/>.
            </summary>
        </member>
        <member name="P:MAGES.IInteractor.ActivateEntered">
            <summary>
            Gets or sets the UnityEvent invoked after the interactor begins activating an <see cref="T:MAGES.IInteractable"/>.
            </summary>
        </member>
        <member name="P:MAGES.IInteractor.ActivateExited">
            <summary>
            Gets or sets the UnityEvent invoked after the interactor ends activating an <see cref="T:MAGES.IInteractable"/>.
            </summary>
        </member>
        <member name="P:MAGES.IInteractor.IsHoverEnabled">
            <summary>
            Gets a value indicating whether this interactor should send hover events.
            </summary>
        </member>
        <member name="P:MAGES.IInteractor.HasHover">
            <summary>
            Gets a value indicating whether this interactor is hovering any interactable.
            </summary>
        </member>
        <member name="P:MAGES.IInteractor.HoveredInteractable">
            <summary>
            Gets all the interactables this interactor is currently hovering.
            </summary>
        </member>
        <member name="P:MAGES.IInteractor.IsSelectEnabled">
            <summary>
            Gets a value indicating whether this interactor should send select event this frame.
            </summary>
            <remarks>Usually set by the controller input, when the grab button is pressed.</remarks>
        </member>
        <member name="P:MAGES.IInteractor.HasSelection">
            <summary>
            Gets a value indicating whether this interactor is selecting any interactable.
            </summary>
        </member>
        <member name="P:MAGES.IInteractor.SelectedInteractable">
            <summary>
            Gets the interactable this interactor has selected.
            </summary>
        </member>
        <member name="P:MAGES.IInteractor.SelectionIntensity">
            <summary>
            Gets the intensity of the selection.
            </summary>
        </member>
        <member name="P:MAGES.IInteractor.IsActivateEnabled">
            <summary>
            Gets a value indicating whether this interactor should send activate event this frame.
            </summary>
            <remarks>Usually set by the controller input, when the grab button is pressed.</remarks>
        </member>
        <member name="P:MAGES.IInteractor.HasActivation">
            <summary>
            Gets a value indicating whether this interactor is activating any interactable.
            </summary>
        </member>
        <member name="P:MAGES.IInteractor.ActivatedInteractable">
            <summary>
            Gets the first interactable this interactor has activated.
            </summary>
        </member>
        <member name="P:MAGES.IInteractor.ActivationIntensity">
            <summary>
            Gets the intensity of the activation.
            </summary>
        </member>
        <member name="M:MAGES.IInteractor.CanHover(MAGES.IInteractable)">
            <summary>
            Gets if this interactor can send hover events to the <paramref name="interactable"/>.
            </summary>
            <param name="interactable">The interactable to check if this interactor can send the hover event to.</param>
            <returns><see langword="true"/> if the <paramref name="interactable"/> can be hovered by this interactor.</returns>
        </member>
        <member name="M:MAGES.IInteractor.IsHovering(MAGES.IInteractable)">
            <summary>
            Gets if this interactor is hovering the <paramref name="interactable"/>.
            </summary>
            <param name="interactable">The interactable to check if this interactor is currently hovering over.</param>
            <returns><see langword="true"/> if the <paramref name="interactable"/> is currently hovered by this interactor.</returns>
        </member>
        <member name="M:MAGES.IInteractor.OnHoverEnter(MAGES.HoverEnterInteractionEventArgs)">
            <summary>
            Called before the interactor sends a hover enter event to an interactable.
            </summary>
            <param name="args">The event arguments.</param>
        </member>
        <member name="M:MAGES.IInteractor.OnHoverEntered(MAGES.HoverEnterInteractionEventArgs)">
            <summary>
            Called after the interactor has sent a hover enter event to an interactable.
            </summary>
            <param name="args">The event arguments.</param>
        </member>
        <member name="M:MAGES.IInteractor.OnHoverExit(MAGES.HoverExitInteractionEventArgs)">
            <summary>
            Called before the interactor sends a hover exit event to an interactable.
            </summary>
            <param name="args">The event arguments.</param>
        </member>
        <member name="M:MAGES.IInteractor.OnHoverExited(MAGES.HoverExitInteractionEventArgs)">
            <summary>
            Called before the interactor sends a hover event to an interactable.
            </summary>
            <param name="args">The event arguments.</param>
        </member>
        <member name="M:MAGES.IInteractor.CanSelect(MAGES.IInteractable)">
            <summary>
            Gets if this interactor can send select events to the <paramref name="interactable"/>.
            </summary>
            <param name="interactable">The interactable to check if this interactor can send the select event to.</param>
            <returns><see langword="true"/> if the <paramref name="interactable"/> can be selected by this interactor.</returns>
        </member>
        <member name="M:MAGES.IInteractor.IsSelecting(MAGES.IInteractable)">
            <summary>
            Gets if this interactor is selecting the <paramref name="interactable"/>.
            </summary>
            <param name="interactable">The interactable to check if this interactor is currently selecting.</param>
            <returns><see langword="true"/> if the <paramref name="interactable"/> is currently selected by this interactor.</returns>
        </member>
        <member name="M:MAGES.IInteractor.OnSelectEnter(MAGES.SelectEnterInteractionEventArgs)">
            <summary>
            Called before the interactor sends a select enter event to an interactable.
            </summary>
            <param name="args">The event arguments.</param>
        </member>
        <member name="M:MAGES.IInteractor.OnSelectEntered(MAGES.SelectEnterInteractionEventArgs)">
            <summary>
            Called after the interactor sends a select enter event to an interactable.
            </summary>
            <param name="args">The event arguments.</param>
        </member>
        <member name="M:MAGES.IInteractor.OnSelectExit(MAGES.SelectExitInteractionEventArgs)">
            <summary>
            Called before the interactor sends a select exit event to an interactable.
            </summary>
            <param name="args">The event arguments.</param>
        </member>
        <member name="M:MAGES.IInteractor.OnSelectExited(MAGES.SelectExitInteractionEventArgs)">
            <summary>
            Called after the interactor sends a select exit event to an interactable.
            </summary>
            <param name="args">The event arguments.</param>
        </member>
        <member name="M:MAGES.IInteractor.CanActivate(MAGES.IInteractable)">
            <summary>
            Gets if this interactor can send activate events to the <paramref name="interactable"/>.
            </summary>
            <param name="interactable">The interactable to check if this interactor can send the activate event to.</param>
            <returns><see langword="true"/> if the <paramref name="interactable"/> can be activated by this interactor.</returns>
        </member>
        <member name="M:MAGES.IInteractor.IsActivating(MAGES.IInteractable)">
            <summary>
            Gets if this interactor is activating the <paramref name="interactable"/>.
            </summary>
            <param name="interactable">The interactable to check if this interactor is currently activating.</param>
            <returns><see langword="true"/> if the <paramref name="interactable"/> is currently activated by this interactor.</returns>
        </member>
        <member name="M:MAGES.IInteractor.OnActivateEnter(MAGES.ActivateEnterInteractionEventArgs)">
            <summary>
            Called before the interactor sends an activate enter event to an interactable.
            </summary>
            <param name="args">The event arguments.</param>
        </member>
        <member name="M:MAGES.IInteractor.OnActivateEntered(MAGES.ActivateEnterInteractionEventArgs)">
            <summary>
            Called after the interactor sends an activate enter event to an interactable.
            </summary>
            <param name="args">The event arguments.</param>
        </member>
        <member name="M:MAGES.IInteractor.OnActivateExit(MAGES.ActivateExitInteractionEventArgs)">
            <summary>
            Called before the interactor sends an activate exit event to an interactable.
            </summary>
            <param name="args">The event arguments.</param>
        </member>
        <member name="M:MAGES.IInteractor.OnActivateExited(MAGES.ActivateExitInteractionEventArgs)">
            <summary>
            Called after the interactor sends an activate exit event to an interactable.
            </summary>
            <param name="args">The event arguments.</param>
        </member>
        <member name="M:MAGES.IInteractor.OnRegisterEnter(MAGES.InteractorRegisterEventArgs)">
            <summary>
            Called before the interactor is registered with the <see cref="P:MAGES.IInteractor.InteractionManager"/>.
            </summary>
            <param name="args">The event arguments.</param>
        </member>
        <member name="M:MAGES.IInteractor.OnRegisterEntered(MAGES.InteractorRegisterEventArgs)">
            <summary>
            Called after the interactor is registered with the <see cref="P:MAGES.IInteractor.InteractionManager"/>.
            </summary>
            <param name="args">The event arguments.</param>
        </member>
        <member name="M:MAGES.IInteractor.OnDeregisterEnter(MAGES.InteractorDeregisterEventArgs)">
            <summary>
            Called before the interactor is deregistered from the <see cref="P:MAGES.IInteractor.InteractionManager"/>.
            </summary>
            <param name="args">The event arguments.</param>
        </member>
        <member name="M:MAGES.IInteractor.OnDeregisterEntered(MAGES.InteractorDeregisterEventArgs)">
            <summary>
            Called after the interactor is deregistered from the <see cref="P:MAGES.IInteractor.InteractionManager"/>.
            </summary>
            <param name="args">The event arguments.</param>
        </member>
        <member name="M:MAGES.IInteractor.GetValidTargets(System.Collections.Generic.List{MAGES.IInteractable})">
            <summary>
            Returns the list of valid targets for this interactor in the current frame.
            </summary>
            <param name="result">A list to put all the interactables this interactor may interact in this fram.</param>
            <remarks>
            The <paramref name="result"/> list is cleared before any interactables are added to it.
            </remarks>
        </member>
        <member name="M:MAGES.IInteractor.PreprocessInteractor(MAGES.UpdatePhase)">
            <summary>
            Called by the <see cref="P:MAGES.IInteractor.InteractionManager"/> before the Interactor is processed by the interaction manager, in the given update phase.
            </summary>
            <param name="updatePhase">The update phase this method is called.</param>
        </member>
        <member name="M:MAGES.IInteractor.ProcessInteractor(MAGES.UpdatePhase)">
            <summary>
            Called by the <see cref="P:MAGES.IInteractor.InteractionManager"/> after the Interactor is processed by the interaction manager, in the given update phase.
            </summary>
            <param name="updatePhase">The update phase this method is called.</param>
        </member>
        <member name="T:MAGES.ILocator">
            <summary>
            An interface that declares that a given class may be used to locate project-wide defaults.
            </summary>
        </member>
        <member name="M:MAGES.ILocator.Locate(System.String)">
            <summary>
            Locate the object.
            </summary>
            <param name="key">The key.</param>
            <returns>The object that matches <paramref name="key"/>, null otherwise.</returns>
        </member>
        <member name="T:MAGES.ILocomotionActions">
            <summary>
            Interface for generic actions that are triggered from user input and return a value to the user.
            </summary>
        </member>
        <member name="M:MAGES.ILocomotionActions.AddActionOnMove(System.Action{UnityEngine.Vector2})">
            <summary>
            Adds an action to be called when a move button is held.
            </summary>
            <param name="moveAction">The action that will be called with argument the 2D direction.</param>
        </member>
        <member name="M:MAGES.ILocomotionActions.AddActionOnSnapTurn(System.Action{System.Single})">
            <summary>
            Adds an action to be called when the camera turn button is pressed.
            </summary>
            <param name="snapRotate">The action that will be called with argument the direction.</param>
        </member>
        <member name="M:MAGES.ILocomotionActions.AddActionOnChangeHeight(System.Action{System.Single})">
            <summary>
            Adds an action to be called when a change height button is pressed.
            </summary>
            <param name="changeHeight">The action that will be called with argument the direction.</param>
        </member>
        <member name="M:MAGES.ILocomotionActions.AddActionOnSmoothTurn(System.Action{UnityEngine.Vector2})">
            <summary>
            Adds an action to be called when a rotate button is held.
            </summary>
            <param name="smoothRotate">The action that will be called with argument the 2D direction.</param>
        </member>
        <member name="T:MAGES.ILocomotionProvider">
            <summary>
            A provider of locomotion for a LocomotionSystem.
            </summary>
            <remarks>
            A LocomotionProvider may provide movement and rotation to the Rig through a LocomotionSystem.<br/>
            It can also be used to provide locomotion to other objects, managed with a LocomotionSystem.<br/>
            It works by granting exclusive access to the System and then manipulating the transform.
            </remarks>
        </member>
        <member name="P:MAGES.ILocomotionProvider.LocomotionSystem">
            <summary>
            Gets or sets the locomotion system this provider is registered with.
            </summary>
        </member>
        <member name="P:MAGES.ILocomotionProvider.LocomotionPhase">
            <summary>
            Gets the current locomotion phase of this provider.
            </summary>
        </member>
        <member name="P:MAGES.ILocomotionProvider.LocomotionStarted">
            <summary>
            Gets or sets the event called when a locomotion has just started.
            </summary>
        </member>
        <member name="P:MAGES.ILocomotionProvider.LocomotionEnded">
            <summary>
            Gets or sets the event called when a locomotion has just finished.
            </summary>
        </member>
        <member name="M:MAGES.ILocomotionProvider.CanStartLocomotion">
            <summary>
            Gets if this provider can start a locomotion.
            </summary>
            <returns><see langword="true"/> if can start a locomotion.</returns>
        </member>
        <member name="M:MAGES.ILocomotionProvider.StartLocomotion(System.Single)">
            <summary>
            Starts a locomotion.
            </summary>
            <param name="time">The time after which the locomotion will end automatically.</param>
            <returns><see langword="true"/> if the locomotion was started successfully. ie The LocomotionSystem was not busy.</returns>
        </member>
        <member name="M:MAGES.ILocomotionProvider.EndLocomotion">
            <summary>
            Ends the locomotion.
            </summary>
            <returns><see langword="true"/> on success.</returns>
        </member>
        <member name="T:MAGES.ILocomotionSystem">
            <summary>
            An interface to provide exclusive access to the Player Rig.
            </summary>
        </member>
        <member name="P:MAGES.ILocomotionSystem.Rig">
            <summary>
            Gets or sets the Rig that is being controlled.
            </summary>
        </member>
        <member name="P:MAGES.ILocomotionSystem.ExclusiveProvider">
            <summary>
            Gets the current provider that is performing an exclusive operation. <see langword="null"/> if not busy.
            </summary>
        </member>
        <member name="P:MAGES.ILocomotionSystem.ExclusiveAccessGranted">
            <summary>
            Gets the event called when the exclusive access is granted.
            </summary>
        </member>
        <member name="P:MAGES.ILocomotionSystem.ExclusiveAccessEnded">
            <summary>
            Gets the event called when the exclusive access is finished.
            </summary>
        </member>
        <member name="P:MAGES.ILocomotionSystem.IsBusy">
            <summary>
            Gets a value indicating whether the system is busy with an exclusive operation.
            </summary>
        </member>
        <member name="M:MAGES.ILocomotionSystem.RequestExclusiveAccess(MAGES.ILocomotionProvider,System.Single)">
            <summary>
            Start an exclusive operation with the Rig.
            </summary>
            <param name="provider">The provider with which to start the operation.</param>
            <param name="timeout">The time in seconds after which the exclusive access will finish.</param>
            <returns><see langword="true"/> if the operation was started successfully.</returns>
        </member>
        <member name="M:MAGES.ILocomotionSystem.EndExclusiveAccess(MAGES.ILocomotionProvider)">
            <summary>
            Finish an exclusive operation with the Rig.
            </summary>
            <param name="provider">The provider to end the operation.</param>
            <returns><see langword="true"/> if the provider was performing an exclusive operation that was now ended successfully.</returns>
        </member>
        <member name="T:MAGES.Networking.IMAGESNetworkIntegration">
            <summary>
            Interface for a mages network integration module.
            </summary>
        </member>
        <member name="M:MAGES.Networking.IMAGESNetworkIntegration.IsConnectedToServer">
            <summary>
            Checks if a user is connected to the main server and is ready to join a room.
            </summary>
            <returns>True when the user is connected, false when he is not.</returns>
        </member>
        <member name="M:MAGES.Networking.IMAGESNetworkIntegration.CreateRoom(System.String)">
            <summary>
            Creates a new network room that users can join.
            </summary>
            <param name="roomName">The name ID of the room.</param>
            <returns>True on successfully creating a room.</returns>
        </member>
        <member name="M:MAGES.Networking.IMAGESNetworkIntegration.JoinRoom(System.String)">
            <summary>
            Joins an existing network room.
            </summary>
            <param name="roomName">The name ID of the room.</param>
            <returns>True on successfully joining room.</returns>
        </member>
        <member name="M:MAGES.Networking.IMAGESNetworkIntegration.ValidateClientNetworkingSetup">
            <summary>
            Returns the operation code for when the user tries to establish a connection to the networking client.
            </summary>
            <returns>The return code. Usually 0 means it succeeded.</returns>
        </member>
        <member name="M:MAGES.Networking.IMAGESNetworkIntegration.GetAvailableRooms">
            <summary>
            Gets all available network rooms.
            </summary>
            <returns>Returns a list with all room names IDs.</returns>
        </member>
        <member name="M:MAGES.Networking.IMAGESNetworkIntegration.GetCurrentConnectedRoom">
            <summary>
            Return current connected room.
            </summary>
            <returns> Returns name of current room. Null if user is not connected to a room.</returns>
        </member>
        <member name="M:MAGES.Networking.IMAGESNetworkIntegration.EstablishConnectionToMainServer(System.String)">
            <summary>
            Establishes a connection to the main server.
            Needs to be called for the networking module to be initialized.
            </summary>
            <param name="args">Configuration arguments for this connection.</param>
            <returns>True when a connection is established successfully. </returns>
        </member>
        <member name="M:MAGES.Networking.IMAGESNetworkIntegration.Disconnect">
            <summary>
            Disconnects user from the main server by disconnecting.
            </summary>
        </member>
        <member name="M:MAGES.Networking.IMAGESNetworkIntegration.SpawnObject(UnityEngine.GameObject,System.Boolean)">
            <summary>
            Spawns a network object for all users.
            </summary>
            <param name="prefab">Network gameobject that will be spawned.</param>
            <param name="isUnique">Whether this object should be unique.</param>
            <returns>Returns the spawned object.</returns>
        </member>
        <member name="M:MAGES.Networking.IMAGESNetworkIntegration.DestroyObject(UnityEngine.GameObject)">
            <summary>
            Destroys a network object for all users.
            </summary>
            <param name="gameObject">The object to be destroyed.</param>
            <returns>Returns true if destroy was successful.</returns>
        </member>
        <member name="M:MAGES.Networking.IMAGESNetworkIntegration.GetPrefabIDFromNetwork(UnityEngine.GameObject,System.Boolean@)">
            <summary>
            Gets the prefab id from an object that was spawned from the network.
            </summary>
            <param name="prefab">The object to be checked.</param>
            <param name="isUnique">Whether this object should be unique.</param>
            <returns>A positive integer in case the object is from network. Else, returns -1.</returns>
        </member>
        <member name="M:MAGES.Networking.IMAGESNetworkIntegration.LinkNetworkObject(UnityEngine.GameObject,UnityEngine.GameObject)">
            <summary>
            Links network object with the remote object.
            </summary>
            <param name="remotePrefab">The remote object will be linked with the local prefab. At the end it is destroyed.</param>
            <param name="localPrefab">The local object that will be marked as remote.</param>
            <returns>The new linked object.</returns>
        </member>
        <member name="M:MAGES.Networking.IMAGESNetworkIntegration.RequestAuthority(UnityEngine.GameObject)">
            <summary>
            Transfers ownership of a network object to the current user.
            </summary>
            <param name="networkObject">The network object which this user wants to control.</param>
        </member>
        <member name="M:MAGES.Networking.IMAGESNetworkIntegration.GetNetworkID(UnityEngine.GameObject)">
            <summary>
            Retrieves the network id of a network object.
            </summary>
            <param name="networkObject"> The network object to retrieve the ID from.</param>
            <returns>The network id of the object. Returns -1 if not a networkObject.</returns>
        </member>
        <member name="M:MAGES.Networking.IMAGESNetworkIntegration.RequestChangeState(System.Byte,System.String)">
            <summary>
            Request a change in scenegraph's state.
            </summary>
            <param name="changeState">The change keycode that will be requested.</param>
            <param name="actionID">The ID of the action that will change.</param>
        </member>
        <member name="M:MAGES.Networking.IMAGESNetworkIntegration.HasAuthority(UnityEngine.GameObject)">
            <summary>
            Returns if the user has authority on this gameObject.
            </summary>
            <param name="networkObject">The network object that will be checked.</param>
            <returns>True if this user has authority over the object.</returns>
        </member>
        <member name="M:MAGES.Networking.IMAGESNetworkIntegration.DestroyComponent(UnityEngine.GameObject,System.String)">
            <summary>
            Destroys a component to all other users.
            </summary>
            <param name="gameObject">The network object that will be checked has the component.</param>
            <param name="componentType">The component type that will be destroyed.</param>
            <returns>True if the component was destroyed successfully.</returns>
        </member>
        <member name="M:MAGES.Networking.IMAGESNetworkIntegration.GetConnectedUsersToRoom(System.String)">
            <summary>
            Gets connected users to a specific room.
            </summary>
            <param name="roomID">The name ID of the room. </param>
            <returns>The number of the connected users. Returns -1 if the room does not exist.</returns>
        </member>
        <member name="M:MAGES.Networking.IMAGESNetworkIntegration.GetConnectedUsersToCurrentRoom">
            <summary>
            Gets connected users to the current room.
            </summary>
            <returns>The number of the connected users in the current room. Returns -1 if not connected to a room.</returns>
        </member>
        <member name="M:MAGES.Networking.IMAGESNetworkIntegration.AddSyncTransform(UnityEngine.GameObject)">
            <summary>
            Adds the sync transform component to the gameobject and returns it.
            </summary>
            <param name="gameObject">The gameobject that will be passed as argument.</param>
            <returns>Reference to the sync transform component.</returns>
        </member>
        <member name="M:MAGES.Networking.IMAGESNetworkIntegration.InitSpawnedObjectForNetwork(UnityEngine.GameObject,System.Boolean)">
            <summary>
            Initializes an object for multiplayer that is already spawned.
            </summary>
            <param name="gameObject">The object that is spawned.</param>
            <param name="syncTransform">If the object's transform should be synchronized.</param>
        </member>
        <member name="M:MAGES.Networking.IMAGESNetworkIntegration.AddQuestionSyncScript(UnityEngine.GameObject)">
            <summary>
            Adds and initializes network script for question action prefab.
            </summary>
            <param name="questionPrefab">The question UI prefab that has the question and the answers.</param>
        </member>
        <member name="M:MAGES.Networking.IMAGESNetworkIntegration.OnStartup">
            <summary>
            Called on startup to initialize this integration.
            </summary>
        </member>
        <member name="M:MAGES.Networking.IMAGESNetworkIntegration.GetPing">
            <summary>
            Gets the ping of the current to the server.
            </summary>
            <returns>An integer indicating the ping.</returns>
        </member>
        <member name="T:MAGES.Networking.MAGESSyncTransform">
            <summary>
            Enum defining different synchronization modes for object transforms.
            </summary>
        </member>
        <member name="F:MAGES.Networking.MAGESSyncTransform.None">
            <summary>
            Do not synchronize any type of object movement.
            </summary>
        </member>
        <member name="F:MAGES.Networking.MAGESSyncTransform.PositionOnly">
            <summary>
            Synchronization mode for position only.
            </summary>
        </member>
        <member name="F:MAGES.Networking.MAGESSyncTransform.RotationOnly">
            <summary>
            Synchronization mode for rotation only.
            </summary>
        </member>
        <member name="F:MAGES.Networking.MAGESSyncTransform.All">
            <summary>
            Synchronization mode for both position and rotation.
            </summary>
        </member>
        <member name="T:MAGES.Networking.MAGESSyncChildren">
            <summary>
            Enum defining different synchronization modes for objects.
            </summary>
        </member>
        <member name="F:MAGES.Networking.MAGESSyncChildren.None">
            <summary>
            Do not synchronize any object.
            </summary>
        </member>
        <member name="F:MAGES.Networking.MAGESSyncChildren.ParentOnly">
            <summary>
            Synchronize only the transform of the root object.
            </summary>
        </member>
        <member name="F:MAGES.Networking.MAGESSyncChildren.ChildrenOnly">
            <summary>
            Synchronize only the transform of children.
            </summary>
        </member>
        <member name="F:MAGES.Networking.MAGESSyncChildren.All">
            <summary>
            Synchronize the transform of both children and parent.
            </summary>
        </member>
        <member name="T:MAGES.Networking.IMAGESObjectSynchronization">
            <summary>
            Interface for object synchronization.
            </summary>
        </member>
        <member name="P:MAGES.Networking.IMAGESObjectSynchronization.MovementThreshold">
            <summary>
            Gets or sets threshold for movement.
            </summary>
        </member>
        <member name="P:MAGES.Networking.IMAGESObjectSynchronization.RotationThreshold">
            <summary>
            Gets or sets threshold for rotation.
            </summary>
        </member>
        <member name="P:MAGES.Networking.IMAGESObjectSynchronization.SyncTransformMode">
            <summary>
            Gets or sets current synchronization mode for the objects transform.
            </summary>
        </member>
        <member name="P:MAGES.Networking.IMAGESObjectSynchronization.SyncChildrenMode">
            <summary>
            Gets or sets current synchronization for the objects children.
            </summary>
        </member>
        <member name="T:MAGES.IMerger">
            <summary>
            Interface for merging two objects of the same type.
            </summary>
        </member>
        <member name="P:MAGES.IMerger.TargetType">
            <summary>
            Gets target type of the merger.
            </summary>
        </member>
        <member name="M:MAGES.IMerger.Merge(System.Object,System.Object)">
            <summary>
            Merge two objects of the same type.
            </summary>
            <param name="obj1">The first object.</param>
            <param name="obj2">The second object.</param>
            <returns>The merged object.</returns>
        </member>
        <member name="T:MAGES.MergerRegistry">
            <summary>
            Contains all mergers for the data container.
            </summary>
        </member>
        <member name="F:MAGES.MergerRegistry.privateInstance">
            <summary>
            Instance of the merger registry.
            </summary>
        </member>
        <member name="M:MAGES.MergerRegistry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MAGES.MergerRegistry"/> class.
            Constructor for the merger registry.
            </summary>
        </member>
        <member name="P:MAGES.MergerRegistry.Instance">
            <summary>
            Gets singleton instance of the merger registry.
            </summary>
        </member>
        <member name="M:MAGES.MergerRegistry.RegisterMerger(MAGES.IMerger)">
            <summary>
            Registers a merger.
            </summary>
            <param name="merger">The merger to be registered.</param>
        </member>
        <member name="M:MAGES.MergerRegistry.Merge(System.Object,System.Object)">
            <summary>
            Merge two objects of the same type.
            </summary>
            <param name="obj1">The first object.</param>
            <param name="obj2">The second object.</param>
            <returns>The merged object.</returns>
            <exception cref="T:System.ArgumentException">Throws exception if objects are of different type.</exception>
            <exception cref="T:System.NotSupportedException">Throws exception if a merger of the requested type is not implemented.</exception>
        </member>
        <member name="M:MAGES.MergerRegistry.InitializeDefaultMergers">
            <summary>
            Initializes the default mergers.
            </summary>
        </member>
        <member name="T:MAGES.SceneGraph.ImplementsEffectAttribute">
            <summary>
            An attribute used to deisgnate <see cref="T:MAGES.EffectImplementor"/> as the implementor for a given <see cref="T:MAGES.EffectData"/> for an <see cref="T:MAGES.BaseActionData"/>.
            </summary>
        </member>
        <member name="M:MAGES.SceneGraph.ImplementsEffectAttribute.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:MAGES.SceneGraph.ImplementsEffectAttribute"/> class.
            </summary>
            <param name="effectDataType">The type of the effect data that this implementor implements.</param>
            <param name="actionDataType">The type of the action data for which effect this implementor is used.</param>
        </member>
        <member name="P:MAGES.SceneGraph.ImplementsEffectAttribute.ActionDataType">
            <summary>
            Gets the type of the action data for which effect this implementor is used.
            </summary>
        </member>
        <member name="P:MAGES.SceneGraph.ImplementsEffectAttribute.EffectDataType">
            <summary>
            Gets the type of the effect data that this implementor implements.
            </summary>
        </member>
        <member name="M:MAGES.SceneGraph.ImplementsEffectAttribute.ImplementsEffectForAction(System.Type,System.Type,System.Type)">
            <summary>
            Shorthand for <see cref="M:MAGES.SceneGraph.ImplementsEffectAttribute.IsApplicable(System.Type,System.Type)"/>.
            </summary>
            <param name="implementor">The implementor type to test.</param>
            <param name="actionDataType">The action data type to test this implementor against.</param>
            <param name="effectDataType">The effect data type to test this implementor against.</param>
            <returns>True if this implementor implements the effect for the action.</returns>
        </member>
        <member name="M:MAGES.SceneGraph.ImplementsEffectAttribute.IsApplicable(System.Type,System.Type)">
            <summary>
            Returns whether this implementor is applicable to the given action and effect data types.
            </summary>
            <param name="actionDataType">The action data type to test against.</param>
            <param name="effectDataType">The effect data type to test against.</param>
            <returns>True if the implementor is valid for this context.</returns>
        </member>
        <member name="T:MAGES.SceneGraph.SceneGraphData">
            <summary>
            The scene graph data.
            </summary>
        </member>
        <member name="P:MAGES.SceneGraph.SceneGraphData.Root">
            <summary>
            Gets or sets the start action.
            </summary>
        </member>
        <member name="P:MAGES.SceneGraph.SceneGraphData.Groups">
            <summary>
            Gets or sets the groups.
            </summary>
        </member>
        <member name="M:MAGES.SceneGraph.SceneGraphData.ForEach(System.Action{MAGES.BaseActionData})">
            <summary>
            Run <paramref name="action"/> on each action in the graph.
            </summary>
            <param name="action">The action to run.</param>
        </member>
        <member name="M:MAGES.SceneGraph.SceneGraphData.ForEach(MAGES.BaseActionData,System.Action{MAGES.BaseActionData})">
            <summary>
            Run <paramref name="action"/> on each action in the graph, starting from <paramref name="start"/>.
            </summary>
            <param name="start">The starting node. Note that <paramref name="action"/> will be invoked for this action as well.</param>
            <param name="action">The action to invoke.</param>
        </member>
        <member name="M:MAGES.SceneGraph.SceneGraphData.Find(System.String)">
            <summary>
            Find an action by its ID.
            </summary>
            <param name="id">The id to search for.</param>
            <returns>The action with the corresponding <paramref name="id"/>, null otherwise.</returns>
        </member>
        <member name="M:MAGES.SceneGraph.SceneGraphData.Clone">
            <summary>
            Clone the graph.
            </summary>
            <returns>The cloned graph.</returns>
        </member>
        <member name="T:MAGES.SceneGraph.SceneGraphData.Group">
            <summary>
            A group that can encapsulate a set of actions.
            </summary>
        </member>
        <member name="P:MAGES.SceneGraph.SceneGraphData.Group.Name">
            <summary>
            Gets or sets the name of the group.
            </summary>
        </member>
        <member name="P:MAGES.SceneGraph.SceneGraphData.Group.Position">
            <summary>
            Gets or sets the position of the group.
            </summary>
        </member>
        <member name="P:MAGES.SceneGraph.SceneGraphData.Group.Children">
            <summary>
            Gets or sets the children of the group.
            </summary>
        </member>
        <member name="T:MAGES.SceneGraph.StubSceneGraph">
            <summary>
            Stub class for scene graph module.
            </summary>
        </member>
        <member name="M:MAGES.SceneGraph.StubSceneGraph.ActionInitialized(MAGES.SceneGraphModule.ActionInitializedEvent)">
            <inheritdoc/>
        </member>
        <member name="M:MAGES.SceneGraph.StubSceneGraph.ActionPerformed(MAGES.SceneGraphModule.ActionPerformedEvent)">
            <inheritdoc/>
        </member>
        <member name="M:MAGES.SceneGraph.StubSceneGraph.ActionUndone(MAGES.SceneGraphModule.ActionUndoneEvent)">
            <inheritdoc/>
        </member>
        <member name="M:MAGES.SceneGraph.StubSceneGraph.ForEachAction(System.Action{MAGES.BaseActionData})">
            <inheritdoc/>
        </member>
        <member name="M:MAGES.SceneGraph.StubSceneGraph.GetActionCategory(MAGES.BaseActionData)">
            <inheritdoc/>
        </member>
        <member name="M:MAGES.SceneGraph.StubSceneGraph.Shutdown">
            <inheritdoc/>
        </member>
        <member name="M:MAGES.SceneGraph.StubSceneGraph.Skip">
            <inheritdoc/>
        </member>
        <member name="M:MAGES.SceneGraph.StubSceneGraph.SkipAction(MAGES.BaseActionData)">
            <inheritdoc/>
        </member>
        <member name="M:MAGES.SceneGraph.StubSceneGraph.Startup">
            <inheritdoc/>
        </member>
        <member name="M:MAGES.SceneGraph.StubSceneGraph.Undo">
            <inheritdoc/>
        </member>
        <member name="M:MAGES.SceneGraph.StubSceneGraph.UndoAction(MAGES.BaseActionData)">
            <inheritdoc/>
        </member>
        <member name="T:MAGES.BaseInteractionEventArgs">
            <summary>
            Base class for all interaction events send from interactors to interactables.
            </summary>
        </member>
        <member name="P:MAGES.BaseInteractionEventArgs.Interactor">
            <summary>
            Gets or sets the interactor associated with this event.
            </summary>
        </member>
        <member name="P:MAGES.BaseInteractionEventArgs.Interactable">
            <summary>
            Gets or sets the interactable associated with this event.
            </summary>
        </member>
        <member name="P:MAGES.BaseInteractionEventArgs.Manager">
            <summary>
            Gets or sets the interaction manager associated with this event.
            </summary>
        </member>
        <member name="T:MAGES.HoverEnterInteractionEventArgs">
            <summary>
            Interaction event arguments for the HoverEnter event.
            </summary>
        </member>
        <member name="T:MAGES.HoverExitInteractionEventArgs">
            <summary>
            Interaction event arguments for the HoverExit event.
            </summary>
        </member>
        <member name="P:MAGES.HoverExitInteractionEventArgs.Cancelled">
            <summary>
            Gets or sets a value indicating Whether the event was cancelled.
            </summary>
            <remarks>
            This can happen when the interactor is unregistered while hovering the interactable.
            </remarks>
        </member>
        <member name="T:MAGES.SelectEnterInteractionEventArgs">
            <summary>
            Interaction event arguments for the SelectEnter event.
            </summary>
        </member>
        <member name="T:MAGES.SelectExitInteractionEventArgs">
            <summary>
            Interaction event arguments for the SelectExit event.
            </summary>
        </member>
        <member name="P:MAGES.SelectExitInteractionEventArgs.Cancelled">
            <summary>
            Gets or sets a value indicating Whether the event was cancelled.
            </summary>
            <remarks>
            This can happen when the interactor is unregistered while selecting the interactable.
            </remarks>
        </member>
        <member name="T:MAGES.ActivateEnterInteractionEventArgs">
            <summary>
            Interaction event arguments for the ActivateEnter event.
            </summary>
        </member>
        <member name="T:MAGES.ActivateExitInteractionEventArgs">
            <summary>
            Interaction event arguments for the ActivateExit event.
            </summary>
        </member>
        <member name="P:MAGES.ActivateExitInteractionEventArgs.Cancelled">
            <summary>
            Gets or sets a value indicating Whether the event was cancelled.
            </summary>
            <remarks>
            This can happen when the interactor is unregistered while activating the interactable.
            </remarks>
        </member>
        <member name="T:MAGES.BaseRegistrationEventArgs">
            <summary>
            The base class for all registration events.
            </summary>
        </member>
        <member name="P:MAGES.BaseRegistrationEventArgs.Manager">
            <summary>
            Gets or sets the manager associated with this event.
            </summary>
        </member>
        <member name="T:MAGES.InteractableRegisterEventArgs">
            <summary>
            Event arguments for the InteractableRegistered event.
            </summary>
        </member>
        <member name="P:MAGES.InteractableRegisterEventArgs.Interactable">
            <summary>
            Gets or sets the interactable associated with this event.
            </summary>
        </member>
        <member name="T:MAGES.InteractableDeregisterEventArgs">
            <summary>
            Event arguments for the InteractableRegistered event.
            </summary>
        </member>
        <member name="P:MAGES.InteractableDeregisterEventArgs.Interactable">
            <summary>
            Gets or sets the interactable associated with this event.
            </summary>
        </member>
        <member name="T:MAGES.InteractorRegisterEventArgs">
            <summary>
            Event arguments for the InteractorRegistered event.
            </summary>
        </member>
        <member name="P:MAGES.InteractorRegisterEventArgs.Interactor">
            <summary>
            Gets or sets the interactor associated with this event.
            </summary>
        </member>
        <member name="T:MAGES.InteractorDeregisterEventArgs">
            <summary>
            Event arguments for the InteractorDeregistered event.
            </summary>
        </member>
        <member name="P:MAGES.InteractorDeregisterEventArgs.Interactor">
            <summary>
            Gets or sets the interactor associated with this event.
            </summary>
        </member>
        <member name="T:MAGES.BaseLocomotionEventArgs">
            <summary>
            Base class for all locomotion system events.
            </summary>
        </member>
        <member name="P:MAGES.BaseLocomotionEventArgs.LocomotionSystem">
            <summary>
            Gets or sets the locomotion system associated with this event.
            </summary>
        </member>
        <member name="T:MAGES.ExclusiveAccessGrantedEventArgs">
            <summary>
            Event arguments used in the event when a LocomotionProvider is granted exclusive access to the LocomotionSystem.
            </summary>
        </member>
        <member name="P:MAGES.ExclusiveAccessGrantedEventArgs.LocomotionProvider">
            <summary>
            Gets or sets the LocomotionProvider associated with this event.
            </summary>
        </member>
        <member name="P:MAGES.ExclusiveAccessGrantedEventArgs.TimeoutDuration">
            <summary>
            Gets or sets the timeout duration for the exclusive access in seconds.
            </summary>
        </member>
        <member name="T:MAGES.ExclusiveAccessFinishedEventArgs">
            <summary>
            Event arguments used in the event when a LocomotionProvider has finished exclusive access to the LocomotionSystem.
            </summary>
        </member>
        <member name="P:MAGES.ExclusiveAccessFinishedEventArgs.LocomotionProvider">
            <summary>
            Gets or sets the LocomotionProvider associated with this event.
            </summary>
        </member>
        <member name="T:MAGES.LocomotionStartEventArgs">
            <summary>
            Event arguments for the LocomotionStarted event.
            </summary>
        </member>
        <member name="P:MAGES.LocomotionStartEventArgs.LocomotionProvider">
            <summary>
            Gets or sets the LocomotionProvider associated with this event.
            </summary>
        </member>
        <member name="T:MAGES.LocomotionEndEventArgs">
            <summary>
            Event arguments for the LocomotionEnded event.
            </summary>
        </member>
        <member name="P:MAGES.LocomotionEndEventArgs.LocomotionProvider">
            <summary>
            Gets or sets the LocomotionProvider associated with this event.
            </summary>
        </member>
        <member name="T:MAGES.InteractionMode">
            <summary>
            How many interactors can interact with this interactable at the same time.
            </summary>
        </member>
        <member name="F:MAGES.InteractionMode.Single">
            <summary>
            Only one interactor can interact with this interactable at a time.
            </summary>
        </member>
        <member name="F:MAGES.InteractionMode.Multiple">
            <summary>
            Multiple interactors can interact with this interactable at the same time.
            </summary>
        </member>
        <member name="T:MAGES.InteractionSystemModule">
            <summary>
            The interaction system module base class.
            </summary>
        </member>
        <member name="P:MAGES.InteractionSystemModule.LeftHand">
            <summary>
            Gets or sets the left hand gameobject.
            </summary>
        </member>
        <member name="P:MAGES.InteractionSystemModule.RightHand">
            <summary>
            Gets or sets the right hand gameobject.
            </summary>
        </member>
        <member name="P:MAGES.InteractionSystemModule.Avatar">
            <summary>
            Gets or sets the avatar gameobject.
            </summary>
        </member>
        <member name="P:MAGES.InteractionSystemModule.Interactables">
            <summary>
            Gets or sets the available interactables for this interaction system.
            </summary>
        </member>
        <member name="P:MAGES.InteractionSystemModule.Interactors">
            <summary>
            Gets or sets the available interactors for this interaction system.
            </summary>
        </member>
        <member name="P:MAGES.InteractionSystemModule.AutomaticPlayerRigSetup">
            <summary>
            Gets or sets a value indicating whether the player rig will be automatically setup when the scene starts.
            </summary>
        </member>
        <member name="M:MAGES.InteractionSystemModule.TryAddInteractable(UnityEngine.GameObject,System.String,MAGES.IInteractable@)">
            <summary>
            Tries to add the given <paramref name="interactableType"/> script to the <paramref name="gameObject"/>.
            </summary>
            <param name="gameObject">The gameobject to add the interactable to.</param>
            <param name="interactableType">The identifier name of the interactable type. See the scriptable object for all available types.</param>
            <param name="component">The IInteractable component added.</param>
            <returns><see langword="true"/> if it was possible to find the given <paramref name="interactableType"/> type and add it to the <paramref name="gameObject"/>.</returns>
            <seealso cref="M:MAGES.InteractionSystemModule.GetOrAddInteractable(UnityEngine.GameObject,System.String)"/>
        </member>
        <member name="M:MAGES.InteractionSystemModule.GetInteractable(UnityEngine.GameObject,System.String)">
            <summary>
            Gets the interactable of the given <paramref name="interactableType"/> from the <paramref name="gameObject"/>.
            </summary>
            <param name="gameObject">The gameobject to get the component from.</param>
            <param name="interactableType">The type of the interactable to get.</param>
            <returns>The interactable if found as IInteractable or <see langword="null"/> if it does not exist.</returns>
        </member>
        <member name="M:MAGES.InteractionSystemModule.GetOrAddInteractable(UnityEngine.GameObject,System.String)">
            <summary>
            Gets the interactable of the given <paramref name="interactableType"/> from the <paramref name="gameObject"/>.
            If the <paramref name="gameObject"/> does not have this interactable type script, it will be added.
            </summary>
            <param name="gameObject">The gameobject to get the component from or add it to.</param>
            <param name="interactableType">The type of the interactable to get or add.</param>
            <returns>The interactable if found or added as IInteractable, or <see langword="null"/> if the <paramref name="interactableType"/> given is invalid.</returns>
            <seealso cref="M:MAGES.InteractionSystemModule.GetInteractable(UnityEngine.GameObject,System.String)"/>
            <seealso cref="M:MAGES.InteractionSystemModule.GetOrAddGrabbable(UnityEngine.GameObject)"/>
            <seealso cref="M:MAGES.InteractionSystemModule.TryAddInteractable(UnityEngine.GameObject,System.String,MAGES.IInteractable@)"/>
        </member>
        <member name="M:MAGES.InteractionSystemModule.AddGrabbable(UnityEngine.GameObject)">
            <summary>
            Adds a Grabbable to the <paramref name="gameObject"/>.
            </summary>
            <param name="gameObject">The GameObject in which to add the Grabbable component.</param>
            <returns>The added grabbable component.</returns>
        </member>
        <member name="M:MAGES.InteractionSystemModule.GetGrabbable(UnityEngine.GameObject)">
            <summary>
            Gets the Grabbable from the <paramref name="gameObject"/>.
            </summary>
            <param name="gameObject">The GameObject to get the Grabbable from.</param>
            <returns>The grabbable if found, else <see langword="null"/>.</returns>
        </member>
        <member name="M:MAGES.InteractionSystemModule.GetOrAddGrabbable(UnityEngine.GameObject)">
            <summary>
            Adds a Grabbable to the <paramref name="gameObject"/> or gets the one already on it.
            </summary>
            <param name="gameObject">The GameObject in which to add the Grabbable component.</param>
            <returns>The Grabbable added or found, as IInteractable.</returns>
            <remarks>This is the same as doing it with <see cref="M:MAGES.InteractionSystemModule.GetOrAddInteractable(UnityEngine.GameObject,System.String)"/>, but is added extra to eliminate typo errors when using strings.</remarks>
            <seealso cref="M:MAGES.InteractionSystemModule.GetOrAddInteractable(UnityEngine.GameObject,System.String)"/>
            <seealso cref="M:MAGES.InteractionSystemModule.GetInteractable(UnityEngine.GameObject,System.String)"/>
            <seealso cref="M:MAGES.InteractionSystemModule.TryAddInteractable(UnityEngine.GameObject,System.String,MAGES.IInteractable@)"/>
        </member>
        <member name="M:MAGES.InteractionSystemModule.TryAddInteractor(UnityEngine.GameObject,System.String,MAGES.IInteractor@)">
            <summary>
            Tries to add the given <paramref name="interactorType"/> script to the <paramref name="gameObject"/>.
            </summary>
            <param name="gameObject">The gameobject to add the interactor to.</param>
            <param name="interactorType">The identifier name of the interactor type. See the scriptable object for all available types.</param>
            <param name="component">The IInteractor component added.</param>
            <returns><see langword="true"/> if it was possible to find the given <paramref name="interactorType"/> type and add it to the <paramref name="gameObject"/>.</returns>
            <seealso cref="M:MAGES.InteractionSystemModule.GetOrAddInteractor(UnityEngine.GameObject,System.String)"/>
        </member>
        <member name="M:MAGES.InteractionSystemModule.GetInteractor(UnityEngine.GameObject,System.String)">
            <summary>
            Gets the interactor of the given <paramref name="interactorType"/> from the <paramref name="gameObject"/>.
            </summary>
            <param name="gameObject">The gameobject to get the component from.</param>
            <param name="interactorType">The type of the interactor to get.</param>
            <returns>The interactor if found as IInteractor or <see langword="null"/> if it does not exist.</returns>
            <seealso cref="M:MAGES.InteractionSystemModule.GetOrAddInteractor(UnityEngine.GameObject,System.String)"/>
            <seealso cref="M:MAGES.InteractionSystemModule.TryAddInteractor(UnityEngine.GameObject,System.String,MAGES.IInteractor@)"/>
        </member>
        <member name="M:MAGES.InteractionSystemModule.GetOrAddInteractor(UnityEngine.GameObject,System.String)">
            <summary>
            Gets the interactor of the given <paramref name="interactorType"/> from the <paramref name="gameObject"/>.
            If the <paramref name="gameObject"/> does not have this interactor type script, it will be added.
            </summary>
            <param name="gameObject">The gameobject to get the component from or add it to.</param>
            <param name="interactorType">The type of the interactor to get or add.</param>
            <returns>The interactor if found or added as IInteractor, or <see langword="null"/> if the <paramref name="interactorType"/> given is invalid.</returns>
            <seealso cref="M:MAGES.InteractionSystemModule.GetInteractor(UnityEngine.GameObject,System.String)"/>
            <seealso cref="M:MAGES.InteractionSystemModule.TryAddInteractor(UnityEngine.GameObject,System.String,MAGES.IInteractor@)"/>
        </member>
        <member name="T:MAGES.InteractionSystemModule.InteractableInfo">
            <summary>
            Stores info about the interactable name and type.
            </summary>
        </member>
        <member name="M:MAGES.InteractionSystemModule.InteractableInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MAGES.InteractionSystemModule.InteractableInfo"/> class.
            </summary>
            <param name="name">The identifier name of the interactable.</param>
            <param name="type">The actual type of its class in string.</param>
        </member>
        <member name="P:MAGES.InteractionSystemModule.InteractableInfo.Name">
            <summary>
            Gets or sets the identifier name to be used when using the TryAddInteractable method.
            </summary>
        </member>
        <member name="P:MAGES.InteractionSystemModule.InteractableInfo.Type">
            <summary>
            Gets or sets the type in string of the actual class for this interactable.
            </summary>
        </member>
        <member name="T:MAGES.InteractionSystemModule.InteractorInfo">
            <summary>
            Stores info about the interactor name and type.
            </summary>
        </member>
        <member name="M:MAGES.InteractionSystemModule.InteractorInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MAGES.InteractionSystemModule.InteractorInfo"/> class.
            </summary>
            <param name="name">The identifier name of the interactor.</param>
            <param name="type">The actual type of its class in string.</param>
        </member>
        <member name="P:MAGES.InteractionSystemModule.InteractorInfo.Name">
            <summary>
            Gets or sets the  identifier name to be used when using the TryAddInteractor method.
            </summary>
        </member>
        <member name="P:MAGES.InteractionSystemModule.InteractorInfo.Type">
            <summary>
            Gets or sets the type in string of the actual class for this interactor.
            </summary>
        </member>
        <member name="T:MAGES.IPlayerRig">
            <summary>
            The base class for the Player Rig.
            </summary>
        </member>
        <member name="P:MAGES.IPlayerRig.RootTransform">
            <summary>
            Gets or sets the root transform of the rig.
            </summary>
        </member>
        <member name="P:MAGES.IPlayerRig.CameraOffset">
            <summary>
            Gets or sets the Rig's camera offset.
            </summary>
            <remarks>
            Typically the offset the camera has from the ground.
            </remarks>
        </member>
        <member name="P:MAGES.IPlayerRig.Camera">
            <summary>
            Gets or sets the Rig's camera component.
            </summary>
        </member>
        <member name="T:MAGES.RigidBodyAnimation.IRigidBodyAnimation">
            <summary>
            Represents an interface for rigid body animations.
            </summary>
        </member>
        <member name="P:MAGES.RigidBodyAnimation.IRigidBodyAnimation.RigidbodyTransformObj">
            <summary>
            Gets or sets the game object representing the rigid body's transform.
            </summary>
        </member>
        <member name="P:MAGES.RigidBodyAnimation.IRigidBodyAnimation.Speed">
            <summary>
            Gets or sets the speed of the animation.
            </summary>
        </member>
        <member name="M:MAGES.RigidBodyAnimation.IRigidBodyAnimation.UpdateRigidBodyAnimation">
            <summary>
            Updates the rigid body animation.
            </summary>
        </member>
        <member name="M:MAGES.RigidBodyAnimation.IRigidBodyAnimation.Stop">
            <summary>
            Stops the animation.
            </summary>
        </member>
        <member name="M:MAGES.RigidBodyAnimation.IRigidBodyAnimation.Start">
            <summary>
            Starts the animation.
            </summary>
        </member>
        <member name="M:MAGES.RigidBodyAnimation.IRigidBodyAnimation.Restart(UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Restarts the animation.
            </summary>
            <param name="newTargetPos"> Target position.</param>
            <param name="newTargetRot"> Target rotation.</param>
        </member>
        <member name="M:MAGES.RigidBodyAnimation.IRigidBodyAnimation.IsFinished">
            <summary>
            Checks if the animation has finished.
            </summary>
            <returns>True if the animation has finished, false otherwise.</returns>
        </member>
        <member name="T:MAGES.RigidBodyAnimation.RigidbodyAnimationController">
            <summary>
            RigidbodyAnimationController, controll all rigid body animations.
            </summary>
        </member>
        <member name="F:MAGES.RigidBodyAnimation.RigidbodyAnimationController.rigidAnimations">
            <summary>
            Active RigidAnimations List.
            </summary>
        </member>
        <member name="P:MAGES.RigidBodyAnimation.RigidbodyAnimationController.RigidbodyAnimationControllerInstance">
            <summary>
            Gets RigidBodyAnimation instace list.
            </summary>
        </member>
        <member name="M:MAGES.RigidBodyAnimation.RigidbodyAnimationController.AddRigidbodyAnimation(MAGES.RigidBodyAnimation.IRigidBodyAnimation)">
            <summary>
            Add a rigidbody animation to controller.
            </summary>
            <param name="r"> IRigidBodyAnimation.</param>
        </member>
        <member name="T:MAGES.RigidBodyAnimation.RigidbodyMoveAndRotateDualQuat">
            <summary>
            RigidbodyMoveToTarget with Dual Quaternions.
            </summary>
        </member>
        <member name="F:MAGES.RigidBodyAnimation.RigidbodyMoveAndRotateDualQuat.posTarget">
            <summary>
            The target position.
            </summary>
        </member>
        <member name="F:MAGES.RigidBodyAnimation.RigidbodyMoveAndRotateDualQuat.rotTarget">
            <summary>
            The target rotation.
            </summary>
        </member>
        <member name="M:MAGES.RigidBodyAnimation.RigidbodyMoveAndRotateDualQuat.#ctor(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.GameObject,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MAGES.RigidBodyAnimation.RigidbodyMoveAndRotateDualQuat"/> class.
            Constructor.
            </summary>
            <param name="newTargetPos"> New target position.</param>
            <param name="newTargetRot"> New target rotation. </param>
            <param name="thisGameobject"> The gameobject to move. </param>
            <param name="newAnimationTime"> Interpolation time.</param>
            <param name="forceStart"> Start immediately.</param>
        </member>
        <member name="P:MAGES.RigidBodyAnimation.RigidbodyMoveAndRotateDualQuat.RigidbodyTransformObj">
            <summary>
            Gets or Sets the object to be translated.
            </summary>
        </member>
        <member name="P:MAGES.RigidBodyAnimation.RigidbodyMoveAndRotateDualQuat.Speed">
            <summary>
            Gets or sets translation speed.
            </summary>
        </member>
        <member name="M:MAGES.RigidBodyAnimation.RigidbodyMoveAndRotateDualQuat.IsFinished">
            <summary>
            Checks if the animation has finished.
            </summary>
            <returns>True if the animation has finished, false otherwise.</returns>
        </member>
        <member name="M:MAGES.RigidBodyAnimation.RigidbodyMoveAndRotateDualQuat.Start">
            <summary>
            Starts the animation.
            </summary>
        </member>
        <member name="M:MAGES.RigidBodyAnimation.RigidbodyMoveAndRotateDualQuat.Stop">
            <summary>
            Stops the animation.
            </summary>
        </member>
        <member name="M:MAGES.RigidBodyAnimation.RigidbodyMoveAndRotateDualQuat.Restart(UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Restarts the animation.
            </summary>
            <param name="newTargetPos"> Target position.</param>
            <param name="newTargetRot"> Target rotation.</param>
        </member>
        <member name="M:MAGES.RigidBodyAnimation.RigidbodyMoveAndRotateDualQuat.UpdateRigidBodyAnimation">
            <summary>
            Updates the rigid body animation.
            </summary>
        </member>
        <member name="T:MAGES.RigidBodyAnimation.RigidbodyMoveAndRotateDualQuatLocal">
            <summary>
            RigidbodyMoveToTarget with Dual Quaternions.
            --------With Local Transforms!------.
            </summary>
        </member>
        <member name="M:MAGES.RigidBodyAnimation.RigidbodyMoveAndRotateDualQuatLocal.#ctor(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.GameObject,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MAGES.RigidBodyAnimation.RigidbodyMoveAndRotateDualQuatLocal"/> class.
            Constructor.
            </summary>
            <param name="newTargetPos"> New target position.</param>
            <param name="newTargetRot"> New target rotation. </param>
            <param name="thisGameobject"> The gameobject to move. </param>
            <param name="animationTime"> Interpolation time.</param>
            <param name="forceStart"> Start immediately.</param>
        </member>
        <member name="P:MAGES.RigidBodyAnimation.RigidbodyMoveAndRotateDualQuatLocal.RigidbodyTransformObj">
            <summary>
            Gets or sets the object to be translated.
            </summary>
        </member>
        <member name="P:MAGES.RigidBodyAnimation.RigidbodyMoveAndRotateDualQuatLocal.Speed">
            <summary>
            Gets or sets translation speed.
            </summary>
        </member>
        <member name="M:MAGES.RigidBodyAnimation.RigidbodyMoveAndRotateDualQuatLocal.IsFinished">
            <summary>
            Checks if the animation has finished.
            </summary>
            <returns>True if the animation has finished, false otherwise.</returns>
        </member>
        <member name="M:MAGES.RigidBodyAnimation.RigidbodyMoveAndRotateDualQuatLocal.Start">
            <summary>
            Starts the animation.
            </summary>
        </member>
        <member name="M:MAGES.RigidBodyAnimation.RigidbodyMoveAndRotateDualQuatLocal.Stop">
            <summary>
            Stops the animation.
            </summary>
        </member>
        <member name="M:MAGES.RigidBodyAnimation.RigidbodyMoveAndRotateDualQuatLocal.Restart(UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Restarts the animation.
            </summary>
            <param name="newTargetPos"> New target position.</param>
            <param name="newTargetRot"> New target rotation.</param>
        </member>
        <member name="M:MAGES.RigidBodyAnimation.RigidbodyMoveAndRotateDualQuatLocal.UpdateRigidBodyAnimation">
            <summary>
            Updates the rigid body animation.
            </summary>
        </member>
        <member name="T:MAGES.RigidBodyAnimation.RigidbodyMoveDualQuat">
            <summary>
            RigidbodyMoveToTarget with Dual Quaternions.
            </summary>
        </member>
        <member name="M:MAGES.RigidBodyAnimation.RigidbodyMoveDualQuat.#ctor(UnityEngine.GameObject,UnityEngine.GameObject,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MAGES.RigidBodyAnimation.RigidbodyMoveDualQuat"/> class.
            </summary>
            <param name="target"> Target object.</param>
            <param name="thisGameobject"> Interpolated object. </param>
            <param name="speed"> Interpolation speed. </param>
            <param name="forceStart"> Start immediately.</param>
        </member>
        <member name="P:MAGES.RigidBodyAnimation.RigidbodyMoveDualQuat.Target">
            <summary>
            Gets or sets target to Translate to.
            </summary>
        </member>
        <member name="P:MAGES.RigidBodyAnimation.RigidbodyMoveDualQuat.RigidbodyTransformObj">
            <summary>
            Gets or sets the object to be translated.
            </summary>
        </member>
        <member name="P:MAGES.RigidBodyAnimation.RigidbodyMoveDualQuat.Speed">
            <summary>
            Gets or sets translation speed.
            </summary>
        </member>
        <member name="M:MAGES.RigidBodyAnimation.RigidbodyMoveDualQuat.Restart(UnityEngine.Vector3,UnityEngine.Quaternion)">
            <inheritdoc cref="M:MAGES.RigidBodyAnimation.IRigidBodyAnimation.Restart(UnityEngine.Vector3,UnityEngine.Quaternion)"/>
        </member>
        <member name="M:MAGES.RigidBodyAnimation.RigidbodyMoveDualQuat.IsFinished">
            <summary>
            Checks if the animation has finished.
            </summary>
            <returns>True if the animation has finished, false otherwise.</returns>
        </member>
        <member name="M:MAGES.RigidBodyAnimation.RigidbodyMoveDualQuat.Start">
            <summary>
            Starts the animation.
            </summary>
        </member>
        <member name="M:MAGES.RigidBodyAnimation.RigidbodyMoveDualQuat.Stop">
            <summary>
            Stops the animation.
            </summary>
        </member>
        <member name="M:MAGES.RigidBodyAnimation.RigidbodyMoveDualQuat.UpdateRigidBodyAnimation">
            <summary>
            Updates the rigid body animation.
            </summary>
        </member>
        <member name="T:MAGES.RigidBodyAnimation.RigidbodyMoveToTarget">
            <summary>
            RigidbodyMoveToTarget.
            </summary>
        </member>
        <member name="F:MAGES.RigidBodyAnimation.RigidbodyMoveToTarget.distanceThreshold">
            <summary>
            distance Threshold to finish.
            </summary>
        </member>
        <member name="F:MAGES.RigidBodyAnimation.RigidbodyMoveToTarget.positionTarget">
            <summary>
            Target to Translate to.
            </summary>
        </member>
        <member name="F:MAGES.RigidBodyAnimation.RigidbodyMoveToTarget.rigidTrans">
            <summary>
            The object to be translated.
            </summary>
        </member>
        <member name="F:MAGES.RigidBodyAnimation.RigidbodyMoveToTarget.rigidSpeed">
            <summary>
            Translation speed.
            </summary>
        </member>
        <member name="M:MAGES.RigidBodyAnimation.RigidbodyMoveToTarget.#ctor(UnityEngine.Vector3,UnityEngine.GameObject,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MAGES.RigidBodyAnimation.RigidbodyMoveToTarget"/> class.
            </summary>
            <param name="targetPos"> Target position.</param>
            <param name="trans"> Object to interpolate.</param>
            <param name="speed"> Interpolation speed.</param>
            <param name="forceStart"> Start immediately.</param>
        </member>
        <member name="P:MAGES.RigidBodyAnimation.RigidbodyMoveToTarget.Target">
            <summary>
            Gets or sets target to Translate to.
            </summary>
        </member>
        <member name="P:MAGES.RigidBodyAnimation.RigidbodyMoveToTarget.RigidbodyTransformObj">
            <summary>
            Gets or sets the object to be translated.
            </summary>
        </member>
        <member name="P:MAGES.RigidBodyAnimation.RigidbodyMoveToTarget.Speed">
            <summary>
            Gets or sets translation speed.
            </summary>
        </member>
        <member name="M:MAGES.RigidBodyAnimation.RigidbodyMoveToTarget.UpdateRigidBodyAnimation">
            <summary>
            Updates the rigid body animation.
            </summary>
        </member>
        <member name="M:MAGES.RigidBodyAnimation.RigidbodyMoveToTarget.Restart(UnityEngine.Vector3,UnityEngine.Quaternion)">
            <inheritdoc cref="M:MAGES.RigidBodyAnimation.IRigidBodyAnimation.Restart(UnityEngine.Vector3,UnityEngine.Quaternion)"/>
        </member>
        <member name="M:MAGES.RigidBodyAnimation.RigidbodyMoveToTarget.IsFinished">
            <summary>
            Checks if the animation has finished.
            </summary>
            <returns>True if the animation has finished, false otherwise.</returns>
        </member>
        <member name="M:MAGES.RigidBodyAnimation.RigidbodyMoveToTarget.Stop">
            <summary>
            Stops the animation.
            </summary>
        </member>
        <member name="M:MAGES.RigidBodyAnimation.RigidbodyMoveToTarget.Pause">
            <summary>
            Pause the animation.
            </summary>
        </member>
        <member name="M:MAGES.RigidBodyAnimation.RigidbodyMoveToTarget.Start">
            <summary>
            Starts the animation.
            </summary>
        </member>
        <member name="M:MAGES.RigidBodyAnimation.RigidbodyMoveToTarget.OverrideDistanceThreshold(System.Single)">
            <summary>
            Change distance threshold. When threshold is too close to 0 you may need to stop it manualy.
            </summary>
            <param name="distance">Theshold must be positive. </param>
        </member>
        <member name="T:MAGES.RigidBodyAnimation.RigidbodyMoveToTargetLocal">
            <summary>
            Rigidbody move to target in local space.
            </summary>
        </member>
        <member name="F:MAGES.RigidBodyAnimation.RigidbodyMoveToTargetLocal.distanceThreshold">
            <summary>
            distance Threshold to finish.
            </summary>
        </member>
        <member name="F:MAGES.RigidBodyAnimation.RigidbodyMoveToTargetLocal.rigidTrans">
            <summary>
            The object to be translated.
            </summary>
        </member>
        <member name="F:MAGES.RigidBodyAnimation.RigidbodyMoveToTargetLocal.positionTarget">
            <summary>
            Target to Translate to.
            </summary>
        </member>
        <member name="F:MAGES.RigidBodyAnimation.RigidbodyMoveToTargetLocal.rigidSpeed">
            <summary>
            translation speed.
            </summary>
        </member>
        <member name="F:MAGES.RigidBodyAnimation.RigidbodyMoveToTargetLocal.isPlaying">
            <summary>
            Is playing.
            </summary>
        </member>
        <member name="F:MAGES.RigidBodyAnimation.RigidbodyMoveToTargetLocal.finish">
            <summary>
            Is finished.
            </summary>
        </member>
        <member name="M:MAGES.RigidBodyAnimation.RigidbodyMoveToTargetLocal.#ctor(UnityEngine.Vector3,UnityEngine.GameObject,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MAGES.RigidBodyAnimation.RigidbodyMoveToTargetLocal"/> class.
            RigidbodyMoveToTarget constructor.
            </summary>
            <param name="targetPos"> Target position.</param>
            <param name="trans"> Gameobject to transform.</param>
            <param name="speed">Interpolation speed. </param>
            <param name="forceStart"> Start immediately.</param>
        </member>
        <member name="P:MAGES.RigidBodyAnimation.RigidbodyMoveToTargetLocal.Target">
            <summary>
            Gets or sets target to Translate to.
            </summary>
        </member>
        <member name="P:MAGES.RigidBodyAnimation.RigidbodyMoveToTargetLocal.RigidbodyTransformObj">
            <summary>
            Gets or sets the object to be translated.
            </summary>
        </member>
        <member name="P:MAGES.RigidBodyAnimation.RigidbodyMoveToTargetLocal.Speed">
            <summary>
            Gets or sets translation speed.
            </summary>
        </member>
        <member name="M:MAGES.RigidBodyAnimation.RigidbodyMoveToTargetLocal.UpdateRigidBodyAnimation">
            <summary>
            Updates the rigid body animation.
            </summary>
        </member>
        <member name="M:MAGES.RigidBodyAnimation.RigidbodyMoveToTargetLocal.Restart(UnityEngine.Vector3,UnityEngine.Quaternion)">
            <inheritdoc cref="M:MAGES.RigidBodyAnimation.IRigidBodyAnimation.Restart(UnityEngine.Vector3,UnityEngine.Quaternion)"/>
        </member>
        <member name="M:MAGES.RigidBodyAnimation.RigidbodyMoveToTargetLocal.IsFinished">
            <summary>
            Checks if the animation has finished.
            </summary>
            <returns>True if the animation has finished, false otherwise.</returns>
        </member>
        <member name="M:MAGES.RigidBodyAnimation.RigidbodyMoveToTargetLocal.Stop">
            <summary>
            Stops the animation.
            </summary>
        </member>
        <member name="M:MAGES.RigidBodyAnimation.RigidbodyMoveToTargetLocal.Start">
            <summary>
            Starts the animation.
            </summary>
        </member>
        <member name="M:MAGES.RigidBodyAnimation.RigidbodyMoveToTargetLocal.OverrideDistanceThreshold(System.Single)">
            <summary>
            Change distance threshold,.
            When threshold is too close to 0 you may need to stop it manualy.
            </summary>
            <param name="distance">Theshold must be positive. </param>
        </member>
        <member name="T:MAGES.RigidBodyAnimation.RigidbodyRotateTo">
            <summary>
            RigidbodyRotateTo: Rotates a game object to a given Vector3.
            </summary>
        </member>
        <member name="M:MAGES.RigidBodyAnimation.RigidbodyRotateTo.#ctor(UnityEngine.Vector3,UnityEngine.GameObject,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MAGES.RigidBodyAnimation.RigidbodyRotateTo"/> class.
            </summary>
            <param name="targetRot"> Rotation target.</param>
            <param name="trans"> Object to interpolate. </param>
            <param name="speed"> Interpolation speed.</param>
            <param name="forceStart"> Start immediately.</param>
        </member>
        <member name="P:MAGES.RigidBodyAnimation.RigidbodyRotateTo.Target">
            <summary>
            Gets or sets Roation target.
            </summary>
        </member>
        <member name="P:MAGES.RigidBodyAnimation.RigidbodyRotateTo.RigidbodyTransformObj">
            <summary>
            Gets or sets game object with will apply rotation.
            </summary>
        </member>
        <member name="P:MAGES.RigidBodyAnimation.RigidbodyRotateTo.Speed">
            <summary>
            Gets or sets rotaion speed.
            </summary>
        </member>
        <member name="M:MAGES.RigidBodyAnimation.RigidbodyRotateTo.UpdateRigidBodyAnimation">
            <summary>
            Updates the rigid body animation.
            </summary>
        </member>
        <member name="M:MAGES.RigidBodyAnimation.RigidbodyRotateTo.Restart(UnityEngine.Vector3,UnityEngine.Quaternion)">
            <inheritdoc cref="M:MAGES.RigidBodyAnimation.IRigidBodyAnimation.Restart(UnityEngine.Vector3,UnityEngine.Quaternion)"/>
        </member>
        <member name="M:MAGES.RigidBodyAnimation.RigidbodyRotateTo.IsFinished">
            <summary>
            Checks if the animation has finished.
            </summary>
            <returns>True if the animation has finished, false otherwise.</returns>
        </member>
        <member name="M:MAGES.RigidBodyAnimation.RigidbodyRotateTo.Stop">
            <summary>
            Stops the animation.
            </summary>
        </member>
        <member name="M:MAGES.RigidBodyAnimation.RigidbodyRotateTo.Pause">
            <summary>
            Pause the interpolation.
            </summary>
        </member>
        <member name="M:MAGES.RigidBodyAnimation.RigidbodyRotateTo.Start">
            <summary>
            Starts the animation.
            </summary>
        </member>
        <member name="T:MAGES.ISchema">
            <summary>
            Interface of the Schema.
            </summary>
        </member>
        <member name="M:MAGES.ISchema.Store(System.String,System.Object)">
            <summary>
            Stores the data under the given key.
            </summary>
            <param name="key">Dictionary key.</param>
            <param name="data">Data to be stored.</param>
        </member>
        <member name="M:MAGES.ISchema.Get(System.String)">
            <summary>
            Retrieves the data under the given key.
            </summary>
            <param name="key">The lookup key.</param>
            <returns>The data under the key.</returns>
        </member>
        <member name="M:MAGES.ISchema.GetAllData(System.String)">
            <summary>
            Gets all the data under the given key pattern.
            </summary>
            <param name="keyPattern">Given key pattern.</param>
            <returns>The data under certain schema.</returns>
        </member>
        <member name="M:MAGES.ISchema.DeleteData(System.String)">
            <summary>
            Deletes the data under the given key.
            </summary>
            <param name="key">Given key.</param>
        </member>
        <member name="M:MAGES.ISchema.DeleteAllData(System.String)">
            <summary>
            Deletes data of subschema under the given key pattern.
            </summary>
            <param name="keyPattern">Given key pattern.</param>
        </member>
        <member name="M:MAGES.ISchema.GetSpecificData(System.String)">
            <summary>
            Get specific sub-convention/pattern data under the given key pattern.
            </summary>
            <param name="keyPattern">Given key pattern.</param>
            <returns>Dictionary of data.</returns>
        </member>
        <member name="M:MAGES.ISchema.DeleteSpecificData(System.String)">
            <summary>
            Delete specific sub-convention/pattern data under the given key pattern.
            </summary>
            <param name="keyPattern">Given key pattern.</param>
        </member>
        <member name="M:MAGES.ISchema.ClearAllData">
            <summary>
            Clears all data.
            </summary>
        </member>
        <member name="M:MAGES.ISchema.GetInstance">
            <summary>
            Gets the singleton instance of the schema.
            </summary>
            <returns>The singleton instance.</returns>
        </member>
        <member name="T:MAGES.LicenseLimits">
            <summary>
            Contains the information about the license limits.
            For example the maximum number of actions.
            </summary>
        </member>
        <member name="F:MAGES.LicenseLimits.MaxActions">
            <summary>
            The maximum number of actions.
            </summary>
        </member>
        <member name="T:MAGES.ListSchema">
            <summary>
            Schema for the List data.
            </summary>
        </member>
        <member name="P:MAGES.ListSchema.Instance">
            <summary>
            Gets singleton instance of Schema.
            </summary>
        </member>
        <member name="M:MAGES.ListSchema.GetInstance">
            <summary>
            Gets the instance of the singleton.
            </summary>
            <returns>The singleton instance.</returns>
        </member>
        <member name="M:MAGES.ListSchema.DeleteAllData(System.String)">
            <summary>
            Deletes all data from the schema.
            </summary>
            <param name="keyPattern">The given schema key.</param>
        </member>
        <member name="M:MAGES.ListSchema.ClearAllData">
            <summary>
            Clears all data.
            </summary>
        </member>
        <member name="M:MAGES.ListSchema.GetSpecificData(System.String)">
            <summary>
            Get specific sub-convention/pattern data under the given key pattern.
            </summary>
            <param name="keyPattern">Given key pattern.</param>
            <returns>Dictionary of data.</returns>
        </member>
        <member name="M:MAGES.ListSchema.DeleteSpecificData(System.String)">
            <summary>
            Delete specific sub-convention/pattern data under the given key pattern.
            </summary>
            <param name="keyPattern">Given key pattern.</param>
        </member>
        <member name="M:MAGES.ListSchema.DeleteData(System.String)">
            <summary>
            Deletes data from the schema under the given key.
            </summary>
            <param name="key">Given key.</param>
            <exception cref="T:System.ArgumentException">Exception if key wasn't found.</exception>
        </member>
        <member name="M:MAGES.ListSchema.Get(System.String)">
            <summary>
            Retrieves data from the schema under the given key.
            </summary>
            <param name="key">Given key.</param>
            <returns>Returns the data under the given key.</returns>
            <exception cref="T:System.ArgumentException">Exception if key wasn't found.</exception>
        </member>
        <member name="M:MAGES.ListSchema.GetAllData(System.String)">
            <summary>
            Gets all data from the schema.
            </summary>
            <param name="keyPattern">Given schema key.</param>
            <returns>Dictionary of data.</returns>
        </member>
        <member name="M:MAGES.ListSchema.Store(System.String,System.Object)">
            <summary>
            Stores data in the schema under the given key.
            </summary>
            <param name="key">Given key.</param>
            <param name="data">Given data.</param>
        </member>
        <member name="T:MAGES.LocomotionPhase">
            <summary>
            Describes the current phase of the locomotion.
            </summary>
        </member>
        <member name="F:MAGES.LocomotionPhase.Idle">
            <summary>
            The locomotion provider is in idle state.
            </summary>
        </member>
        <member name="F:MAGES.LocomotionPhase.Start">
            <summary>
            A locomotion has just started.
            </summary>
        </member>
        <member name="F:MAGES.LocomotionPhase.Moving">
            <summary>
            A locomotion is in progress.
            </summary>
        </member>
        <member name="F:MAGES.LocomotionPhase.End">
            <summary>
            A locomotion has just finished.
            </summary>
        </member>
        <member name="T:MAGES.LookAtObject">
            <summary>
            A simple component that makes the object look at an object.
            </summary>
            @todo(mdodis):
            - <see cref="F:MAGES.DirectionType.Up"/> and <see cref="F:MAGES.DirectionType.Down"/> do not work since the euler angles are limited, make this configurable and add validation code.
        </member>
        <member name="P:MAGES.LookAtObject.Target">
            <summary>
            Gets the target object to look at.
            </summary>
        </member>
        <member name="M:MAGES.LookAtObject.Pivot(UnityEngine.Transform,System.Single,System.Single)">
            <summary>
            Sets the pivot object to look at.
            </summary>
            <param name="pivot">The pivot to rotate around.</param>
            <param name="offset">The offset from the pivot.</param>
            <param name="y">The y offset.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:MAGES.LookAtObject.TargetObject(UnityEngine.Transform)">
            <summary>
            Sets the target object to look at.
            </summary>
            <param name="target">The object.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:MAGES.LookAtObject.ForwardVector(MAGES.DirectionType)">
            <summary>
            Set the reference forward vector used for this gameObject.
            </summary>
            <param name="forwardVector">The forward vector.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:MAGES.LookAtObject.Speed(System.Single)">
            <summary>
            Sets the speed of the rotation.
            </summary>
            <param name="speed">The speed.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:MAGES.LookAtObject.Angle(System.Single)">
            <summary>
            Sets the angle threshold.
            </summary>
            <param name="angleThreshold">the angle threshold (in degrees).</param>
            <returns>Self.</returns>
        </member>
        <member name="T:MAGES.Attributes.MAGESTooltipAttribute">
            <summary>
            A custom tooltip to make all mages properties have similar look and feel.
            </summary>
        </member>
        <member name="F:MAGES.Attributes.MAGESTooltipAttribute.title">
            <summary>
            The title of the tooltip.
            </summary>
        </member>
        <member name="F:MAGES.Attributes.MAGESTooltipAttribute.remarks">
            <summary>
            Remarks of the tooltip.
            </summary>
        </member>
        <member name="F:MAGES.Attributes.MAGESTooltipAttribute.details">
            <summary>
            A list of strings givent in the tooltip.
            </summary>
        </member>
        <member name="M:MAGES.Attributes.MAGESTooltipAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MAGES.Attributes.MAGESTooltipAttribute"/> class.
            </summary>
            <param name="title">The tooltip title.</param>
        </member>
        <member name="M:MAGES.Attributes.MAGESTooltipAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MAGES.Attributes.MAGESTooltipAttribute"/> class.
            </summary>
            <param name="title">The title.</param>
            <param name="remarks">The remarks.</param>
        </member>
        <member name="M:MAGES.Attributes.MAGESTooltipAttribute.#ctor(System.String,System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:MAGES.Attributes.MAGESTooltipAttribute"/> class.
            </summary>
            <param name="title">The title.</param>
            <param name="remarks">The remarks.</param>
            <param name="details">The details.</param>
        </member>
        <member name="P:MAGES.Attributes.MAGESTooltipAttribute.Title">
            <summary>
            Gets the title of the tooltip.
            </summary>
        </member>
        <member name="P:MAGES.Attributes.MAGESTooltipAttribute.Remarks">
            <summary>
            Gets the remarks of the tooltip.
            </summary>
        </member>
        <member name="P:MAGES.Attributes.MAGESTooltipAttribute.Details">
            <summary>
            Gets the details of the tooltip.
            </summary>
        </member>
        <member name="T:MAGES.MAGESTooltipStyles">
            <summary>
            MAGES Tooltip styling functions.
            </summary>
        </member>
        <member name="M:MAGES.MAGESTooltipStyles.GetEnumTooltipFormat(System.Type,System.String,System.String,System.String[])">
            <summary>
            Returns a rich text formatted string for an enum tooltip.
            </summary>
            <param name="enumType">The enum type.</param>
            <param name="title">The enum description title.</param>
            <param name="remarks">Enum remarks. Use only when more explanation neeeded.</param>
            <param name="optionDescription">A short description of what each enum option does.</param>
            <returns>The rich text formatted string, ready to be used in a tooltip.</returns>
        </member>
        <member name="M:MAGES.MAGESTooltipStyles.GetDefaultTooltipFormat(System.String,System.String)">
            <summary>
            Returns a rich text formatted string for a default tooltip.
            </summary>
            <param name="title">The variable short definition.</param>
            <param name="remarks">Remarks. Only use when extra explanation is needed.</param>
            <returns>The rich formatted string, ready to be used in a tooltip.</returns>
        </member>
        <member name="T:MAGES.MethodReference">
            <summary>
            A reference to a method on a type.
            </summary>
        </member>
        <member name="P:MAGES.MethodReference.ResolvedType">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="P:MAGES.MethodReference.Name">
            <summary>
            Gets the name of the method.
            </summary>
        </member>
        <member name="M:MAGES.MethodReference.Invoke(System.Object)">
            <summary>
            Invoke the method on the given object.
            </summary>
            <param name="self">The object instance.</param>
        </member>
        <member name="T:MAGES.NetworkingModule">
            <summary>
            The networking module base class.
            </summary>
        </member>
        <member name="P:MAGES.NetworkingModule.AutomaticSceneSetup">
            <summary>
            Gets or sets a value indicating whether all grabbable objects in the scene will automatically be configured for multiplayer.
            This will enforce the default configuration.
            </summary>
        </member>
        <member name="P:MAGES.NetworkingModule.NetworkIdType">
            <summary>
            Gets or sets the class type of the networking id.
            </summary>
        </member>
        <member name="P:MAGES.NetworkingModule.Integration">
            <summary>
            Gets or sets the plugin that will handle the networking logic.
            </summary>
        </member>
        <member name="P:MAGES.NetworkingModule.IsInitialized">
            <summary>
            Gets or sets a value indicating whether the networking module has been initialized.
            </summary>
            <returns>True after connection has been established with the server.</returns>
        </member>
        <member name="P:MAGES.NetworkingModule.IsHost">
            <summary>
            Gets or sets a value indicating whether this user is host.
            </summary>
            <returns>True if user is host. False if user is not host or has not joined a room yet.</returns>
        </member>
        <member name="M:MAGES.NetworkingModule.EstablishConnectionToMainServer(System.String)">
            <summary>
            Establish connection to the main server.
            </summary>
            <param name="args"> Connect arguments. Regions eu, us etc.</param>
            <returns> Return true if connection succeed.</returns>
        </member>
        <member name="M:MAGES.NetworkingModule.DisconnectFromMainServer">
            <summary>
            Disconnect from main server.
            Does nothing if client is not already connected.
            </summary>
        </member>
        <member name="M:MAGES.NetworkingModule.CreateRoom(System.String)">
            <summary>
            Creates a room with the provided name.
            </summary>
            <param name="roomName"> Room name.</param>
            <returns>True if room was created successfully.</returns>
        </member>
        <member name="M:MAGES.NetworkingModule.JoinRoom(System.String)">
            <summary>
            Attempts to join a room with the provided name.
            </summary>
            <param name="roomName"> The room name to join.</param>
            <returns>True if room was created successfully.</returns>
        </member>
        <member name="M:MAGES.NetworkingModule.ExitCurrentRoom">
            <summary>
            Exits the current room.
            </summary>
            <returns> True if exited successfully. </returns>
        </member>
        <member name="M:MAGES.NetworkingModule.GetAvailableRooms">
            <summary>
            Find and return all available rooms.
            </summary>
            <returns> Return a list with all available rooms.</returns>
        </member>
        <member name="M:MAGES.NetworkingModule.GetCurrentConnectedRoom">
            <summary>
            Return current connected room.
            </summary>
            <returns> Returns name of current room. Null if user is not connected to a room.</returns>
        </member>
        <member name="M:MAGES.NetworkingModule.OnDisconnected(System.String)">
            <summary>
            Called on disconnected.
            </summary>
            <param name="cause"> Disconnect cause.</param>
        </member>
        <member name="M:MAGES.NetworkingModule.OnConnected(System.String)">
            <summary>
            Called on connected to a room.
            </summary>
            <param name="info"> Connection info.</param>
        </member>
        <member name="M:MAGES.NetworkingModule.OwnershipRequest(MAGES.Utilities.MAGESObject)">
            <summary>
            Request ownership for a MAGESObject.
            </summary>
            <param name="obj"> The obj to take ownership.</param>
            <returns> Returns true if request succeed.</returns>
        </member>
        <member name="M:MAGES.NetworkingModule.GetPrefabIDFromNetwork(UnityEngine.GameObject,System.Boolean@)">
            <summary>
            Gets the prefab id from an object that was spawned from the network.
            </summary>
            <param name="prefab">The object to be checked.</param>
            <param name="isUnique">Whether this object should be unique.</param>
            <returns>A positive integer in case the object is from network. Else, returns -1.</returns>
        </member>
        <member name="M:MAGES.NetworkingModule.LinkNetworkObject(UnityEngine.GameObject,UnityEngine.GameObject)">
            <summary>
            Links network object with the remote object.
            </summary>
            <param name="networkPrefab">The remote object will be linked with the local prefab. At the end it is destroyed.</param>
            <param name="localPrefab">The local object that will be marked as remote.</param>
            <returns>True if linking was successful. False otherwise.</returns>
        </member>
        <member name="M:MAGES.NetworkingModule.NetworkSpawn(UnityEngine.GameObject,System.Boolean)">
            <summary>
            Spawns a gameobject over the network. Only required to be called from one user, preferably the host.
            </summary>
            <param name="prefab">Network object to be spawned.</param>
            <param name="spawnedByHost">If the object will be spawned by the host to all users. True by default.</param>
            <returns>The spawned object.</returns>
        </member>
        <member name="M:MAGES.NetworkingModule.RemoteDestroyComponent(UnityEngine.GameObject,System.String)">
            <summary>
            Destroys component in all other users.
            </summary>
            <param name="gameObject">The gameobject that has that component.</param>
            <param name="componentType">The type of component.</param>
        </member>
        <member name="M:MAGES.NetworkingModule.RequestChangeState(System.Byte,System.String)">
            <summary>
            Request a change in scenegraph's state.
            </summary>
            <param name="changeState">The change keycode that will be requested.</param>
            <param name="actionID">The ID of the action that will change.</param>
        </member>
        <member name="M:MAGES.NetworkingModule.GetConnectedUsersToRoom(System.String)">
            <summary>
            Gets connected users to a specific room.
            </summary>
            <param name="roomName">The name ID of the room. </param>
            <returns>The number of the connected users. Returns -1 if the room does not exist.</returns>
        </member>
        <member name="M:MAGES.NetworkingModule.GetConnectedUsersToCurrentRoom">
            <summary>
            Gets connected users to the current room.
            </summary>
            <returns>The number of the connected users in the current room. Returns -1 if not connected to a room.</returns>
        </member>
        <member name="M:MAGES.NetworkingModule.AddSyncTransform(UnityEngine.GameObject)">
            <summary>
            Adds default sync transform to a gameobject.
            </summary>
            <param name="objectToBeSynchronized">The change keycode that will be requested.</param>
        </member>
        <member name="M:MAGES.NetworkingModule.RegisterActivatedObject(UnityEngine.GameObject,System.Boolean)">
            <summary>
            Register an object that was remotely activated.
            </summary>
            <param name="grabbableObject">Object that is remotely activated.</param>
            <param name="isActivated">If true the object is added, if false the object is removed.</param>
        </member>
        <member name="M:MAGES.NetworkingModule.IsRemoteActivated(UnityEngine.GameObject)">
            <summary>
            Returns true if object is remotely activated.
            </summary>
            <param name="grabbableObject">Object to check.</param>
            <returns>Returns true if object is activated from another user.</returns>
        </member>
        <member name="M:MAGES.NetworkingModule.HasAuthority(UnityEngine.GameObject)">
            <summary>
            Checks if local user has authority over a network object.
            </summary>
            <param name="networkObject">The network object that will be checked.</param>
            <returns>True if user has authority else false. If the user is not connected in a session.</returns>
        </member>
        <member name="T:MAGES.NumericMerger">
            <summary>
            Numeric merger.
            </summary>
        </member>
        <member name="P:MAGES.NumericMerger.TargetType">
            <summary>
            Gets target type of the merger.
            </summary>
        </member>
        <member name="M:MAGES.NumericMerger.Merge(System.Object,System.Object)">
            <summary>
            Merge two numeric values.
            </summary>
            <param name="obj1">The first numeric value.</param>
            <param name="obj2">The second numeric value.</param>
            <returns>The merged numeric value.</returns>
        </member>
        <member name="T:MAGES.OverridableProperty`1">
            <summary>
            A class that can hold any data which can be overriden by a user.
            Make sure to add the <see cref="T:MAGES.DefaultValueLocatorAttribute"/> to the class; right now literal default values are not supported.
            NOTE: <see cref="T:MAGES.OverridableProperty`1"/> can <b>only</b> be used in classes that inherit from <see cref="T:MAGES.PropertyCollection"/>.
            </summary>
            <typeparam name="T">The data type.</typeparam>
        </member>
        <member name="M:MAGES.OverridableProperty`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MAGES.OverridableProperty`1"/> class.
            </summary>
        </member>
        <member name="M:MAGES.OverridableProperty`1.#ctor(System.Boolean,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:MAGES.OverridableProperty`1"/> class.
            </summary>
            <param name="isOverridden">True if the value overriden.</param>
            <param name="value">the overridden value.</param>
        </member>
        <member name="P:MAGES.OverridableProperty`1.OverridenValue">
            <inheritdoc/>
        </member>
        <member name="M:MAGES.OverridableProperty`1.GetEffectiveValue">
            <summary>
            Gets the effective value of this property.
            </summary>
            <returns>The overridden value, or the default value, accordingly.</returns>
        </member>
        <member name="M:MAGES.OverridableProperty`1.Override(`0)">
            <summary>
            Overrides the value of this property.
            </summary>
            <param name="value">The override value.</param>
        </member>
        <member name="M:MAGES.OverridableProperty`1.Reset">
            <summary>
            Resets the value of this property.
            </summary>
        </member>
        <member name="T:MAGES.OverridablePropertyBase">
            <summary>
            The base class for the <see cref="T:MAGES.OverridableProperty`1"/> classes.
            <b>DO NOT USE THIS CLASS DIRECTLY.</b>
            </summary>
        </member>
        <member name="M:MAGES.OverridablePropertyBase.#ctor(System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:MAGES.OverridablePropertyBase"/> class.
            </summary>
            <param name="isOverridden">Whether or not the value is overriden.</param>
            <param name="value">The overriden value.</param>
        </member>
        <member name="P:MAGES.OverridablePropertyBase.LocatorData">
            <summary>
            Gets or sets the locator data.
            </summary>
        </member>
        <member name="P:MAGES.OverridablePropertyBase.IsOverridden">
            <summary>
            Gets or sets a value indicating whether the property is overriden.
            </summary>
        </member>
        <member name="P:MAGES.OverridablePropertyBase.OverridenValue">
            <summary>
            Gets or sets the overriden value.
            </summary>
        </member>
        <member name="M:MAGES.OverridablePropertyBase.GetEffectiveValue">
            <summary>
            Gets the effective value of this property.
            </summary>
            <returns>The overriden or default value.</returns>
        </member>
        <member name="T:MAGES.PreviewObject">
            <summary>
            A component that warns the user that they are in preview mode.
            </summary>
        </member>
        <member name="P:MAGES.PreviewObject.Text">
            <summary>
            Gets the text to display.
            </summary>
        </member>
        <member name="M:MAGES.PreviewObject.Description(System.String)">
            <summary>
            Sets the text to display.
            </summary>
            <param name="text">The text.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:MAGES.PreviewObject.Follow(UnityEngine.GameObject)">
            <summary>
            Sets the object to follow.
            </summary>
            <param name="otherGameObject">The game object to follow.</param>
            <returns>Self.</returns>
        </member>
        <member name="T:MAGES.PropertyCollection">
            <summary>
            A class meant to be used for grouping properties that can be overriden by a user.
            NOTE: <see cref="T:MAGES.OverridableProperty`1"/> can <b>only</b> be used in classes that inherit from <see cref="T:MAGES.PropertyCollection"/>.
            </summary>
        </member>
        <member name="M:MAGES.PropertyCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MAGES.PropertyCollection"/> class.
            </summary>
        </member>
        <member name="P:MAGES.PropertyCollection.Item(System.String)">
            <summary>
            Gets the value of the property with the given name.
            </summary>
            <param name="field">The field name.</param>
            <returns>The resolved object.</returns>
        </member>
        <member name="T:MAGES.PropertyProxyUtilities">
             <summary>
             Sometimes Unity refuses to inspect objects that are not wrapped around
             <see cref="T:UnityEngine.ScriptableObject"/>. This class is a workaround for that.
             </summary>
            
             See MAGES.Editor.OverridablePropertyPropertyDrawer for more information.
        </member>
        <member name="M:MAGES.PropertyProxyUtilities.CreateProxy(System.Type,System.Object)">
            <summary>
            Create a proxy for the given value.
            </summary>
            <param name="t">The type of the value.</param>
            <param name="value">The value itself.</param>
            <returns>The Scriptable object instance containing a field named "value" with the given <paramref name="value"/> and <typeparamref name="T"/> type.</returns>
        </member>
        <member name="T:MAGES.PropertyProxyUtilities.ProxyScriptableObject">
            <summary>
            A proxy scriptable object that can be used to store any type of value.
            </summary>
        </member>
        <member name="P:MAGES.PropertyProxyUtilities.ProxyScriptableObject.GenericValue">
            <summary>
            Gets or sets the generic value.
            </summary>
        </member>
        <member name="P:MAGES.PropertyProxyUtilities.ProxyScriptableObject.ValueType">
            <summary>
            Gets the type of the value.
            </summary>
        </member>
        <member name="T:MAGES.PropertyProxyUtilities.GenericPropertyProxy">
            <summary>
            A property proxy used for objects that should accept inherited or interface-like values.
            Relevant part in <see cref="!:SerializedProperty"/> would be <see cref="!:SerializedProperty.managedReferenceValue"/>.
            </summary>
        </member>
        <member name="P:MAGES.PropertyProxyUtilities.GenericPropertyProxy.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:MAGES.PropertyProxyUtilities.GenericPropertyProxy.GenericValue">
            <inheritdoc/>
        </member>
        <member name="P:MAGES.PropertyProxyUtilities.GenericPropertyProxy.ValueType">
            <inheritdoc/>
        </member>
        <member name="T:MAGES.PropertyProxyUtilities.IntPropertyProxy">
            <summary>
            A property proxy used for objects that should accept <see cref="T:System.Int32"/> values.
            </summary>
        </member>
        <member name="P:MAGES.PropertyProxyUtilities.IntPropertyProxy.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:MAGES.PropertyProxyUtilities.IntPropertyProxy.GenericValue">
            <inheritdoc/>
        </member>
        <member name="P:MAGES.PropertyProxyUtilities.IntPropertyProxy.ValueType">
            <inheritdoc/>
        </member>
        <member name="T:MAGES.PropertyProxyUtilities.FloatPropertyProxy">
            <summary>
            A property proxy used for objects that should accept <see cref="T:System.Single"/> values.
            </summary>
        </member>
        <member name="P:MAGES.PropertyProxyUtilities.FloatPropertyProxy.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:MAGES.PropertyProxyUtilities.FloatPropertyProxy.GenericValue">
            <inheritdoc/>
        </member>
        <member name="P:MAGES.PropertyProxyUtilities.FloatPropertyProxy.ValueType">
            <inheritdoc/>
        </member>
        <member name="T:MAGES.PropertyProxyUtilities.StringPropertyProxy">
            <summary>
            A property proxy used for objects that should accept <see cref="T:System.String"/> values.
            </summary>
        </member>
        <member name="P:MAGES.PropertyProxyUtilities.StringPropertyProxy.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:MAGES.PropertyProxyUtilities.StringPropertyProxy.GenericValue">
            <inheritdoc/>
        </member>
        <member name="P:MAGES.PropertyProxyUtilities.StringPropertyProxy.ValueType">
            <inheritdoc/>
        </member>
        <member name="T:MAGES.PropertyProxyUtilities.ObjectPropertyProxy">
            <summary>
            A property proxy used for objects that should accept types that derive from
            <see cref="T:UnityEngine.Object"/>. That can be any type of asset or material, even monobehaviours.
            </summary>
        </member>
        <member name="P:MAGES.PropertyProxyUtilities.ObjectPropertyProxy.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:MAGES.PropertyProxyUtilities.ObjectPropertyProxy.GenericValue">
            <inheritdoc/>
        </member>
        <member name="P:MAGES.PropertyProxyUtilities.ObjectPropertyProxy.ValueType">
            <inheritdoc/>
        </member>
        <member name="T:MAGES.PropertyProxyUtilities.ColorPropertyProxy">
            <summary>
            A property proxy used for objects that should accept <see cref="T:UnityEngine.Color"/> values.
            </summary>
        </member>
        <member name="P:MAGES.PropertyProxyUtilities.ColorPropertyProxy.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:MAGES.PropertyProxyUtilities.ColorPropertyProxy.GenericValue">
            <inheritdoc/>
        </member>
        <member name="P:MAGES.PropertyProxyUtilities.ColorPropertyProxy.ValueType">
            <inheritdoc/>
        </member>
        <member name="T:MAGES.PropertyProxyUtilities.GradientPropertyProxy">
            <summary>
            A property proxy used for objects that should accept <see cref="T:UnityEngine.Gradient"/> values.
            </summary>
        </member>
        <member name="P:MAGES.PropertyProxyUtilities.GradientPropertyProxy.Value">
            <summary>
            Gets or sets the gradient value.
            </summary>
        </member>
        <member name="P:MAGES.PropertyProxyUtilities.GradientPropertyProxy.GenericValue">
            <inheritdoc/>
        </member>
        <member name="P:MAGES.PropertyProxyUtilities.GradientPropertyProxy.ValueType">
            <inheritdoc/>
        </member>
        <member name="T:MAGES.PropertyProxyUtilities.Vector3PropertyProxy">
            <summary>
            A property proxy used for objects that should accept <see cref="T:UnityEngine.Vector3"/> values.
            </summary>
        </member>
        <member name="P:MAGES.PropertyProxyUtilities.Vector3PropertyProxy.Value">
            <summary>
            Gets or sets the Vector3 value.
            </summary>
        </member>
        <member name="P:MAGES.PropertyProxyUtilities.Vector3PropertyProxy.GenericValue">
            <inheritdoc/>
        </member>
        <member name="P:MAGES.PropertyProxyUtilities.Vector3PropertyProxy.ValueType">
            <inheritdoc/>
        </member>
        <member name="T:MAGES.PropertyProxyUtilities.Vector4PropertyProxy">
            <summary>
            A property proxy used for objects that should accept <see cref="T:UnityEngine.Vector4"/> values.
            </summary>
        </member>
        <member name="P:MAGES.PropertyProxyUtilities.Vector4PropertyProxy.Value">
            <summary>
            Gets or sets the Vector4 value.
            </summary>
        </member>
        <member name="P:MAGES.PropertyProxyUtilities.Vector4PropertyProxy.GenericValue">
            <inheritdoc/>
        </member>
        <member name="P:MAGES.PropertyProxyUtilities.Vector4PropertyProxy.ValueType">
            <inheritdoc/>
        </member>
        <member name="T:MAGES.PropertyProxyUtilities.QuaternionPropertyProxy">
            <summary>
            A property proxy used for objects that should accept <see cref="T:UnityEngine.Quaternion"/> values.
            </summary>
        </member>
        <member name="P:MAGES.PropertyProxyUtilities.QuaternionPropertyProxy.Value">
            <summary>
            Gets or sets the Quaternion value.
            </summary>
        </member>
        <member name="P:MAGES.PropertyProxyUtilities.QuaternionPropertyProxy.GenericValue">
            <inheritdoc/>
        </member>
        <member name="P:MAGES.PropertyProxyUtilities.QuaternionPropertyProxy.ValueType">
            <inheritdoc/>
        </member>
        <member name="T:MAGES.SceneGraphModule">
            <summary>
            The scene graph module base class.
            </summary>
        </member>
        <member name="T:MAGES.SceneGraphModule.ActionInitializedEvent">
            <summary>
            Called when the action is initialized.
            </summary>
            <param name="data">The action data.</param>
        </member>
        <member name="T:MAGES.SceneGraphModule.ActionPerformedEvent">
            <summary>
            Called when the action is performed.
            </summary>
            <param name="data">The action data.</param>
            <param name="skipped">Whether the action was skipped.</param>
        </member>
        <member name="T:MAGES.SceneGraphModule.ActionUndoneEvent">
            <summary>
            Called when the action is undone.
            </summary>
            <param name="data">The action data.</param>
        </member>
        <member name="T:MAGES.SceneGraphModule.ActionStateChangeEvent">
            <summary>
            Called before an action's state is changed.
            </summary>
            <param name="data">The action.</param>
            <param name="previousState">The previous state.</param>
            <param name="newState">The new state.</param>
        </member>
        <member name="T:MAGES.SceneGraphModule.ActionCategory">
            <summary>
            The action category.
            </summary>
        </member>
        <member name="F:MAGES.SceneGraphModule.ActionCategory.Generic">
            <summary>
            The action is a generic action.
            </summary>
        </member>
        <member name="F:MAGES.SceneGraphModule.ActionCategory.Start">
            <summary>
            The action is a start action.
            </summary>
        </member>
        <member name="F:MAGES.SceneGraphModule.ActionCategory.End">
            <summary>
            The action is an end action.
            </summary>
        </member>
        <member name="P:MAGES.SceneGraphModule.PerformSound">
            <summary>
            Gets the perform sound.
            </summary>
        </member>
        <member name="P:MAGES.SceneGraphModule.UndoSound">
            <summary>
            Gets the undo sound.
            </summary>
        </member>
        <member name="P:MAGES.SceneGraphModule.InfoUI">
            <summary>
            Gets the info UI.
            </summary>
        </member>
        <member name="P:MAGES.SceneGraphModule.WarningUI">
            <summary>
            Gets the warning UI.
            </summary>
        </member>
        <member name="P:MAGES.SceneGraphModule.AchievementUI">
            <summary>
            Gets the warning UI.
            </summary>
        </member>
        <member name="P:MAGES.SceneGraphModule.ErrorUI">
            <summary>
            Gets the error UI.
            </summary>
        </member>
        <member name="P:MAGES.SceneGraphModule.HolographicMaterial">
            <summary>
            Gets or sets the holographic material for the operation.
            </summary>
        </member>
        <member name="M:MAGES.SceneGraphModule.SkipAction(MAGES.BaseActionData)">
            <summary>
            Skips a specific action.
            </summary>
            <param name="action">The action to be skipped.</param>
        </member>
        <member name="M:MAGES.SceneGraphModule.UndoAction(MAGES.BaseActionData)">
            <summary>
            Undo a specific action.
            </summary>
            <param name="action">The action to be undone.</param>
        </member>
        <member name="M:MAGES.SceneGraphModule.Skip">
            <summary>
            General version of <see cref="M:MAGES.SceneGraphModule.SkipAction(MAGES.BaseActionData)"/>.
            This will perform/skip all the currently running actions.
            </summary>
        </member>
        <member name="M:MAGES.SceneGraphModule.Undo">
            <summary>
            General version of <see cref="M:MAGES.SceneGraphModule.UndoAction(MAGES.BaseActionData)"/>.
            This will undo all the running actions, as well as the previous
            ones.
            </summary>
        </member>
        <member name="M:MAGES.SceneGraphModule.GetActionCategory(MAGES.BaseActionData)">
            <summary>
            Gets the action category.
            </summary>
            <param name="action">The action.</param>
            <returns>The category of the action.</returns>
        </member>
        <member name="M:MAGES.SceneGraphModule.ActionInitialized(MAGES.SceneGraphModule.ActionInitializedEvent)">
            <summary>
            Add event listener for when an action is initialized.
            </summary>
            <param name="action">The delegate to invoke.</param>
            <returns>The module.</returns>
        </member>
        <member name="M:MAGES.SceneGraphModule.ActionPerformed(MAGES.SceneGraphModule.ActionPerformedEvent)">
            <summary>
            Add event listener for when an action is performed.
            </summary>
            <param name="action">The delegate to invoke.</param>
            <returns>The module.</returns>
        </member>
        <member name="M:MAGES.SceneGraphModule.ActionUndone(MAGES.SceneGraphModule.ActionUndoneEvent)">
            <summary>
            Add event listener for when an action is reverted.
            </summary>
            <param name="action">The delegate to invoke.</param>
            <returns>The module.</returns>
        </member>
        <member name="M:MAGES.SceneGraphModule.ForEachAction(System.Action{MAGES.BaseActionData})">
            <summary>
            Iterate through all the actions.
            </summary>
            <param name="action">The action to invoke for each action.</param>
            <returns>The module.</returns>
        </member>
        <member name="T:MAGES.Segment">
            <summary>
            Draws a continuous, straight line between two points, with customizable endpoint objects.
            </summary>
        </member>
        <member name="P:MAGES.Segment.TargetPosition">
            <summary>
            Gets or sets the target position of the segment.
            </summary>
        </member>
        <member name="M:MAGES.Segment.Refresh">
            <summary>
            Refreshes the segment.
            </summary>
        </member>
        <member name="M:MAGES.Segment.Follow(UnityEngine.GameObject)">
            <summary>
            Follows a given game object.
            </summary>
            <param name="target">the object to follow.</param>
            <returns>Self.</returns>
        </member>
        <member name="T:MAGES.Segment.Data">
            <summary>
            The data for a <see cref="T:MAGES.Segment"/> component.
            </summary>
        </member>
        <member name="P:MAGES.Segment.Data.LineMaterial">
            <summary>
            Gets the line material.
            </summary>
        </member>
        <member name="P:MAGES.Segment.Data.ColorGradient">
            <summary>
            Gets the color gradient.
            </summary>
        </member>
        <member name="P:MAGES.Segment.Data.Width">
            <summary>
            Gets the width.
            </summary>
        </member>
        <member name="T:MAGES.Sorter`1">
            <summary>
            Class for sorting lists of objects by a key.
            </summary>
            <typeparam name="T">The type of the list to be sorted.</typeparam>
        </member>
        <member name="P:MAGES.Sorter`1.Instance">
            <summary>
            Gets the singleton instance of the sorter.
            </summary>
        </member>
        <member name="M:MAGES.Sorter`1.Sort(System.Collections.Generic.List{`0},System.Func{`0,System.Object})">
            <summary>
            Sorts the given list by the given key.
            </summary>
            <param name="list">The given list to be sorted.</param>
            <param name="keySelector">The given key to sort the list by.</param>
            <exception cref="T:System.ArgumentException">Throws an exception if the objects don't implement IComparable.</exception>
        </member>
        <member name="T:MAGES.Step">
            <summary>
            A step is a single behavior that can be performed when an action is initialized, performed, or reverted.
            </summary>
        </member>
        <member name="P:MAGES.Step.Description">
            <summary>
            Gets or sets the description of the step.
            </summary>
        </member>
        <member name="M:MAGES.Step.Execute(MAGES.BaseActionData,MAGES.StepEvent)">
            <summary>
            Executes the step.
            </summary>
            <param name="action">The action this step is stored in.</param>
            <param name="stepEvent">The event that triggered this step.</param>
        </member>
        <member name="T:MAGES.StepContainer">
            <summary>
            Contains a list of steps to be executed at a specific point in an action's lifecycle.
            </summary>
        </member>
        <member name="P:MAGES.StepContainer.BeforeInitializeSteps">
            <summary>
            Gets or sets the before initialize steps.
            </summary>
        </member>
        <member name="P:MAGES.StepContainer.AfterInitializeSteps">
            <summary>
            Gets or sets the after initialize steps.
            </summary>
        </member>
        <member name="P:MAGES.StepContainer.BeforePerformSteps">
            <summary>
            Gets or sets the before perform steps.
            </summary>
        </member>
        <member name="P:MAGES.StepContainer.AfterPerformSteps">
            <summary>
            Gets or sets the after perform steps.
            </summary>
        </member>
        <member name="P:MAGES.StepContainer.BeforeRevertSteps">
            <summary>
            Gets or sets the before revert steps.
            </summary>
        </member>
        <member name="P:MAGES.StepContainer.AfterRevertSteps">
            <summary>
            Gets or sets the after revert steps.
            </summary>
        </member>
        <member name="M:MAGES.StepContainer.StepEventToProperty(MAGES.StepEvent)">
            <summary>
            Converts a step event to a property name.
            </summary>
            <param name="e">The event.</param>
            <returns>The string of the property to search for.</returns>
        </member>
        <member name="M:MAGES.StepContainer.StepEventToProperty(System.Int32)">
            <summary>
            Converts a step event to a property name.
            </summary>
            <param name="i">The index.</param>
            <returns>The property name.</returns>
        </member>
        <member name="M:MAGES.StepContainer.Get(MAGES.StepEvent)">
            <summary>
            Gets the steps for the specified event.
            </summary>
            <param name="e">The event.</param>
            <returns>The list of steps for this event.</returns>
        </member>
        <member name="M:MAGES.StepContainer.Set(MAGES.StepEvent,System.Collections.Generic.List{MAGES.Step})">
            <summary>
            Sets the steps for the specified event.
            </summary>
            <param name="e">The event.</param>
            <param name="steps">The step list.</param>
        </member>
        <member name="T:MAGES.StepDetailsAttribute">
            <summary>
            Used to customize editor details about a specific step.
            </summary>
        </member>
        <member name="M:MAGES.StepDetailsAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MAGES.StepDetailsAttribute"/> class.
            </summary>
            <param name="description">The description. Can be rich text.</param>
        </member>
        <member name="P:MAGES.StepDetailsAttribute.Description">
            <summary>
            Gets the description.
            </summary>
        </member>
        <member name="T:MAGES.StepEvent">
            <summary>
            Event that a step can be executed on.
            </summary>
        </member>
        <member name="F:MAGES.StepEvent.BeforeInitialize">
            <summary>
            Before the action is initialized.
            </summary>
        </member>
        <member name="F:MAGES.StepEvent.AfterInitialize">
            <summary>
            After the action is initialized.
            </summary>
        </member>
        <member name="F:MAGES.StepEvent.BeforePerform">
            <summary>
            Before the action is performed.
            </summary>
        </member>
        <member name="F:MAGES.StepEvent.AfterPerform">
            <summary>
            After the action is performed.
            </summary>
        </member>
        <member name="F:MAGES.StepEvent.BeforeUndo">
            <summary>
            Before the action is reverted.
            </summary>
        </member>
        <member name="F:MAGES.StepEvent.AfterUndo">
            <summary>
            After the action is reverted.
            </summary>
        </member>
        <member name="T:MAGES.StringMerger">
            <summary>
            String merger.
            </summary>
        </member>
        <member name="P:MAGES.StringMerger.TargetType">
            <summary>
            Gets target type of the merger.
            </summary>
        </member>
        <member name="M:MAGES.StringMerger.Merge(System.Object,System.Object)">
            <summary>
            Merge two strings.
            </summary>
            <param name="obj1">The first string.</param>
            <param name="obj2">The second string.</param>
            <returns>The merged string.</returns>
        </member>
        <member name="T:MAGES.StubAnalytics">
            <summary>
            Stub class for the analytics module.
            </summary>
        </member>
        <member name="M:MAGES.StubAnalytics.Startup">
            <summary>
            Startup analytics (stub).
            </summary>
        </member>
        <member name="M:MAGES.StubAnalytics.Shutdown">
            <summary>
            Shutdown analytics (stub).
            </summary>
        </member>
        <member name="M:MAGES.StubAnalytics.InitializeTimer">
            <inheritdoc/>
        </member>
        <member name="M:MAGES.StubAnalytics.InvalidateTimer">
            <inheritdoc/>
        </member>
        <member name="M:MAGES.StubAnalytics.GetTimeSinceStartUp">
            <inheritdoc/>
        </member>
        <member name="M:MAGES.StubAnalytics.AddQuery``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:MAGES.StubAnalytics.GetQuery``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:MAGES.StubAnalytics.RemoveQuery``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:MAGES.StubAnalytics.AddEvent``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:MAGES.StubAnalytics.GetEvent``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:MAGES.StubAnalytics.RemoveEvent``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:MAGES.StubAnalytics.ExportAll">
            <inheritdoc/>
        </member>
        <member name="M:MAGES.StubAnalytics.ExportQueries(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:MAGES.StubAnalytics.ExportEvents(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:MAGES.StubDataContainer">
            <summary>
            Stub class for the data container module.
            </summary>
        </member>
        <member name="M:MAGES.StubDataContainer.Startup">
            <summary>
            Startup data container (stub).
            </summary>
        </member>
        <member name="M:MAGES.StubDataContainer.Shutdown">
            <summary>
            Startup analytics (stub).
            </summary>
        </member>
        <member name="M:MAGES.StubDataContainer.SetSchema(System.String,System.Type)">
            <summary>
            Sets the schema for the data container.
            </summary>
            <param name="keyPattern">The convention/pattern the Schema is created under, i.e mages.actions.* .</param>
            <param name="schemaType">The type of the Schema.</param>
        </member>
        <member name="M:MAGES.StubDataContainer.StoreData(System.String,System.Object)">
            <summary>
            Stores data in the schema defined under the given key.
            </summary>
            <param name="key">The given key.</param>
            <param name="value">The value to be stored.</param>
            <exception cref="T:System.ArgumentException">Throws an exception if the key is not found.</exception>
        </member>
        <member name="M:MAGES.StubDataContainer.GetData(System.String)">
            <summary>
            Gets the data stored under the given key.
            </summary>
            <param name="key">The given key.</param>
            <returns>The value stored under the given key.</returns>
            <exception cref="T:System.ArgumentException">If no data is found under the given key.</exception>
        </member>
        <member name="M:MAGES.StubDataContainer.GetSchemaData(System.String)">
            <summary>
            Gets the whole Schema data stored under the given convention/pattern.
            </summary>
            <param name="keyPattern">The convention/pattern the Schema is defined under.</param>
            <returns>A dictionary of the whole Schema data.</returns>
        </member>
        <member name="M:MAGES.StubDataContainer.DeleteData(System.String)">
            <summary>
            Deletes the data under the given key.
            </summary>
            <param name="key">Given data key.</param>
            <exception cref="T:System.ArgumentException">Throws exception if the key is not found.</exception>
        </member>
        <member name="M:MAGES.StubDataContainer.DeleteSchema(System.String)">
            <summary>
            Deletes the whole Schema under the given key.
            </summary>
            <param name="keyPattern">The given pattern/convention of the schema.</param>
            <exception cref="T:System.ArgumentException">Throws an exception if the key is not found.</exception>
        </member>
        <member name="M:MAGES.StubDataContainer.GetSpecificSchemaData(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:MAGES.StubDataContainer.DeleteSpecificSchemaData(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:MAGES.StubDataContainer.ClearAllData">
            <summary>
            Clears all data.
            </summary>
        </member>
        <member name="T:MAGES.StubDeviceManager">
            <summary>
            Stub class for device manager module.
            </summary>
        </member>
        <member name="M:MAGES.StubDeviceManager.Startup">
            <summary>
            Startup device manager (stub).
            </summary>
        </member>
        <member name="M:MAGES.StubDeviceManager.Shutdown">
            <summary>
            Shutdown device manager (stub).
            </summary>
        </member>
        <member name="T:MAGES.StubInteractionSystem">
            <summary>
            Stub class for interaction system module.
            </summary>
        </member>
        <member name="M:MAGES.StubInteractionSystem.Startup">
            <summary>
            Startup interaction system (stub).
            </summary>
        </member>
        <member name="M:MAGES.StubInteractionSystem.Shutdown">
            <summary>
            Shutdown interaction system (stub).
            </summary>
        </member>
        <member name="T:MAGES.StubNetworking">
            <summary>
            Stub class for networking module.
            </summary>
        </member>
        <member name="M:MAGES.StubNetworking.Startup">
            <summary>
            Startup networking (stub).
            </summary>
        </member>
        <member name="M:MAGES.StubNetworking.Shutdown">
            <summary>
            Shutdown networking (stub).
            </summary>
        </member>
        <member name="M:MAGES.StubNetworking.EstablishConnectionToMainServer(System.String)">
            <inheritdoc cref="M:MAGES.NetworkingModule.EstablishConnectionToMainServer(System.String)"/>
        </member>
        <member name="M:MAGES.StubNetworking.DisconnectFromMainServer">
            <inheritdoc cref="M:MAGES.NetworkingModule.DisconnectFromMainServer"/>
        </member>
        <member name="M:MAGES.StubNetworking.CreateRoom(System.String)">
            <inheritdoc cref="M:MAGES.NetworkingModule.CreateRoom(System.String)"/>
        </member>
        <member name="M:MAGES.StubNetworking.JoinRoom(System.String)">
            <inheritdoc cref="M:MAGES.NetworkingModule.JoinRoom(System.String)"/>
        </member>
        <member name="M:MAGES.StubNetworking.ExitCurrentRoom">
            <inheritdoc cref="M:MAGES.NetworkingModule.ExitCurrentRoom"/>
        </member>
        <member name="M:MAGES.StubNetworking.GetAvailableRooms">
            <inheritdoc cref="M:MAGES.NetworkingModule.GetAvailableRooms"/>
        </member>
        <member name="M:MAGES.StubNetworking.GetCurrentConnectedRoom">
            <inheritdoc cref="M:MAGES.NetworkingModule.GetCurrentConnectedRoom"/>
        </member>
        <member name="M:MAGES.StubNetworking.OnDisconnected(System.String)">
            <inheritdoc cref="M:MAGES.NetworkingModule.OnDisconnected(System.String)"/>
        </member>
        <member name="M:MAGES.StubNetworking.OnConnected(System.String)">
            <inheritdoc cref="M:MAGES.NetworkingModule.OnConnected(System.String)"/>
        </member>
        <member name="M:MAGES.StubNetworking.OwnershipRequest(MAGES.Utilities.MAGESObject)">
            <inheritdoc cref="M:MAGES.NetworkingModule.OwnershipRequest(MAGES.Utilities.MAGESObject)"/>
        </member>
        <member name="M:MAGES.StubNetworking.GetPrefabIDFromNetwork(UnityEngine.GameObject,System.Boolean@)">
            <inheritdoc cref="M:MAGES.NetworkingModule.GetPrefabIDFromNetwork(UnityEngine.GameObject,System.Boolean@)"/>
        </member>
        <member name="M:MAGES.StubNetworking.LinkNetworkObject(UnityEngine.GameObject,UnityEngine.GameObject)">
            <inheritdoc cref="M:MAGES.NetworkingModule.LinkNetworkObject(UnityEngine.GameObject,UnityEngine.GameObject)"/>
        </member>
        <member name="M:MAGES.StubNetworking.NetworkSpawn(UnityEngine.GameObject,System.Boolean)">
            <inheritdoc cref="M:MAGES.NetworkingModule.NetworkSpawn(UnityEngine.GameObject,System.Boolean)"/>
        </member>
        <member name="M:MAGES.StubNetworking.RemoteDestroyComponent(UnityEngine.GameObject,System.String)">
            <inheritdoc cref="M:MAGES.NetworkingModule.RemoteDestroyComponent(UnityEngine.GameObject,System.String)"/>
        </member>
        <member name="M:MAGES.StubNetworking.RequestChangeState(System.Byte,System.String)">
            <inheritdoc cref="M:MAGES.NetworkingModule.RequestChangeState(System.Byte,System.String)"/>
        </member>
        <member name="M:MAGES.StubNetworking.GetConnectedUsersToRoom(System.String)">
            <inheritdoc cref="M:MAGES.NetworkingModule.GetConnectedUsersToRoom(System.String)"/>
        </member>
        <member name="M:MAGES.StubNetworking.GetConnectedUsersToCurrentRoom">
            <inheritdoc cref="M:MAGES.NetworkingModule.GetConnectedUsersToCurrentRoom"/>
        </member>
        <member name="M:MAGES.StubNetworking.AddSyncTransform(UnityEngine.GameObject)">
            <inheritdoc cref="M:MAGES.NetworkingModule.AddSyncTransform(UnityEngine.GameObject)"/>
        </member>
        <member name="M:MAGES.StubNetworking.RegisterActivatedObject(UnityEngine.GameObject,System.Boolean)">
            <inheritdoc cref="M:MAGES.NetworkingModule.RegisterActivatedObject(UnityEngine.GameObject,System.Boolean)"/>
        </member>
        <member name="M:MAGES.StubNetworking.IsRemoteActivated(UnityEngine.GameObject)">
            <inheritdoc cref="M:MAGES.NetworkingModule.IsRemoteActivated(UnityEngine.GameObject)"/>
        </member>
        <member name="M:MAGES.StubNetworking.HasAuthority(UnityEngine.GameObject)">
            <inheritdoc cref="M:MAGES.NetworkingModule.HasAuthority(UnityEngine.GameObject)"/>
        </member>
        <member name="T:MAGES.TagLabel">
            <summary>
            Meant to tag certain objects in the scene with textual information.
            </summary>
        </member>
        <member name="M:MAGES.TagLabel.Refresh">
            <summary>
            Refreshes the tag label layout and positions of items.
            </summary>
        </member>
        <member name="M:MAGES.TagLabel.Text(System.String)">
            <summary>
            Sets the text.
            </summary>
            <param name="text">The text.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:MAGES.TagLabel.TagObject(UnityEngine.GameObject)">
            <summary>
            Tags the given game object.
            </summary>
            <param name="gameObject">The gameobject to tag.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:MAGES.TagLabel.Font(MAGES.Theme.FontData)">
            <summary>
            Sets the data.
            </summary>
            <param name="data">The new data.</param>
            <returns>Self.</returns>
        </member>
        <member name="T:MAGES.TagLabel.Data">
            <summary>
            Data for <see cref="T:MAGES.TagLabel"/>.
            </summary>
        </member>
        <member name="P:MAGES.TagLabel.Data.ResolvedFont">
            <summary>
            Gets the resolved font.
            </summary>
        </member>
        <member name="P:MAGES.TagLabel.Data.Font">
            <summary>
            Gets the font.
            </summary>
        </member>
        <member name="T:MAGES.Theme">
            <summary>
            A theme is a collection of values that can be used to style a MAGES App.
            </summary>
        </member>
        <member name="P:MAGES.Theme.GhostMaterial">
            <summary>
            Gets or sets the material of the ghost.
            </summary>
        </member>
        <member name="P:MAGES.Theme.GhostColor">
            <summary>
            Gets or sets the color of the ghost.
            </summary>
        </member>
        <member name="P:MAGES.Theme.GhostAnimation">
            <summary>
            Gets or sets the animation clip of the ghost.
            </summary>
        </member>
        <member name="P:MAGES.Theme.SpatialLabelFont">
            <summary>
            Gets or sets the font data for spatial labels.
            </summary>
        </member>
        <member name="P:MAGES.Theme.SpatialLabelPadding">
            <summary>
            Gets or sets the padding for spatial labels.
            </summary>
        </member>
        <member name="P:MAGES.Theme.SegmentMaterial">
            <summary>
            Gets or sets the material for segments.
            </summary>
        </member>
        <member name="P:MAGES.Theme.SegmentGradient">
            <summary>
            Gets or sets the gradient for segments.
            </summary>
        </member>
        <member name="P:MAGES.Theme.SegmentWidth">
            <summary>
            Gets or sets the width of segments.
            </summary>
        </member>
        <member name="T:MAGES.Theme.FontData">
            <summary>
            Represents the data required for creating/rendering labels.
            </summary>
        </member>
        <member name="P:MAGES.Theme.FontData.FontAsset">
            <summary>
            Gets or sets the font asset.
            </summary>
        </member>
        <member name="P:MAGES.Theme.FontData.Size">
            <summary>
            Gets or sets the font size.
            </summary>
        </member>
        <member name="P:MAGES.Theme.FontData.Style">
            <summary>
            Gets or sets the font style.
            </summary>
        </member>
        <member name="P:MAGES.Theme.FontData.Color">
            <summary>
            Gets or sets the font color.
            </summary>
        </member>
        <member name="P:MAGES.Theme.FontData.BackgroundColor">
            <summary>
            Gets or sets the background color.
            </summary>
        </member>
        <member name="P:MAGES.Theme.FontData.OutlineColor">
            <summary>
            Gets or sets the outline color.
            </summary>
        </member>
        <member name="P:MAGES.Theme.FontData.OutlineWidth">
            <summary>
            Gets or sets the outline width.
            </summary>
        </member>
        <member name="M:MAGES.Theme.FontData.Clone">
            <summary>
            Clone the object.
            </summary>
            <returns>A copy of this.</returns>
        </member>
        <member name="T:MAGES.Theme.Defaults">
            <summary>
            The default values locator theming MAGES.
            </summary>
        </member>
        <member name="M:MAGES.Theme.Defaults.Locate(System.String)">
            <summary>
            Locate the object.
            </summary>
            <param name="key">The key.</param>
            <returns>The object that matches <paramref name="key"/>.</returns>
        </member>
        <member name="T:MAGES.TypeReference">
            <summary>
            A reference to a type.
            </summary>
        </member>
        <member name="P:MAGES.TypeReference.Resolved">
            <summary>
            Gets the resolved type.
            </summary>
        </member>
        <member name="M:MAGES.TypeReference.OnAfterDeserialize">
            <summary>
            After deserialization, resolve the type.
            </summary>
        </member>
        <member name="M:MAGES.TypeReference.OnBeforeSerialize">
            <summary>
            Before serialization, store the assembly qualified name.
            </summary>
        </member>
        <member name="T:MAGES.UniqueIdentifier">
            <summary>
            A component that provides a unique identifier for a GameObject.
            </summary>
        </member>
        <member name="P:MAGES.UniqueIdentifier.IsGuidAssigned">
            <summary>
            Gets a value indicating whether this instance is assigned a GUID.
            </summary>
        </member>
        <member name="P:MAGES.UniqueIdentifier.ID">
            <summary>
            Gets the GUID.
            </summary>
        </member>
        <member name="M:MAGES.UniqueIdentifier.OnAfterDeserialize">
            <summary>
            Called after deserialization.
            </summary>
        </member>
        <member name="M:MAGES.UniqueIdentifier.OnBeforeSerialize">
            <summary>
            Called before serialization.
            </summary>
        </member>
        <member name="T:MAGES.UniqueIdentifierManager">
            <summary>
            Unique identifier manager.
            </summary>
        </member>
        <member name="M:MAGES.UniqueIdentifierManager.Add(MAGES.UniqueIdentifier)">
            <summary>
            Adds the specified uid.
            </summary>
            <param name="uid">The component.</param>
            <returns>True if it was added.</returns>
        </member>
        <member name="M:MAGES.UniqueIdentifierManager.Remove(System.Guid)">
            <summary>
            Removes the specified guid.
            </summary>
            <param name="guid">The guid to remove.</param>
        </member>
        <member name="M:MAGES.UniqueIdentifierManager.Resolve(System.Guid,System.Action{UnityEngine.GameObject},System.Action)">
            <summary>
            Resolves the specified guid.
            </summary>
            <param name="guid">The guid.</param>
            <param name="addedCallback">Called when the object is added.</param>
            <param name="removedCallback">Called when the object is destroyed.</param>
            <returns>The resolved game object.</returns>
        </member>
        <member name="M:MAGES.UniqueIdentifierManager.Resolve(System.Guid,System.Action)">
            <summary>
            Resolves the specified guid.
            </summary>
            <param name="guid">The guid.</param>
            <param name="destroyedCallback">Callback for when the object is destroyed.</param>
            <returns>The resolved game object.</returns>
        </member>
        <member name="M:MAGES.UniqueIdentifierManager.Resolve(System.Guid)">
            <summary>
            Resolves the specified guid.
            </summary>
            <param name="guid">The guid.</param>
            <returns>The resolved game object.</returns>
        </member>
        <member name="M:MAGES.UniqueIdentifierManager.GUIDInfo.#ctor(MAGES.UniqueIdentifier)">
            <summary>
            Initializes a new instance of the <see cref="T:MAGES.UniqueIdentifierManager.GUIDInfo"/> struct.
            </summary>
            <param name="uid">The component.</param>
        </member>
        <member name="T:MAGES.UniqueReference">
            <summary>
            A reference to a <see cref="T:MAGES.UniqueIdentifier"/> component.
            </summary>
        </member>
        <member name="M:MAGES.UniqueReference.#ctor(MAGES.UniqueIdentifier)">
            <summary>
            Initializes a new instance of the <see cref="T:MAGES.UniqueReference"/> class.
            </summary>
            <param name="target">The target component.</param>
        </member>
        <member name="P:MAGES.UniqueReference.GuidAdded">
            <summary>
            Gets or sets the guid added event action.
            </summary>
        </member>
        <member name="P:MAGES.UniqueReference.GuidRemoved">
            <summary>
            Gets or sets the guid removed event action.
            </summary>
        </member>
        <member name="P:MAGES.UniqueReference.Resolved">
            <summary>
            Gets the resolved game object.
            </summary>
        </member>
        <member name="M:MAGES.UniqueReference.OnBeforeSerialize">
            <summary>
            Before serialize event.
            </summary>
        </member>
        <member name="M:MAGES.UniqueReference.OnAfterDeserialize">
            <summary>
            After deserialize event.
            </summary>
        </member>
        <member name="T:MAGES.UpdatePhase">
            <summary>
            Used in InteractionManager to determine when the Process methods are called.
            </summary>
        </member>
        <member name="F:MAGES.UpdatePhase.Update">
            <summary>
            In Unity's Update.
            </summary>
        </member>
        <member name="F:MAGES.UpdatePhase.LateUpdate">
            <summary>
            In Unity's LateUpdate.
            </summary>
        </member>
        <member name="F:MAGES.UpdatePhase.FixedUpdate">
            <summary>
            In Unity's FixedUpdate.
            </summary>
        </member>
        <member name="F:MAGES.UpdatePhase.OnPreRender">
            <summary>
            Just before rendering.
            </summary>
        </member>
        <member name="F:MAGES.UpdatePhase.OnPostRender">
            <summary>
            Just after rendering.
            </summary>
        </member>
        <member name="T:MAGES.WorldSpaceCanvas">
            <summary>
            A component which creates a canvas that is ready for XR.
            </summary>
            @todo(mdodis): Make this work more like a UI builder:
            - AddChild returns a new child (or existing) go w/WorldSpaceCanvas component
        </member>
        <member name="P:MAGES.WorldSpaceCanvas.Position">
            <summary>
            Gets or sets the position of the canvas.
            </summary>
        </member>
        <member name="P:MAGES.WorldSpaceCanvas.RC">
            <summary>
            Gets the RectTransform of the canvas.
            </summary>
        </member>
        <member name="P:MAGES.WorldSpaceCanvas.Size">
            <summary>
            Gets or sets the size (width, height; not scale) of the canvas.
            </summary>
        </member>
        <member name="P:MAGES.WorldSpaceCanvas.Pivot">
            <summary>
            Gets or sets the pivot of the canvas.
            </summary>
        </member>
        <member name="M:MAGES.WorldSpaceCanvas.AddChild(System.String)">
            <summary>
            Adds a child to the canvas.
            </summary>
            <param name="name">Optional name of the child game object.</param>
            <returns>The new child gameobject.</returns>
        </member>
    </members>
</doc>
